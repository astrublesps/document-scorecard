#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jun  2 09:48:17 2016 by generateDS.py version 2.22a.
#
# Command line options:
#   ('-f', '')
#   ('-o', 'app/schemasLayout.py')
#
# Command line arguments:
#   app/SCHEMAS/Shipment-7.6.xsd
#
# Command line:
#   generateDS/generateDS.py -f -o "app/schemasLayout.py" app/SCHEMAS/Shipment-7.6.xsd
#
# Current working directory (os.getcwd()):
#   application
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Shipments(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Shipment=None):
        self.original_tagname_ = None
        if Shipment is None:
            self.Shipment = []
        else:
            self.Shipment = Shipment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Shipments)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Shipments.subclass:
            return Shipments.subclass(*args_, **kwargs_)
        else:
            return Shipments(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Shipment(self): return self.Shipment
    def set_Shipment(self, Shipment): self.Shipment = Shipment
    def add_Shipment(self, value): self.Shipment.append(value)
    def insert_Shipment_at(self, index, value): self.Shipment.insert(index, value)
    def replace_Shipment_at(self, index, value): self.Shipment[index] = value
    def hasContent_(self):
        if (
            self.Shipment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Shipments', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Shipments')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Shipments', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Shipments'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Shipments', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Shipment_ in self.Shipment:
            Shipment_.export(outfile, level, namespace_, name_='Shipment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Shipment':
            obj_ = Shipment.factory()
            obj_.build(child_)
            self.Shipment.append(obj_)
            obj_.original_tagname_ = 'Shipment'
# end class Shipments


class Shipment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Meta=None, Header=None, ContainerLevel=None, OrderLevel=None, PackLevel=None, ItemLevel=None, Summary=None):
        self.original_tagname_ = None
        self.Meta = Meta
        self.Header = Header
        if ContainerLevel is None:
            self.ContainerLevel = []
        else:
            self.ContainerLevel = ContainerLevel
        if OrderLevel is None:
            self.OrderLevel = []
        else:
            self.OrderLevel = OrderLevel
        if PackLevel is None:
            self.PackLevel = []
        else:
            self.PackLevel = PackLevel
        if ItemLevel is None:
            self.ItemLevel = []
        else:
            self.ItemLevel = ItemLevel
        self.Summary = Summary
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Shipment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Shipment.subclass:
            return Shipment.subclass(*args_, **kwargs_)
        else:
            return Shipment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Meta(self): return self.Meta
    def set_Meta(self, Meta): self.Meta = Meta
    def get_Header(self): return self.Header
    def set_Header(self, Header): self.Header = Header
    def get_ContainerLevel(self): return self.ContainerLevel
    def set_ContainerLevel(self, ContainerLevel): self.ContainerLevel = ContainerLevel
    def add_ContainerLevel(self, value): self.ContainerLevel.append(value)
    def insert_ContainerLevel_at(self, index, value): self.ContainerLevel.insert(index, value)
    def replace_ContainerLevel_at(self, index, value): self.ContainerLevel[index] = value
    def get_OrderLevel(self): return self.OrderLevel
    def set_OrderLevel(self, OrderLevel): self.OrderLevel = OrderLevel
    def add_OrderLevel(self, value): self.OrderLevel.append(value)
    def insert_OrderLevel_at(self, index, value): self.OrderLevel.insert(index, value)
    def replace_OrderLevel_at(self, index, value): self.OrderLevel[index] = value
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def add_PackLevel(self, value): self.PackLevel.append(value)
    def insert_PackLevel_at(self, index, value): self.PackLevel.insert(index, value)
    def replace_PackLevel_at(self, index, value): self.PackLevel[index] = value
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def add_ItemLevel(self, value): self.ItemLevel.append(value)
    def insert_ItemLevel_at(self, index, value): self.ItemLevel.insert(index, value)
    def replace_ItemLevel_at(self, index, value): self.ItemLevel[index] = value
    def get_Summary(self): return self.Summary
    def set_Summary(self, Summary): self.Summary = Summary
    def hasContent_(self):
        if (
            self.Meta is not None or
            self.Header is not None or
            self.ContainerLevel or
            self.OrderLevel or
            self.PackLevel or
            self.ItemLevel or
            self.Summary is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Shipment', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Shipment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Shipment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Shipment'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Shipment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Meta is not None:
            self.Meta.export(outfile, level, namespace_, name_='Meta', pretty_print=pretty_print)
        if self.Header is not None:
            self.Header.export(outfile, level, namespace_, name_='Header', pretty_print=pretty_print)
        for ContainerLevel_ in self.ContainerLevel:
            ContainerLevel_.export(outfile, level, namespace_, name_='ContainerLevel', pretty_print=pretty_print)
        for OrderLevel_ in self.OrderLevel:
            OrderLevel_.export(outfile, level, namespace_, name_='OrderLevel', pretty_print=pretty_print)
        for PackLevel_ in self.PackLevel:
            PackLevel_.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        for ItemLevel_ in self.ItemLevel:
            ItemLevel_.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        if self.Summary is not None:
            self.Summary.export(outfile, level, namespace_, name_='Summary', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Meta':
            obj_ = MetaType.factory()
            obj_.build(child_)
            self.Meta = obj_
            obj_.original_tagname_ = 'Meta'
        elif nodeName_ == 'Header':
            obj_ = HeaderType.factory()
            obj_.build(child_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'ContainerLevel':
            obj_ = ContainerLevel.factory()
            obj_.build(child_)
            self.ContainerLevel.append(obj_)
            obj_.original_tagname_ = 'ContainerLevel'
        elif nodeName_ == 'OrderLevel':
            obj_ = OrderLevelType.factory()
            obj_.build(child_)
            self.OrderLevel.append(obj_)
            obj_.original_tagname_ = 'OrderLevel'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel.append(obj_)
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevel.factory()
            obj_.build(child_)
            self.ItemLevel.append(obj_)
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'Summary':
            obj_ = SummaryType.factory()
            obj_.build(child_)
            self.Summary = obj_
            obj_.original_tagname_ = 'Summary'
# end class Shipment


class ContainerLevel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Container=None, Date=None, Reference=None, Notes=None, QuantityAndWeight=None, CarrierInformation=None, Address=None, OrderLevel=None, PackLevel=None, ItemLevel=None):
        self.original_tagname_ = None
        self.Container = Container
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if QuantityAndWeight is None:
            self.QuantityAndWeight = []
        else:
            self.QuantityAndWeight = QuantityAndWeight
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        if OrderLevel is None:
            self.OrderLevel = []
        else:
            self.OrderLevel = OrderLevel
        if PackLevel is None:
            self.PackLevel = []
        else:
            self.PackLevel = PackLevel
        if ItemLevel is None:
            self.ItemLevel = []
        else:
            self.ItemLevel = ItemLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContainerLevel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContainerLevel.subclass:
            return ContainerLevel.subclass(*args_, **kwargs_)
        else:
            return ContainerLevel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Container(self): return self.Container
    def set_Container(self, Container): self.Container = Container
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_QuantityAndWeight(self): return self.QuantityAndWeight
    def set_QuantityAndWeight(self, QuantityAndWeight): self.QuantityAndWeight = QuantityAndWeight
    def add_QuantityAndWeight(self, value): self.QuantityAndWeight.append(value)
    def insert_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight.insert(index, value)
    def replace_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_OrderLevel(self): return self.OrderLevel
    def set_OrderLevel(self, OrderLevel): self.OrderLevel = OrderLevel
    def add_OrderLevel(self, value): self.OrderLevel.append(value)
    def insert_OrderLevel_at(self, index, value): self.OrderLevel.insert(index, value)
    def replace_OrderLevel_at(self, index, value): self.OrderLevel[index] = value
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def add_PackLevel(self, value): self.PackLevel.append(value)
    def insert_PackLevel_at(self, index, value): self.PackLevel.insert(index, value)
    def replace_PackLevel_at(self, index, value): self.PackLevel[index] = value
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def add_ItemLevel(self, value): self.ItemLevel.append(value)
    def insert_ItemLevel_at(self, index, value): self.ItemLevel.insert(index, value)
    def replace_ItemLevel_at(self, index, value): self.ItemLevel[index] = value
    def hasContent_(self):
        if (
            self.Container is not None or
            self.Date or
            self.Reference or
            self.Notes or
            self.QuantityAndWeight or
            self.CarrierInformation or
            self.Address or
            self.OrderLevel or
            self.PackLevel or
            self.ItemLevel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContainerLevel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContainerLevel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContainerLevel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContainerLevel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContainerLevel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Container is not None:
            self.Container.export(outfile, level, namespace_, name_='Container', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for QuantityAndWeight_ in self.QuantityAndWeight:
            QuantityAndWeight_.export(outfile, level, namespace_, name_='QuantityAndWeight', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        for OrderLevel_ in self.OrderLevel:
            OrderLevel_.export(outfile, level, namespace_, name_='OrderLevel', pretty_print=pretty_print)
        for PackLevel_ in self.PackLevel:
            PackLevel_.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        for ItemLevel_ in self.ItemLevel:
            ItemLevel_.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Container':
            obj_ = ContainerType.factory()
            obj_.build(child_)
            self.Container = obj_
            obj_.original_tagname_ = 'Container'
        elif nodeName_ == 'Date':
            obj_ = DateType627.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType629.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType633.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'QuantityAndWeight':
            obj_ = QuantityAndWeightType635.factory()
            obj_.build(child_)
            self.QuantityAndWeight.append(obj_)
            obj_.original_tagname_ = 'QuantityAndWeight'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType642.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Address':
            obj_ = AddressType658.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'OrderLevel':
            obj_ = OrderLevel.factory()
            obj_.build(child_)
            self.OrderLevel.append(obj_)
            obj_.original_tagname_ = 'OrderLevel'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel.append(obj_)
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevel.factory()
            obj_.build(child_)
            self.ItemLevel.append(obj_)
            obj_.original_tagname_ = 'ItemLevel'
# end class ContainerLevel


class OrderLevel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OrderHeader=None, QuantityAndWeight=None, CarrierInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, Commodity=None, PackLevel=None, ItemLevel=None, ContainerLevel=None):
        self.original_tagname_ = None
        self.OrderHeader = OrderHeader
        if QuantityAndWeight is None:
            self.QuantityAndWeight = []
        else:
            self.QuantityAndWeight = QuantityAndWeight
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        if PackLevel is None:
            self.PackLevel = []
        else:
            self.PackLevel = PackLevel
        if ItemLevel is None:
            self.ItemLevel = []
        else:
            self.ItemLevel = ItemLevel
        if ContainerLevel is None:
            self.ContainerLevel = []
        else:
            self.ContainerLevel = ContainerLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderLevel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderLevel.subclass:
            return OrderLevel.subclass(*args_, **kwargs_)
        else:
            return OrderLevel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OrderHeader(self): return self.OrderHeader
    def set_OrderHeader(self, OrderHeader): self.OrderHeader = OrderHeader
    def get_QuantityAndWeight(self): return self.QuantityAndWeight
    def set_QuantityAndWeight(self, QuantityAndWeight): self.QuantityAndWeight = QuantityAndWeight
    def add_QuantityAndWeight(self, value): self.QuantityAndWeight.append(value)
    def insert_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight.insert(index, value)
    def replace_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def add_PackLevel(self, value): self.PackLevel.append(value)
    def insert_PackLevel_at(self, index, value): self.PackLevel.insert(index, value)
    def replace_PackLevel_at(self, index, value): self.PackLevel[index] = value
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def add_ItemLevel(self, value): self.ItemLevel.append(value)
    def insert_ItemLevel_at(self, index, value): self.ItemLevel.insert(index, value)
    def replace_ItemLevel_at(self, index, value): self.ItemLevel[index] = value
    def get_ContainerLevel(self): return self.ContainerLevel
    def set_ContainerLevel(self, ContainerLevel): self.ContainerLevel = ContainerLevel
    def add_ContainerLevel(self, value): self.ContainerLevel.append(value)
    def insert_ContainerLevel_at(self, index, value): self.ContainerLevel.insert(index, value)
    def replace_ContainerLevel_at(self, index, value): self.ContainerLevel[index] = value
    def hasContent_(self):
        if (
            self.OrderHeader is not None or
            self.QuantityAndWeight or
            self.CarrierInformation or
            self.Date or
            self.Reference or
            self.Notes or
            self.Address or
            self.Tax or
            self.ChargesAllowances or
            self.Commodity or
            self.PackLevel or
            self.ItemLevel or
            self.ContainerLevel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderLevel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderLevel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderLevel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderLevel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderLevel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrderHeader is not None:
            self.OrderHeader.export(outfile, level, namespace_, name_='OrderHeader', pretty_print=pretty_print)
        for QuantityAndWeight_ in self.QuantityAndWeight:
            QuantityAndWeight_.export(outfile, level, namespace_, name_='QuantityAndWeight', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        for PackLevel_ in self.PackLevel:
            PackLevel_.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        for ItemLevel_ in self.ItemLevel:
            ItemLevel_.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        for ContainerLevel_ in self.ContainerLevel:
            ContainerLevel_.export(outfile, level, namespace_, name_='ContainerLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OrderHeader':
            obj_ = OrderHeaderType671.factory()
            obj_.build(child_)
            self.OrderHeader = obj_
            obj_.original_tagname_ = 'OrderHeader'
        elif nodeName_ == 'QuantityAndWeight':
            obj_ = QuantityAndWeightType672.factory()
            obj_.build(child_)
            self.QuantityAndWeight.append(obj_)
            obj_.original_tagname_ = 'QuantityAndWeight'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType679.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType695.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType697.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType701.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType703.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType716.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType723.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType737.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel.append(obj_)
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevel.factory()
            obj_.build(child_)
            self.ItemLevel.append(obj_)
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'ContainerLevel':
            obj_ = ContainerLevel.factory()
            obj_.build(child_)
            self.ContainerLevel.append(obj_)
            obj_.original_tagname_ = 'ContainerLevel'
# end class OrderLevel


class PackLevel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Pack=None, PhysicalDetails=None, MarksAndNumbersCollection=None, PalletInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, CarrierInformation=None, Packaging=None, ItemLevel=None, PackLevel_member=None):
        self.original_tagname_ = None
        self.Pack = Pack
        if PhysicalDetails is None:
            self.PhysicalDetails = []
        else:
            self.PhysicalDetails = PhysicalDetails
        if MarksAndNumbersCollection is None:
            self.MarksAndNumbersCollection = []
        else:
            self.MarksAndNumbersCollection = MarksAndNumbersCollection
        if PalletInformation is None:
            self.PalletInformation = []
        else:
            self.PalletInformation = PalletInformation
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Packaging is None:
            self.Packaging = []
        else:
            self.Packaging = Packaging
        if ItemLevel is None:
            self.ItemLevel = []
        else:
            self.ItemLevel = ItemLevel
        if PackLevel_member is None:
            self.PackLevel = []
        else:
            self.PackLevel = PackLevel_member
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackLevel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackLevel.subclass:
            return PackLevel.subclass(*args_, **kwargs_)
        else:
            return PackLevel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Pack(self): return self.Pack
    def set_Pack(self, Pack): self.Pack = Pack
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def add_PhysicalDetails(self, value): self.PhysicalDetails.append(value)
    def insert_PhysicalDetails_at(self, index, value): self.PhysicalDetails.insert(index, value)
    def replace_PhysicalDetails_at(self, index, value): self.PhysicalDetails[index] = value
    def get_MarksAndNumbersCollection(self): return self.MarksAndNumbersCollection
    def set_MarksAndNumbersCollection(self, MarksAndNumbersCollection): self.MarksAndNumbersCollection = MarksAndNumbersCollection
    def add_MarksAndNumbersCollection(self, value): self.MarksAndNumbersCollection.append(value)
    def insert_MarksAndNumbersCollection_at(self, index, value): self.MarksAndNumbersCollection.insert(index, value)
    def replace_MarksAndNumbersCollection_at(self, index, value): self.MarksAndNumbersCollection[index] = value
    def get_PalletInformation(self): return self.PalletInformation
    def set_PalletInformation(self, PalletInformation): self.PalletInformation = PalletInformation
    def add_PalletInformation(self, value): self.PalletInformation.append(value)
    def insert_PalletInformation_at(self, index, value): self.PalletInformation.insert(index, value)
    def replace_PalletInformation_at(self, index, value): self.PalletInformation[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def add_Packaging(self, value): self.Packaging.append(value)
    def insert_Packaging_at(self, index, value): self.Packaging.insert(index, value)
    def replace_Packaging_at(self, index, value): self.Packaging[index] = value
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def add_ItemLevel(self, value): self.ItemLevel.append(value)
    def insert_ItemLevel_at(self, index, value): self.ItemLevel.insert(index, value)
    def replace_ItemLevel_at(self, index, value): self.ItemLevel[index] = value
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def add_PackLevel(self, value): self.PackLevel.append(value)
    def insert_PackLevel_at(self, index, value): self.PackLevel.insert(index, value)
    def replace_PackLevel_at(self, index, value): self.PackLevel[index] = value
    def hasContent_(self):
        if (
            self.Pack is not None or
            self.PhysicalDetails or
            self.MarksAndNumbersCollection or
            self.PalletInformation or
            self.Date or
            self.Reference or
            self.Notes or
            self.Address or
            self.Tax or
            self.ChargesAllowances or
            self.CarrierInformation or
            self.Packaging or
            self.ItemLevel or
            self.PackLevel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackLevel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackLevel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackLevel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackLevel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackLevel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Pack is not None:
            self.Pack.export(outfile, level, namespace_, name_='Pack', pretty_print=pretty_print)
        for PhysicalDetails_ in self.PhysicalDetails:
            PhysicalDetails_.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        for MarksAndNumbersCollection_ in self.MarksAndNumbersCollection:
            MarksAndNumbersCollection_.export(outfile, level, namespace_, name_='MarksAndNumbersCollection', pretty_print=pretty_print)
        for PalletInformation_ in self.PalletInformation:
            PalletInformation_.export(outfile, level, namespace_, name_='PalletInformation', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Packaging_ in self.Packaging:
            Packaging_.export(outfile, level, namespace_, name_='Packaging', pretty_print=pretty_print)
        for ItemLevel_ in self.ItemLevel:
            ItemLevel_.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        for PackLevel_ in self.PackLevel:
            PackLevel_.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Pack':
            obj_ = PackType739.factory()
            obj_.build(child_)
            self.Pack = obj_
            obj_.original_tagname_ = 'Pack'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType741.factory()
            obj_.build(child_)
            self.PhysicalDetails.append(obj_)
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'MarksAndNumbersCollection':
            obj_ = MarksAndNumbersCollectionType750.factory()
            obj_.build(child_)
            self.MarksAndNumbersCollection.append(obj_)
            obj_.original_tagname_ = 'MarksAndNumbersCollection'
        elif nodeName_ == 'PalletInformation':
            obj_ = PalletInformationType752.factory()
            obj_.build(child_)
            self.PalletInformation.append(obj_)
            obj_.original_tagname_ = 'PalletInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType762.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType764.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType768.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType770.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType783.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType790.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType804.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Packaging':
            obj_ = PackagingType820.factory()
            obj_.build(child_)
            self.Packaging.append(obj_)
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevel.factory()
            obj_.build(child_)
            self.ItemLevel.append(obj_)
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel.append(obj_)
            obj_.original_tagname_ = 'PackLevel'
# end class PackLevel


class ItemLevel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentLine=None, PhysicalDetails=None, CarrierSpecialHandlingDetail=None, CarrierInformation=None, Measurements=None, PriceInformation=None, ProductOrItemDescription=None, MasterItemAttribute=None, Date=None, Reference=None, Notes=None, Commodity=None, Address=None, Sublines=None, Tax=None, ChargesAllowances=None, ItemLoadInfo=None, PackLevel=None, OrderLevel=None):
        self.original_tagname_ = None
        self.ShipmentLine = ShipmentLine
        if PhysicalDetails is None:
            self.PhysicalDetails = []
        else:
            self.PhysicalDetails = PhysicalDetails
        if CarrierSpecialHandlingDetail is None:
            self.CarrierSpecialHandlingDetail = []
        else:
            self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if MasterItemAttribute is None:
            self.MasterItemAttribute = []
        else:
            self.MasterItemAttribute = MasterItemAttribute
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        self.Sublines = Sublines
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if ItemLoadInfo is None:
            self.ItemLoadInfo = []
        else:
            self.ItemLoadInfo = ItemLoadInfo
        if PackLevel is None:
            self.PackLevel = []
        else:
            self.PackLevel = PackLevel
        if OrderLevel is None:
            self.OrderLevel = []
        else:
            self.OrderLevel = OrderLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLevel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLevel.subclass:
            return ItemLevel.subclass(*args_, **kwargs_)
        else:
            return ItemLevel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentLine(self): return self.ShipmentLine
    def set_ShipmentLine(self, ShipmentLine): self.ShipmentLine = ShipmentLine
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def add_PhysicalDetails(self, value): self.PhysicalDetails.append(value)
    def insert_PhysicalDetails_at(self, index, value): self.PhysicalDetails.insert(index, value)
    def replace_PhysicalDetails_at(self, index, value): self.PhysicalDetails[index] = value
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def add_CarrierSpecialHandlingDetail(self, value): self.CarrierSpecialHandlingDetail.append(value)
    def insert_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail.insert(index, value)
    def replace_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def add_MasterItemAttribute(self, value): self.MasterItemAttribute.append(value)
    def insert_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute.insert(index, value)
    def replace_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Sublines(self): return self.Sublines
    def set_Sublines(self, Sublines): self.Sublines = Sublines
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_ItemLoadInfo(self): return self.ItemLoadInfo
    def set_ItemLoadInfo(self, ItemLoadInfo): self.ItemLoadInfo = ItemLoadInfo
    def add_ItemLoadInfo(self, value): self.ItemLoadInfo.append(value)
    def insert_ItemLoadInfo_at(self, index, value): self.ItemLoadInfo.insert(index, value)
    def replace_ItemLoadInfo_at(self, index, value): self.ItemLoadInfo[index] = value
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def add_PackLevel(self, value): self.PackLevel.append(value)
    def insert_PackLevel_at(self, index, value): self.PackLevel.insert(index, value)
    def replace_PackLevel_at(self, index, value): self.PackLevel[index] = value
    def get_OrderLevel(self): return self.OrderLevel
    def set_OrderLevel(self, OrderLevel): self.OrderLevel = OrderLevel
    def add_OrderLevel(self, value): self.OrderLevel.append(value)
    def insert_OrderLevel_at(self, index, value): self.OrderLevel.insert(index, value)
    def replace_OrderLevel_at(self, index, value): self.OrderLevel[index] = value
    def hasContent_(self):
        if (
            self.ShipmentLine is not None or
            self.PhysicalDetails or
            self.CarrierSpecialHandlingDetail or
            self.CarrierInformation or
            self.Measurements or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.MasterItemAttribute or
            self.Date or
            self.Reference or
            self.Notes or
            self.Commodity or
            self.Address or
            self.Sublines is not None or
            self.Tax or
            self.ChargesAllowances or
            self.ItemLoadInfo or
            self.PackLevel or
            self.OrderLevel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLevel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLevel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLevel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLevel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLevel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentLine is not None:
            self.ShipmentLine.export(outfile, level, namespace_, name_='ShipmentLine', pretty_print=pretty_print)
        for PhysicalDetails_ in self.PhysicalDetails:
            PhysicalDetails_.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        for CarrierSpecialHandlingDetail_ in self.CarrierSpecialHandlingDetail:
            CarrierSpecialHandlingDetail_.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for MasterItemAttribute_ in self.MasterItemAttribute:
            MasterItemAttribute_.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Sublines is not None:
            self.Sublines.export(outfile, level, namespace_, name_='Sublines', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for ItemLoadInfo_ in self.ItemLoadInfo:
            ItemLoadInfo_.export(outfile, level, namespace_, name_='ItemLoadInfo', pretty_print=pretty_print)
        for PackLevel_ in self.PackLevel:
            PackLevel_.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        for OrderLevel_ in self.OrderLevel:
            OrderLevel_.export(outfile, level, namespace_, name_='OrderLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentLine':
            obj_ = ShipmentLineType825.factory()
            obj_.build(child_)
            self.ShipmentLine = obj_
            obj_.original_tagname_ = 'ShipmentLine'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType834.factory()
            obj_.build(child_)
            self.PhysicalDetails.append(obj_)
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType843.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail.append(obj_)
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType847.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType863.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType867.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType874.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType878.factory()
            obj_.build(child_)
            self.MasterItemAttribute.append(obj_)
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'Date':
            obj_ = DateType887.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType889.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType893.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType895.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Address':
            obj_ = AddressType897.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Sublines':
            obj_ = SublinesType910.factory()
            obj_.build(child_)
            self.Sublines = obj_
            obj_.original_tagname_ = 'Sublines'
        elif nodeName_ == 'Tax':
            obj_ = TaxType932.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType939.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'ItemLoadInfo':
            obj_ = ItemLoadInfoType953.factory()
            obj_.build(child_)
            self.ItemLoadInfo.append(obj_)
            obj_.original_tagname_ = 'ItemLoadInfo'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel.append(obj_)
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'OrderLevel':
            obj_ = OrderLevel.factory()
            obj_.build(child_)
            self.OrderLevel.append(obj_)
            obj_.original_tagname_ = 'OrderLevel'
# end class ItemLevel


class attributes_string(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, not_equal=None, requires_others=None, score=None, qualified_rep=None, requires_one=None, valueOf_=None):
        self.original_tagname_ = None
        self.not_equal = _cast(None, not_equal)
        self.requires_others = _cast(None, requires_others)
        self.score = _cast(int, score)
        self.qualified_rep = _cast(None, qualified_rep)
        self.requires_one = _cast(None, requires_one)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attributes_string)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attributes_string.subclass:
            return attributes_string.subclass(*args_, **kwargs_)
        else:
            return attributes_string(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_not_equal(self): return self.not_equal
    def set_not_equal(self, not_equal): self.not_equal = not_equal
    def get_requires_others(self): return self.requires_others
    def set_requires_others(self, requires_others): self.requires_others = requires_others
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def get_qualified_rep(self): return self.qualified_rep
    def set_qualified_rep(self, qualified_rep): self.qualified_rep = qualified_rep
    def get_requires_one(self): return self.requires_one
    def set_requires_one(self, requires_one): self.requires_one = requires_one
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='attributes-string', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attributes-string')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='attributes-string', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attributes-string'):
        if self.not_equal is not None and 'not_equal' not in already_processed:
            already_processed.add('not_equal')
            outfile.write(' not-equal=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.not_equal), input_name='not-equal')), ))
        if self.requires_others is not None and 'requires_others' not in already_processed:
            already_processed.add('requires_others')
            outfile.write(' requires-others=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.requires_others), input_name='requires-others')), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score="%s"' % self.gds_format_integer(self.score, input_name='score'))
        if self.qualified_rep is not None and 'qualified_rep' not in already_processed:
            already_processed.add('qualified_rep')
            outfile.write(' qualified-rep=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.qualified_rep), input_name='qualified-rep')), ))
        if self.requires_one is not None and 'requires_one' not in already_processed:
            already_processed.add('requires_one')
            outfile.write(' requires-one=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.requires_one), input_name='requires-one')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='attributes-string', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('not-equal', node)
        if value is not None and 'not-equal' not in already_processed:
            already_processed.add('not-equal')
            self.not_equal = value
        value = find_attr_value_('requires-others', node)
        if value is not None and 'requires-others' not in already_processed:
            already_processed.add('requires-others')
            self.requires_others = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            try:
                self.score = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('qualified-rep', node)
        if value is not None and 'qualified-rep' not in already_processed:
            already_processed.add('qualified-rep')
            self.qualified_rep = value
        value = find_attr_value_('requires-one', node)
        if value is not None and 'requires-one' not in already_processed:
            already_processed.add('requires-one')
            self.requires_one = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attributes_string


class MetaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SenderUniqueID=None, SenderCompanyName=None, ReceiverUniqueID=None, ReceiverCompanyName=None, IsDropShip=None, InterchangeControlNumber=None, GroupControlIdentifier=None, GroupControlNumber=None, DocumentControlIdentifier=None, DocumentControlNumber=None, InterchangeSenderID=None, InterchangeReceiverID=None, GroupSenderID=None, GroupReceiverID=None, BatchPart=None, BatchTotal=None, BatchID=None, Comments=None, Validation=None, OrderManagement=None, Version=None):
        self.original_tagname_ = None
        self.SenderUniqueID = SenderUniqueID
        self.SenderCompanyName = SenderCompanyName
        self.ReceiverUniqueID = ReceiverUniqueID
        self.ReceiverCompanyName = ReceiverCompanyName
        self.IsDropShip = IsDropShip
        self.InterchangeControlNumber = InterchangeControlNumber
        self.GroupControlIdentifier = GroupControlIdentifier
        self.GroupControlNumber = GroupControlNumber
        self.DocumentControlIdentifier = DocumentControlIdentifier
        self.DocumentControlNumber = DocumentControlNumber
        self.InterchangeSenderID = InterchangeSenderID
        self.InterchangeReceiverID = InterchangeReceiverID
        self.GroupSenderID = GroupSenderID
        self.GroupReceiverID = GroupReceiverID
        self.BatchPart = BatchPart
        self.BatchTotal = BatchTotal
        self.BatchID = BatchID
        self.Comments = Comments
        self.Validation = Validation
        self.OrderManagement = OrderManagement
        self.validate_OrderManagementType(self.OrderManagement)
        self.Version = Version
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetaType.subclass:
            return MetaType.subclass(*args_, **kwargs_)
        else:
            return MetaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SenderUniqueID(self): return self.SenderUniqueID
    def set_SenderUniqueID(self, SenderUniqueID): self.SenderUniqueID = SenderUniqueID
    def get_SenderCompanyName(self): return self.SenderCompanyName
    def set_SenderCompanyName(self, SenderCompanyName): self.SenderCompanyName = SenderCompanyName
    def get_ReceiverUniqueID(self): return self.ReceiverUniqueID
    def set_ReceiverUniqueID(self, ReceiverUniqueID): self.ReceiverUniqueID = ReceiverUniqueID
    def get_ReceiverCompanyName(self): return self.ReceiverCompanyName
    def set_ReceiverCompanyName(self, ReceiverCompanyName): self.ReceiverCompanyName = ReceiverCompanyName
    def get_IsDropShip(self): return self.IsDropShip
    def set_IsDropShip(self, IsDropShip): self.IsDropShip = IsDropShip
    def get_InterchangeControlNumber(self): return self.InterchangeControlNumber
    def set_InterchangeControlNumber(self, InterchangeControlNumber): self.InterchangeControlNumber = InterchangeControlNumber
    def get_GroupControlIdentifier(self): return self.GroupControlIdentifier
    def set_GroupControlIdentifier(self, GroupControlIdentifier): self.GroupControlIdentifier = GroupControlIdentifier
    def get_GroupControlNumber(self): return self.GroupControlNumber
    def set_GroupControlNumber(self, GroupControlNumber): self.GroupControlNumber = GroupControlNumber
    def get_DocumentControlIdentifier(self): return self.DocumentControlIdentifier
    def set_DocumentControlIdentifier(self, DocumentControlIdentifier): self.DocumentControlIdentifier = DocumentControlIdentifier
    def get_DocumentControlNumber(self): return self.DocumentControlNumber
    def set_DocumentControlNumber(self, DocumentControlNumber): self.DocumentControlNumber = DocumentControlNumber
    def get_InterchangeSenderID(self): return self.InterchangeSenderID
    def set_InterchangeSenderID(self, InterchangeSenderID): self.InterchangeSenderID = InterchangeSenderID
    def get_InterchangeReceiverID(self): return self.InterchangeReceiverID
    def set_InterchangeReceiverID(self, InterchangeReceiverID): self.InterchangeReceiverID = InterchangeReceiverID
    def get_GroupSenderID(self): return self.GroupSenderID
    def set_GroupSenderID(self, GroupSenderID): self.GroupSenderID = GroupSenderID
    def get_GroupReceiverID(self): return self.GroupReceiverID
    def set_GroupReceiverID(self, GroupReceiverID): self.GroupReceiverID = GroupReceiverID
    def get_BatchPart(self): return self.BatchPart
    def set_BatchPart(self, BatchPart): self.BatchPart = BatchPart
    def get_BatchTotal(self): return self.BatchTotal
    def set_BatchTotal(self, BatchTotal): self.BatchTotal = BatchTotal
    def get_BatchID(self): return self.BatchID
    def set_BatchID(self, BatchID): self.BatchID = BatchID
    def get_Comments(self): return self.Comments
    def set_Comments(self, Comments): self.Comments = Comments
    def get_Validation(self): return self.Validation
    def set_Validation(self, Validation): self.Validation = Validation
    def get_OrderManagement(self): return self.OrderManagement
    def set_OrderManagement(self, OrderManagement): self.OrderManagement = OrderManagement
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def validate_OrderManagementType(self, value):
        # Validate type OrderManagementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Bulk-Import', 'CrossDock', 'DropShip', 'MultiStore', 'None', 'StockRelease', 'StockTransfer']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OrderManagementType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SenderUniqueID is not None or
            self.SenderCompanyName is not None or
            self.ReceiverUniqueID is not None or
            self.ReceiverCompanyName is not None or
            self.IsDropShip is not None or
            self.InterchangeControlNumber is not None or
            self.GroupControlIdentifier is not None or
            self.GroupControlNumber is not None or
            self.DocumentControlIdentifier is not None or
            self.DocumentControlNumber is not None or
            self.InterchangeSenderID is not None or
            self.InterchangeReceiverID is not None or
            self.GroupSenderID is not None or
            self.GroupReceiverID is not None or
            self.BatchPart is not None or
            self.BatchTotal is not None or
            self.BatchID is not None or
            self.Comments is not None or
            self.Validation is not None or
            self.OrderManagement is not None or
            self.Version is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetaType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetaType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MetaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SenderUniqueID is not None:
            self.SenderUniqueID.export(outfile, level, namespace_, name_='SenderUniqueID', pretty_print=pretty_print)
        if self.SenderCompanyName is not None:
            self.SenderCompanyName.export(outfile, level, namespace_, name_='SenderCompanyName', pretty_print=pretty_print)
        if self.ReceiverUniqueID is not None:
            self.ReceiverUniqueID.export(outfile, level, namespace_, name_='ReceiverUniqueID', pretty_print=pretty_print)
        if self.ReceiverCompanyName is not None:
            self.ReceiverCompanyName.export(outfile, level, namespace_, name_='ReceiverCompanyName', pretty_print=pretty_print)
        if self.IsDropShip is not None:
            self.IsDropShip.export(outfile, level, namespace_, name_='IsDropShip', pretty_print=pretty_print)
        if self.InterchangeControlNumber is not None:
            self.InterchangeControlNumber.export(outfile, level, namespace_, name_='InterchangeControlNumber', pretty_print=pretty_print)
        if self.GroupControlIdentifier is not None:
            self.GroupControlIdentifier.export(outfile, level, namespace_, name_='GroupControlIdentifier', pretty_print=pretty_print)
        if self.GroupControlNumber is not None:
            self.GroupControlNumber.export(outfile, level, namespace_, name_='GroupControlNumber', pretty_print=pretty_print)
        if self.DocumentControlIdentifier is not None:
            self.DocumentControlIdentifier.export(outfile, level, namespace_, name_='DocumentControlIdentifier', pretty_print=pretty_print)
        if self.DocumentControlNumber is not None:
            self.DocumentControlNumber.export(outfile, level, namespace_, name_='DocumentControlNumber', pretty_print=pretty_print)
        if self.InterchangeSenderID is not None:
            self.InterchangeSenderID.export(outfile, level, namespace_, name_='InterchangeSenderID', pretty_print=pretty_print)
        if self.InterchangeReceiverID is not None:
            self.InterchangeReceiverID.export(outfile, level, namespace_, name_='InterchangeReceiverID', pretty_print=pretty_print)
        if self.GroupSenderID is not None:
            self.GroupSenderID.export(outfile, level, namespace_, name_='GroupSenderID', pretty_print=pretty_print)
        if self.GroupReceiverID is not None:
            self.GroupReceiverID.export(outfile, level, namespace_, name_='GroupReceiverID', pretty_print=pretty_print)
        if self.BatchPart is not None:
            self.BatchPart.export(outfile, level, namespace_, name_='BatchPart', pretty_print=pretty_print)
        if self.BatchTotal is not None:
            self.BatchTotal.export(outfile, level, namespace_, name_='BatchTotal', pretty_print=pretty_print)
        if self.BatchID is not None:
            self.BatchID.export(outfile, level, namespace_, name_='BatchID', pretty_print=pretty_print)
        if self.Comments is not None:
            self.Comments.export(outfile, level, namespace_, name_='Comments', pretty_print=pretty_print)
        if self.Validation is not None:
            self.Validation.export(outfile, level, namespace_, name_='Validation', pretty_print=pretty_print)
        if self.OrderManagement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderManagement>%s</%sOrderManagement>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OrderManagement), input_name='OrderManagement')), namespace_, eol_))
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SenderUniqueID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SenderUniqueID = obj_
            obj_.original_tagname_ = 'SenderUniqueID'
        elif nodeName_ == 'SenderCompanyName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SenderCompanyName = obj_
            obj_.original_tagname_ = 'SenderCompanyName'
        elif nodeName_ == 'ReceiverUniqueID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReceiverUniqueID = obj_
            obj_.original_tagname_ = 'ReceiverUniqueID'
        elif nodeName_ == 'ReceiverCompanyName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReceiverCompanyName = obj_
            obj_.original_tagname_ = 'ReceiverCompanyName'
        elif nodeName_ == 'IsDropShip':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IsDropShip = obj_
            obj_.original_tagname_ = 'IsDropShip'
        elif nodeName_ == 'InterchangeControlNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InterchangeControlNumber = obj_
            obj_.original_tagname_ = 'InterchangeControlNumber'
        elif nodeName_ == 'GroupControlIdentifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupControlIdentifier = obj_
            obj_.original_tagname_ = 'GroupControlIdentifier'
        elif nodeName_ == 'GroupControlNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupControlNumber = obj_
            obj_.original_tagname_ = 'GroupControlNumber'
        elif nodeName_ == 'DocumentControlIdentifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentControlIdentifier = obj_
            obj_.original_tagname_ = 'DocumentControlIdentifier'
        elif nodeName_ == 'DocumentControlNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentControlNumber = obj_
            obj_.original_tagname_ = 'DocumentControlNumber'
        elif nodeName_ == 'InterchangeSenderID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InterchangeSenderID = obj_
            obj_.original_tagname_ = 'InterchangeSenderID'
        elif nodeName_ == 'InterchangeReceiverID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InterchangeReceiverID = obj_
            obj_.original_tagname_ = 'InterchangeReceiverID'
        elif nodeName_ == 'GroupSenderID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupSenderID = obj_
            obj_.original_tagname_ = 'GroupSenderID'
        elif nodeName_ == 'GroupReceiverID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupReceiverID = obj_
            obj_.original_tagname_ = 'GroupReceiverID'
        elif nodeName_ == 'BatchPart':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BatchPart = obj_
            obj_.original_tagname_ = 'BatchPart'
        elif nodeName_ == 'BatchTotal':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BatchTotal = obj_
            obj_.original_tagname_ = 'BatchTotal'
        elif nodeName_ == 'BatchID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BatchID = obj_
            obj_.original_tagname_ = 'BatchID'
        elif nodeName_ == 'Comments':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Comments = obj_
            obj_.original_tagname_ = 'Comments'
        elif nodeName_ == 'Validation':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Validation = obj_
            obj_.original_tagname_ = 'Validation'
        elif nodeName_ == 'OrderManagement':
            OrderManagement_ = child_.text
            OrderManagement_ = self.gds_validate_string(OrderManagement_, node, 'OrderManagement')
            self.OrderManagement = OrderManagement_
            # validate type OrderManagementType
            self.validate_OrderManagementType(self.OrderManagement)
        elif nodeName_ == 'Version':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
# end class MetaType


class HeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentHeader=None, Date=None, Reference=None, Notes=None, Contact=None, Address=None, CarrierInformation=None, QuantityAndWeight=None, CarrierSpecialHandlingDetail=None, Tax=None, ChargesAllowances=None, FOBRelatedInstruction=None):
        self.original_tagname_ = None
        self.ShipmentHeader = ShipmentHeader
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if QuantityAndWeight is None:
            self.QuantityAndWeight = []
        else:
            self.QuantityAndWeight = QuantityAndWeight
        if CarrierSpecialHandlingDetail is None:
            self.CarrierSpecialHandlingDetail = []
        else:
            self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if FOBRelatedInstruction is None:
            self.FOBRelatedInstruction = []
        else:
            self.FOBRelatedInstruction = FOBRelatedInstruction
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType.subclass:
            return HeaderType.subclass(*args_, **kwargs_)
        else:
            return HeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentHeader(self): return self.ShipmentHeader
    def set_ShipmentHeader(self, ShipmentHeader): self.ShipmentHeader = ShipmentHeader
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_QuantityAndWeight(self): return self.QuantityAndWeight
    def set_QuantityAndWeight(self, QuantityAndWeight): self.QuantityAndWeight = QuantityAndWeight
    def add_QuantityAndWeight(self, value): self.QuantityAndWeight.append(value)
    def insert_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight.insert(index, value)
    def replace_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight[index] = value
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def add_CarrierSpecialHandlingDetail(self, value): self.CarrierSpecialHandlingDetail.append(value)
    def insert_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail.insert(index, value)
    def replace_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail[index] = value
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_FOBRelatedInstruction(self): return self.FOBRelatedInstruction
    def set_FOBRelatedInstruction(self, FOBRelatedInstruction): self.FOBRelatedInstruction = FOBRelatedInstruction
    def add_FOBRelatedInstruction(self, value): self.FOBRelatedInstruction.append(value)
    def insert_FOBRelatedInstruction_at(self, index, value): self.FOBRelatedInstruction.insert(index, value)
    def replace_FOBRelatedInstruction_at(self, index, value): self.FOBRelatedInstruction[index] = value
    def hasContent_(self):
        if (
            self.ShipmentHeader is not None or
            self.Date or
            self.Reference or
            self.Notes or
            self.Contact or
            self.Address or
            self.CarrierInformation or
            self.QuantityAndWeight or
            self.CarrierSpecialHandlingDetail or
            self.Tax or
            self.ChargesAllowances or
            self.FOBRelatedInstruction
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='HeaderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='HeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentHeader is not None:
            self.ShipmentHeader.export(outfile, level, namespace_, name_='ShipmentHeader', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for QuantityAndWeight_ in self.QuantityAndWeight:
            QuantityAndWeight_.export(outfile, level, namespace_, name_='QuantityAndWeight', pretty_print=pretty_print)
        for CarrierSpecialHandlingDetail_ in self.CarrierSpecialHandlingDetail:
            CarrierSpecialHandlingDetail_.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for FOBRelatedInstruction_ in self.FOBRelatedInstruction:
            FOBRelatedInstruction_.export(outfile, level, namespace_, name_='FOBRelatedInstruction', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentHeader':
            obj_ = ShipmentHeaderType.factory()
            obj_.build(child_)
            self.ShipmentHeader = obj_
            obj_.original_tagname_ = 'ShipmentHeader'
        elif nodeName_ == 'Date':
            obj_ = DateType.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Contact':
            obj_ = ContactType.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'QuantityAndWeight':
            obj_ = QuantityAndWeightType.factory()
            obj_.build(child_)
            self.QuantityAndWeight.append(obj_)
            obj_.original_tagname_ = 'QuantityAndWeight'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail.append(obj_)
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'Tax':
            obj_ = TaxType.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'FOBRelatedInstruction':
            obj_ = FOBRelatedInstructionType.factory()
            obj_.build(child_)
            self.FOBRelatedInstruction.append(obj_)
            obj_.original_tagname_ = 'FOBRelatedInstruction'
# end class HeaderType


class ShipmentHeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TradingPartnerId=None, ShipmentIdentification=None, ShipDate=None, ShipmentTime=None, TsetPurposeCode=None, TsetTypeCode=None, ShipNoticeDate=None, ShipNoticeTime=None, ASNStructureCode=None, FairLaborCompliant=None, BuyersCurrency=None, SellersCurrency=None, ExchangeRate=None, StatusReasonCode=None, BillOfLadingNumber=None, CarrierProNumber=None, AppointmentNumber=None, PickupNumber=None, RequestedPickupDate=None, RequestedPickupTime=None, ScheduledShipDate=None, ScheduledShipTime=None, CurrentScheduledDeliveryDate=None, CurrentScheduledDeliveryTime=None, CurrentScheduledShipDate=None, CurrentScheduledShipTime=None, DocumentVersion=None, DocumentRevision=None):
        self.original_tagname_ = None
        self.TradingPartnerId = TradingPartnerId
        self.validate_TradingPartnerIdType(self.TradingPartnerId)
        self.ShipmentIdentification = ShipmentIdentification
        self.ShipDate = ShipDate
        self.ShipmentTime = ShipmentTime
        self.TsetPurposeCode = TsetPurposeCode
        self.validate_TsetPurposeCodeType(self.TsetPurposeCode)
        self.TsetTypeCode = TsetTypeCode
        self.ShipNoticeDate = ShipNoticeDate
        self.ShipNoticeTime = ShipNoticeTime
        self.ASNStructureCode = ASNStructureCode
        self.validate_ASNStructureCodeType(self.ASNStructureCode)
        self.FairLaborCompliant = FairLaborCompliant
        self.validate_FairLaborCompliantType(self.FairLaborCompliant)
        self.BuyersCurrency = BuyersCurrency
        self.SellersCurrency = SellersCurrency
        self.ExchangeRate = ExchangeRate
        self.StatusReasonCode = StatusReasonCode
        self.BillOfLadingNumber = BillOfLadingNumber
        self.CarrierProNumber = CarrierProNumber
        self.AppointmentNumber = AppointmentNumber
        self.PickupNumber = PickupNumber
        self.RequestedPickupDate = RequestedPickupDate
        self.RequestedPickupTime = RequestedPickupTime
        self.ScheduledShipDate = ScheduledShipDate
        self.ScheduledShipTime = ScheduledShipTime
        self.CurrentScheduledDeliveryDate = CurrentScheduledDeliveryDate
        self.CurrentScheduledDeliveryTime = CurrentScheduledDeliveryTime
        self.CurrentScheduledShipDate = CurrentScheduledShipDate
        self.CurrentScheduledShipTime = CurrentScheduledShipTime
        self.DocumentVersion = DocumentVersion
        self.DocumentRevision = DocumentRevision
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentHeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentHeaderType.subclass:
            return ShipmentHeaderType.subclass(*args_, **kwargs_)
        else:
            return ShipmentHeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TradingPartnerId(self): return self.TradingPartnerId
    def set_TradingPartnerId(self, TradingPartnerId): self.TradingPartnerId = TradingPartnerId
    def get_ShipmentIdentification(self): return self.ShipmentIdentification
    def set_ShipmentIdentification(self, ShipmentIdentification): self.ShipmentIdentification = ShipmentIdentification
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_ShipmentTime(self): return self.ShipmentTime
    def set_ShipmentTime(self, ShipmentTime): self.ShipmentTime = ShipmentTime
    def get_TsetPurposeCode(self): return self.TsetPurposeCode
    def set_TsetPurposeCode(self, TsetPurposeCode): self.TsetPurposeCode = TsetPurposeCode
    def get_TsetTypeCode(self): return self.TsetTypeCode
    def set_TsetTypeCode(self, TsetTypeCode): self.TsetTypeCode = TsetTypeCode
    def get_ShipNoticeDate(self): return self.ShipNoticeDate
    def set_ShipNoticeDate(self, ShipNoticeDate): self.ShipNoticeDate = ShipNoticeDate
    def get_ShipNoticeTime(self): return self.ShipNoticeTime
    def set_ShipNoticeTime(self, ShipNoticeTime): self.ShipNoticeTime = ShipNoticeTime
    def get_ASNStructureCode(self): return self.ASNStructureCode
    def set_ASNStructureCode(self, ASNStructureCode): self.ASNStructureCode = ASNStructureCode
    def get_FairLaborCompliant(self): return self.FairLaborCompliant
    def set_FairLaborCompliant(self, FairLaborCompliant): self.FairLaborCompliant = FairLaborCompliant
    def get_BuyersCurrency(self): return self.BuyersCurrency
    def set_BuyersCurrency(self, BuyersCurrency): self.BuyersCurrency = BuyersCurrency
    def get_SellersCurrency(self): return self.SellersCurrency
    def set_SellersCurrency(self, SellersCurrency): self.SellersCurrency = SellersCurrency
    def get_ExchangeRate(self): return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate): self.ExchangeRate = ExchangeRate
    def get_StatusReasonCode(self): return self.StatusReasonCode
    def set_StatusReasonCode(self, StatusReasonCode): self.StatusReasonCode = StatusReasonCode
    def get_BillOfLadingNumber(self): return self.BillOfLadingNumber
    def set_BillOfLadingNumber(self, BillOfLadingNumber): self.BillOfLadingNumber = BillOfLadingNumber
    def get_CarrierProNumber(self): return self.CarrierProNumber
    def set_CarrierProNumber(self, CarrierProNumber): self.CarrierProNumber = CarrierProNumber
    def get_AppointmentNumber(self): return self.AppointmentNumber
    def set_AppointmentNumber(self, AppointmentNumber): self.AppointmentNumber = AppointmentNumber
    def get_PickupNumber(self): return self.PickupNumber
    def set_PickupNumber(self, PickupNumber): self.PickupNumber = PickupNumber
    def get_RequestedPickupDate(self): return self.RequestedPickupDate
    def set_RequestedPickupDate(self, RequestedPickupDate): self.RequestedPickupDate = RequestedPickupDate
    def get_RequestedPickupTime(self): return self.RequestedPickupTime
    def set_RequestedPickupTime(self, RequestedPickupTime): self.RequestedPickupTime = RequestedPickupTime
    def get_ScheduledShipDate(self): return self.ScheduledShipDate
    def set_ScheduledShipDate(self, ScheduledShipDate): self.ScheduledShipDate = ScheduledShipDate
    def get_ScheduledShipTime(self): return self.ScheduledShipTime
    def set_ScheduledShipTime(self, ScheduledShipTime): self.ScheduledShipTime = ScheduledShipTime
    def get_CurrentScheduledDeliveryDate(self): return self.CurrentScheduledDeliveryDate
    def set_CurrentScheduledDeliveryDate(self, CurrentScheduledDeliveryDate): self.CurrentScheduledDeliveryDate = CurrentScheduledDeliveryDate
    def get_CurrentScheduledDeliveryTime(self): return self.CurrentScheduledDeliveryTime
    def set_CurrentScheduledDeliveryTime(self, CurrentScheduledDeliveryTime): self.CurrentScheduledDeliveryTime = CurrentScheduledDeliveryTime
    def get_CurrentScheduledShipDate(self): return self.CurrentScheduledShipDate
    def set_CurrentScheduledShipDate(self, CurrentScheduledShipDate): self.CurrentScheduledShipDate = CurrentScheduledShipDate
    def get_CurrentScheduledShipTime(self): return self.CurrentScheduledShipTime
    def set_CurrentScheduledShipTime(self, CurrentScheduledShipTime): self.CurrentScheduledShipTime = CurrentScheduledShipTime
    def get_DocumentVersion(self): return self.DocumentVersion
    def set_DocumentVersion(self, DocumentVersion): self.DocumentVersion = DocumentVersion
    def get_DocumentRevision(self): return self.DocumentRevision
    def set_DocumentRevision(self, DocumentRevision): self.DocumentRevision = DocumentRevision
    def validate_TradingPartnerIdType(self, value):
        # Validate type TradingPartnerIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on TradingPartnerIdType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on TradingPartnerIdType' % {"value" : value.encode("utf-8")} )
    def validate_TsetPurposeCodeType(self, value):
        # Validate type TsetPurposeCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['00', '01', '05', '06', '07', '26']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TsetPurposeCodeType' % {"value" : value.encode("utf-8")} )
    def validate_ASNStructureCodeType(self, value):
        # Validate type ASNStructureCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0001']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ASNStructureCodeType' % {"value" : value.encode("utf-8")} )
    def validate_FairLaborCompliantType(self, value):
        # Validate type FairLaborCompliantType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FairLaborCompliantType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TradingPartnerId is not None or
            self.ShipmentIdentification is not None or
            self.ShipDate is not None or
            self.ShipmentTime is not None or
            self.TsetPurposeCode is not None or
            self.TsetTypeCode is not None or
            self.ShipNoticeDate is not None or
            self.ShipNoticeTime is not None or
            self.ASNStructureCode is not None or
            self.FairLaborCompliant is not None or
            self.BuyersCurrency is not None or
            self.SellersCurrency is not None or
            self.ExchangeRate is not None or
            self.StatusReasonCode is not None or
            self.BillOfLadingNumber is not None or
            self.CarrierProNumber is not None or
            self.AppointmentNumber is not None or
            self.PickupNumber is not None or
            self.RequestedPickupDate is not None or
            self.RequestedPickupTime is not None or
            self.ScheduledShipDate is not None or
            self.ScheduledShipTime is not None or
            self.CurrentScheduledDeliveryDate is not None or
            self.CurrentScheduledDeliveryTime is not None or
            self.CurrentScheduledShipDate is not None or
            self.CurrentScheduledShipTime is not None or
            self.DocumentVersion is not None or
            self.DocumentRevision is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentHeaderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentHeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentHeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentHeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentHeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TradingPartnerId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradingPartnerId>%s</%sTradingPartnerId>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TradingPartnerId), input_name='TradingPartnerId')), namespace_, eol_))
        if self.ShipmentIdentification is not None:
            self.ShipmentIdentification.export(outfile, level, namespace_, name_='ShipmentIdentification', pretty_print=pretty_print)
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.ShipmentTime is not None:
            self.ShipmentTime.export(outfile, level, namespace_, name_='ShipmentTime', pretty_print=pretty_print)
        if self.TsetPurposeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTsetPurposeCode>%s</%sTsetPurposeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TsetPurposeCode), input_name='TsetPurposeCode')), namespace_, eol_))
        if self.TsetTypeCode is not None:
            self.TsetTypeCode.export(outfile, level, namespace_, name_='TsetTypeCode', pretty_print=pretty_print)
        if self.ShipNoticeDate is not None:
            self.ShipNoticeDate.export(outfile, level, namespace_, name_='ShipNoticeDate', pretty_print=pretty_print)
        if self.ShipNoticeTime is not None:
            self.ShipNoticeTime.export(outfile, level, namespace_, name_='ShipNoticeTime', pretty_print=pretty_print)
        if self.ASNStructureCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sASNStructureCode>%s</%sASNStructureCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ASNStructureCode), input_name='ASNStructureCode')), namespace_, eol_))
        if self.FairLaborCompliant is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFairLaborCompliant>%s</%sFairLaborCompliant>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FairLaborCompliant), input_name='FairLaborCompliant')), namespace_, eol_))
        if self.BuyersCurrency is not None:
            self.BuyersCurrency.export(outfile, level, namespace_, name_='BuyersCurrency', pretty_print=pretty_print)
        if self.SellersCurrency is not None:
            self.SellersCurrency.export(outfile, level, namespace_, name_='SellersCurrency', pretty_print=pretty_print)
        if self.ExchangeRate is not None:
            self.ExchangeRate.export(outfile, level, namespace_, name_='ExchangeRate', pretty_print=pretty_print)
        if self.StatusReasonCode is not None:
            self.StatusReasonCode.export(outfile, level, namespace_, name_='StatusReasonCode', pretty_print=pretty_print)
        if self.BillOfLadingNumber is not None:
            self.BillOfLadingNumber.export(outfile, level, namespace_, name_='BillOfLadingNumber', pretty_print=pretty_print)
        if self.CarrierProNumber is not None:
            self.CarrierProNumber.export(outfile, level, namespace_, name_='CarrierProNumber', pretty_print=pretty_print)
        if self.AppointmentNumber is not None:
            self.AppointmentNumber.export(outfile, level, namespace_, name_='AppointmentNumber', pretty_print=pretty_print)
        if self.PickupNumber is not None:
            self.PickupNumber.export(outfile, level, namespace_, name_='PickupNumber', pretty_print=pretty_print)
        if self.RequestedPickupDate is not None:
            self.RequestedPickupDate.export(outfile, level, namespace_, name_='RequestedPickupDate', pretty_print=pretty_print)
        if self.RequestedPickupTime is not None:
            self.RequestedPickupTime.export(outfile, level, namespace_, name_='RequestedPickupTime', pretty_print=pretty_print)
        if self.ScheduledShipDate is not None:
            self.ScheduledShipDate.export(outfile, level, namespace_, name_='ScheduledShipDate', pretty_print=pretty_print)
        if self.ScheduledShipTime is not None:
            self.ScheduledShipTime.export(outfile, level, namespace_, name_='ScheduledShipTime', pretty_print=pretty_print)
        if self.CurrentScheduledDeliveryDate is not None:
            self.CurrentScheduledDeliveryDate.export(outfile, level, namespace_, name_='CurrentScheduledDeliveryDate', pretty_print=pretty_print)
        if self.CurrentScheduledDeliveryTime is not None:
            self.CurrentScheduledDeliveryTime.export(outfile, level, namespace_, name_='CurrentScheduledDeliveryTime', pretty_print=pretty_print)
        if self.CurrentScheduledShipDate is not None:
            self.CurrentScheduledShipDate.export(outfile, level, namespace_, name_='CurrentScheduledShipDate', pretty_print=pretty_print)
        if self.CurrentScheduledShipTime is not None:
            self.CurrentScheduledShipTime.export(outfile, level, namespace_, name_='CurrentScheduledShipTime', pretty_print=pretty_print)
        if self.DocumentVersion is not None:
            self.DocumentVersion.export(outfile, level, namespace_, name_='DocumentVersion', pretty_print=pretty_print)
        if self.DocumentRevision is not None:
            self.DocumentRevision.export(outfile, level, namespace_, name_='DocumentRevision', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TradingPartnerId':
            TradingPartnerId_ = child_.text
            TradingPartnerId_ = self.gds_validate_string(TradingPartnerId_, node, 'TradingPartnerId')
            self.TradingPartnerId = TradingPartnerId_
            # validate type TradingPartnerIdType
            self.validate_TradingPartnerIdType(self.TradingPartnerId)
        elif nodeName_ == 'ShipmentIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipmentIdentification = obj_
            obj_.original_tagname_ = 'ShipmentIdentification'
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'ShipmentTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipmentTime = obj_
            obj_.original_tagname_ = 'ShipmentTime'
        elif nodeName_ == 'TsetPurposeCode':
            TsetPurposeCode_ = child_.text
            TsetPurposeCode_ = self.gds_validate_string(TsetPurposeCode_, node, 'TsetPurposeCode')
            self.TsetPurposeCode = TsetPurposeCode_
            # validate type TsetPurposeCodeType
            self.validate_TsetPurposeCodeType(self.TsetPurposeCode)
        elif nodeName_ == 'TsetTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TsetTypeCode = obj_
            obj_.original_tagname_ = 'TsetTypeCode'
        elif nodeName_ == 'ShipNoticeDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipNoticeDate = obj_
            obj_.original_tagname_ = 'ShipNoticeDate'
        elif nodeName_ == 'ShipNoticeTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipNoticeTime = obj_
            obj_.original_tagname_ = 'ShipNoticeTime'
        elif nodeName_ == 'ASNStructureCode':
            ASNStructureCode_ = child_.text
            ASNStructureCode_ = self.gds_validate_string(ASNStructureCode_, node, 'ASNStructureCode')
            self.ASNStructureCode = ASNStructureCode_
            # validate type ASNStructureCodeType
            self.validate_ASNStructureCodeType(self.ASNStructureCode)
        elif nodeName_ == 'FairLaborCompliant':
            FairLaborCompliant_ = child_.text
            FairLaborCompliant_ = self.gds_validate_string(FairLaborCompliant_, node, 'FairLaborCompliant')
            self.FairLaborCompliant = FairLaborCompliant_
            # validate type FairLaborCompliantType
            self.validate_FairLaborCompliantType(self.FairLaborCompliant)
        elif nodeName_ == 'BuyersCurrency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyersCurrency = obj_
            obj_.original_tagname_ = 'BuyersCurrency'
        elif nodeName_ == 'SellersCurrency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellersCurrency = obj_
            obj_.original_tagname_ = 'SellersCurrency'
        elif nodeName_ == 'ExchangeRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExchangeRate = obj_
            obj_.original_tagname_ = 'ExchangeRate'
        elif nodeName_ == 'StatusReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusReasonCode = obj_
            obj_.original_tagname_ = 'StatusReasonCode'
        elif nodeName_ == 'BillOfLadingNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BillOfLadingNumber = obj_
            obj_.original_tagname_ = 'BillOfLadingNumber'
        elif nodeName_ == 'CarrierProNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierProNumber = obj_
            obj_.original_tagname_ = 'CarrierProNumber'
        elif nodeName_ == 'AppointmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AppointmentNumber = obj_
            obj_.original_tagname_ = 'AppointmentNumber'
        elif nodeName_ == 'PickupNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PickupNumber = obj_
            obj_.original_tagname_ = 'PickupNumber'
        elif nodeName_ == 'RequestedPickupDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RequestedPickupDate = obj_
            obj_.original_tagname_ = 'RequestedPickupDate'
        elif nodeName_ == 'RequestedPickupTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RequestedPickupTime = obj_
            obj_.original_tagname_ = 'RequestedPickupTime'
        elif nodeName_ == 'ScheduledShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ScheduledShipDate = obj_
            obj_.original_tagname_ = 'ScheduledShipDate'
        elif nodeName_ == 'ScheduledShipTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ScheduledShipTime = obj_
            obj_.original_tagname_ = 'ScheduledShipTime'
        elif nodeName_ == 'CurrentScheduledDeliveryDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CurrentScheduledDeliveryDate = obj_
            obj_.original_tagname_ = 'CurrentScheduledDeliveryDate'
        elif nodeName_ == 'CurrentScheduledDeliveryTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CurrentScheduledDeliveryTime = obj_
            obj_.original_tagname_ = 'CurrentScheduledDeliveryTime'
        elif nodeName_ == 'CurrentScheduledShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CurrentScheduledShipDate = obj_
            obj_.original_tagname_ = 'CurrentScheduledShipDate'
        elif nodeName_ == 'CurrentScheduledShipTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CurrentScheduledShipTime = obj_
            obj_.original_tagname_ = 'CurrentScheduledShipTime'
        elif nodeName_ == 'DocumentVersion':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentVersion = obj_
            obj_.original_tagname_ = 'DocumentVersion'
        elif nodeName_ == 'DocumentRevision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentRevision = obj_
            obj_.original_tagname_ = 'DocumentRevision'
# end class ShipmentHeaderType


class DateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType.subclass:
            return DateType.subclass(*args_, **kwargs_)
        else:
            return DateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type(self, value):
        # Validate type DateTimeQualifier1Type, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type
            self.validate_DateTimeQualifier1Type(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType(self, value):
        # Validate type ReferenceQualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType
            self.validate_ReferenceQualType(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType


class ReferenceIDsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType1(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType.subclass:
            return ReferenceIDsType.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType1(self, value):
        # Validate type ReferenceQualType1, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType1' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType1
            self.validate_ReferenceQualType1(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType


class NotesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType.subclass:
            return NotesType.subclass(*args_, **kwargs_)
        else:
            return NotesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType(self, value):
        # Validate type NoteCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType
            self.validate_NoteCodeType(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType


class ContactType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType.subclass:
            return ContactType.subclass(*args_, **kwargs_)
        else:
            return ContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType(self, value):
        # Validate type ContactTypeCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType
            self.validate_ContactTypeCodeType(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType


class AdditionalContactDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType.subclass:
            return AdditionalContactDetailsType.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType(self, value):
        # Validate type ContactQualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType
            self.validate_ContactQualType(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType(self, value):
        # Validate type AddressTypeCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType(self, value):
        # Validate type LocationCodeQualifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType
            self.validate_AddressTypeCodeType(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType
            self.validate_LocationCodeQualifierType(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType2.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType6.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType10.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType


class ReferenceType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType3(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType2.subclass:
            return ReferenceType2.subclass(*args_, **kwargs_)
        else:
            return ReferenceType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType3(self, value):
        # Validate type ReferenceQualType3, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType3' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType3
            self.validate_ReferenceQualType3(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType4.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType2


class ReferenceIDsType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType5(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType4.subclass:
            return ReferenceIDsType4.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType5(self, value):
        # Validate type ReferenceQualType5, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType5' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType5
            self.validate_ReferenceQualType5(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType4


class ContactType6(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType7(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType6.subclass:
            return ContactType6.subclass(*args_, **kwargs_)
        else:
            return ContactType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType7(self, value):
        # Validate type ContactTypeCodeType7, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType7' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType6', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType6'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType7
            self.validate_ContactTypeCodeType7(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType8.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType6


class AdditionalContactDetailsType8(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType9(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType8)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType8.subclass:
            return AdditionalContactDetailsType8.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType9(self, value):
        # Validate type ContactQualType9, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType9' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType8', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType8', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType8'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType9
            self.validate_ContactQualType9(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType8


class DateType10(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type11(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType10)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType10.subclass:
            return DateType10.subclass(*args_, **kwargs_)
        else:
            return DateType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type11(self, value):
        # Validate type DateTimeQualifier1Type11, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type11' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType10', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType10', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType10'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type11
            self.validate_DateTimeQualifier1Type11(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType10


class CarrierInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType.subclass:
            return CarrierInformationType.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType(self, value):
        # Validate type StatusCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType(self, value):
        # Validate type CarrierTransMethodCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType(self, value):
        # Validate type EquipmentDescriptionCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType(self, value):
        # Validate type SealStatusCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType(self, value):
        # Validate type OwnershipCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType(self, value):
        # Validate type RoutingSequenceCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType(self, value):
        # Validate type TransitDirectionCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType(self, value):
        # Validate type TransitTimeQualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType
            self.validate_StatusCodeType(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType
            self.validate_CarrierTransMethodCodeType(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType
            self.validate_EquipmentDescriptionCodeType(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType
            self.validate_SealStatusCodeType(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType
            self.validate_OwnershipCodeType(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType
            self.validate_RoutingSequenceCodeType(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType
            self.validate_TransitDirectionCodeType(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType
            self.validate_TransitTimeQualType(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType12.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType


class ServiceLevelCodesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType.subclass:
            return ServiceLevelCodesType.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType(self, value):
        # Validate type ServiceLevelCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType
            self.validate_ServiceLevelCodeType(self.ServiceLevelCode)
# end class ServiceLevelCodesType


class AddressType12(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType13(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType14(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType12)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType12.subclass:
            return AddressType12.subclass(*args_, **kwargs_)
        else:
            return AddressType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType13(self, value):
        # Validate type AddressTypeCodeType13, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType13' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType14(self, value):
        # Validate type LocationCodeQualifierType14, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType14' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType12', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType12', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType12'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType13
            self.validate_AddressTypeCodeType13(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType14
            self.validate_LocationCodeQualifierType14(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType15.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType12


class DateType15(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type16(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType15)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType15.subclass:
            return DateType15.subclass(*args_, **kwargs_)
        else:
            return DateType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type16(self, value):
        # Validate type DateTimeQualifier1Type16, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type16' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType15', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType15')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType15', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType15'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type16
            self.validate_DateTimeQualifier1Type16(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType15


class QuantityAndWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackingMedium=None, PackingMaterial=None, LadingQuantity=None, LadingDescription=None, WeightQualifier=None, Weight=None, WeightUOM=None, Volume=None, VolumeUOM=None, PalletExchangeCode=None):
        self.original_tagname_ = None
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType(self.PackingMaterial)
        self.LadingQuantity = LadingQuantity
        self.LadingDescription = LadingDescription
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType(self.WeightQualifier)
        self.Weight = Weight
        self.WeightUOM = WeightUOM
        self.validate_WeightUOMType(self.WeightUOM)
        self.Volume = Volume
        self.VolumeUOM = VolumeUOM
        self.validate_VolumeUOMType(self.VolumeUOM)
        self.PalletExchangeCode = PalletExchangeCode
        self.validate_PalletExchangeCodeType(self.PalletExchangeCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityAndWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityAndWeightType.subclass:
            return QuantityAndWeightType.subclass(*args_, **kwargs_)
        else:
            return QuantityAndWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LadingQuantity(self): return self.LadingQuantity
    def set_LadingQuantity(self, LadingQuantity): self.LadingQuantity = LadingQuantity
    def get_LadingDescription(self): return self.LadingDescription
    def set_LadingDescription(self, LadingDescription): self.LadingDescription = LadingDescription
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_WeightUOM(self): return self.WeightUOM
    def set_WeightUOM(self, WeightUOM): self.WeightUOM = WeightUOM
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_VolumeUOM(self): return self.VolumeUOM
    def set_VolumeUOM(self, VolumeUOM): self.VolumeUOM = VolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def validate_PackingMediumType(self, value):
        # Validate type PackingMediumType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType(self, value):
        # Validate type PackingMaterialType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType(self, value):
        # Validate type WeightQualifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType' % {"value" : value.encode("utf-8")} )
    def validate_WeightUOMType(self, value):
        # Validate type WeightUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightUOMType' % {"value" : value.encode("utf-8")} )
    def validate_VolumeUOMType(self, value):
        # Validate type VolumeUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on VolumeUOMType' % {"value" : value.encode("utf-8")} )
    def validate_PalletExchangeCodeType(self, value):
        # Validate type PalletExchangeCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletExchangeCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LadingQuantity is not None or
            self.LadingDescription is not None or
            self.WeightQualifier is not None or
            self.Weight is not None or
            self.WeightUOM is not None or
            self.Volume is not None or
            self.VolumeUOM is not None or
            self.PalletExchangeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityAndWeightType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityAndWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityAndWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityAndWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityAndWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.LadingQuantity is not None:
            self.LadingQuantity.export(outfile, level, namespace_, name_='LadingQuantity', pretty_print=pretty_print)
        if self.LadingDescription is not None:
            self.LadingDescription.export(outfile, level, namespace_, name_='LadingDescription', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.WeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightUOM>%s</%sWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightUOM), input_name='WeightUOM')), namespace_, eol_))
        if self.Volume is not None:
            self.Volume.export(outfile, level, namespace_, name_='Volume', pretty_print=pretty_print)
        if self.VolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeUOM>%s</%sVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VolumeUOM), input_name='VolumeUOM')), namespace_, eol_))
        if self.PalletExchangeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletExchangeCode>%s</%sPalletExchangeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletExchangeCode), input_name='PalletExchangeCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType
            self.validate_PackingMediumType(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType
            self.validate_PackingMaterialType(self.PackingMaterial)
        elif nodeName_ == 'LadingQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingQuantity = obj_
            obj_.original_tagname_ = 'LadingQuantity'
        elif nodeName_ == 'LadingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingDescription = obj_
            obj_.original_tagname_ = 'LadingDescription'
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType
            self.validate_WeightQualifierType(self.WeightQualifier)
        elif nodeName_ == 'Weight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'WeightUOM':
            WeightUOM_ = child_.text
            WeightUOM_ = self.gds_validate_string(WeightUOM_, node, 'WeightUOM')
            self.WeightUOM = WeightUOM_
            # validate type WeightUOMType
            self.validate_WeightUOMType(self.WeightUOM)
        elif nodeName_ == 'Volume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
        elif nodeName_ == 'VolumeUOM':
            VolumeUOM_ = child_.text
            VolumeUOM_ = self.gds_validate_string(VolumeUOM_, node, 'VolumeUOM')
            self.VolumeUOM = VolumeUOM_
            # validate type VolumeUOMType
            self.validate_VolumeUOMType(self.VolumeUOM)
        elif nodeName_ == 'PalletExchangeCode':
            PalletExchangeCode_ = child_.text
            PalletExchangeCode_ = self.gds_validate_string(PalletExchangeCode_, node, 'PalletExchangeCode')
            self.PalletExchangeCode = PalletExchangeCode_
            # validate type PalletExchangeCodeType
            self.validate_PalletExchangeCodeType(self.PalletExchangeCode)
# end class QuantityAndWeightType


class CarrierSpecialHandlingDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.validate_SpecialHandlingCodeType(self.SpecialHandlingCode)
        self.HazardousMaterialCode = HazardousMaterialCode
        self.validate_HazardousMaterialCodeType(self.HazardousMaterialCode)
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType(self.YesOrNoResponse)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType.subclass:
            return CarrierSpecialHandlingDetailType.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def validate_SpecialHandlingCodeType(self, value):
        # Validate type SpecialHandlingCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AH', 'BKA', 'CO', 'DA', 'DNF', 'EL', 'EX', 'FL', 'FP', 'FR', 'HM', 'IC', 'KMD', 'MRF', 'NPR', 'NW', 'OPR', 'OSB', 'OTC', 'PFH', 'PG', 'PHR', 'RM', 'SUIP', 'UN', 'UNDF', 'VOC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SpecialHandlingCodeType' % {"value" : value.encode("utf-8")} )
    def validate_HazardousMaterialCodeType(self, value):
        # Validate type HazardousMaterialCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['D', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on HazardousMaterialCodeType' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType(self, value):
        # Validate type YesOrNoResponseType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialHandlingCode>%s</%sSpecialHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SpecialHandlingCode), input_name='SpecialHandlingCode')), namespace_, eol_))
        if self.HazardousMaterialCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialCode>%s</%sHazardousMaterialCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialCode), input_name='HazardousMaterialCode')), namespace_, eol_))
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            SpecialHandlingCode_ = child_.text
            SpecialHandlingCode_ = self.gds_validate_string(SpecialHandlingCode_, node, 'SpecialHandlingCode')
            self.SpecialHandlingCode = SpecialHandlingCode_
            # validate type SpecialHandlingCodeType
            self.validate_SpecialHandlingCodeType(self.SpecialHandlingCode)
        elif nodeName_ == 'HazardousMaterialCode':
            HazardousMaterialCode_ = child_.text
            HazardousMaterialCode_ = self.gds_validate_string(HazardousMaterialCode_, node, 'HazardousMaterialCode')
            self.HazardousMaterialCode = HazardousMaterialCode_
            # validate type HazardousMaterialCodeType
            self.validate_HazardousMaterialCodeType(self.HazardousMaterialCode)
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType
            self.validate_YesOrNoResponseType(self.YesOrNoResponse)
# end class CarrierSpecialHandlingDetailType


class TaxType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType.subclass:
            return TaxType.subclass(*args_, **kwargs_)
        else:
            return TaxType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType(self, value):
        # Validate type TaxTypeCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType(self, value):
        # Validate type TaxPercentQualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType(self, value):
        # Validate type JurisdictionQualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType(self, value):
        # Validate type TaxExemptCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType(self, value):
        # Validate type RelationshipCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType(self, value):
        # Validate type TaxHandlingCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType
            self.validate_TaxTypeCodeType(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType
            self.validate_TaxPercentQualType(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType
            self.validate_JurisdictionQualType(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType
            self.validate_TaxExemptCodeType(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType
            self.validate_RelationshipCodeType(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType
            self.validate_TaxHandlingCodeType(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType


class ChargesAllowancesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType.subclass:
            return ChargesAllowancesType.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType(self, value):
        # Validate type AllowChrgIndicatorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType(self, value):
        # Validate type AllowChrgCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType(self, value):
        # Validate type AllowChrgAgencyCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType(self, value):
        # Validate type AllowChrgPercentQualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType(self, value):
        # Validate type AllowChrgQtyUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType(self, value):
        # Validate type AllowChrgHandlingCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType
            self.validate_AllowChrgIndicatorType(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType
            self.validate_AllowChrgCodeType(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType
            self.validate_AllowChrgAgencyCodeType(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType
            self.validate_AllowChrgPercentQualType(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType
            self.validate_AllowChrgQtyUOMType(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType
            self.validate_AllowChrgHandlingCodeType(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType17.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType


class TaxType17(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType18(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType19(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType20(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType21(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType22(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType23(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType17)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType17.subclass:
            return TaxType17.subclass(*args_, **kwargs_)
        else:
            return TaxType17(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType18(self, value):
        # Validate type TaxTypeCodeType18, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType18' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType19(self, value):
        # Validate type TaxPercentQualType19, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType19' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType20(self, value):
        # Validate type JurisdictionQualType20, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType20' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType21(self, value):
        # Validate type TaxExemptCodeType21, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType21' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType22(self, value):
        # Validate type RelationshipCodeType22, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType22' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType23(self, value):
        # Validate type TaxHandlingCodeType23, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType23' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType17', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType17')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType17', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType17'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType17', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType18
            self.validate_TaxTypeCodeType18(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType19
            self.validate_TaxPercentQualType19(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType20
            self.validate_JurisdictionQualType20(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType21
            self.validate_TaxExemptCodeType21(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType22
            self.validate_RelationshipCodeType22(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType23
            self.validate_TaxHandlingCodeType23(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType17


class FOBRelatedInstructionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FOBPayCode=None, FOBLocationQualifier=None, FOBLocationDescription=None, FOBTitlePassageCode=None, FOBTitlePassageLocation=None, TransportationTermsQualifierCode=None, TransportationTermsCode=None, RiskOfLossCode=None, Description=None):
        self.original_tagname_ = None
        self.FOBPayCode = FOBPayCode
        self.validate_FOBPayCodeType(self.FOBPayCode)
        self.FOBLocationQualifier = FOBLocationQualifier
        self.validate_FOBLocationQualifierType(self.FOBLocationQualifier)
        self.FOBLocationDescription = FOBLocationDescription
        self.FOBTitlePassageCode = FOBTitlePassageCode
        self.validate_FOBTitlePassageCodeType(self.FOBTitlePassageCode)
        self.FOBTitlePassageLocation = FOBTitlePassageLocation
        self.TransportationTermsQualifierCode = TransportationTermsQualifierCode
        self.validate_TransportationTermsQualifierCodeType(self.TransportationTermsQualifierCode)
        self.TransportationTermsCode = TransportationTermsCode
        self.RiskOfLossCode = RiskOfLossCode
        self.validate_RiskOfLossCodeType(self.RiskOfLossCode)
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FOBRelatedInstructionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FOBRelatedInstructionType.subclass:
            return FOBRelatedInstructionType.subclass(*args_, **kwargs_)
        else:
            return FOBRelatedInstructionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FOBPayCode(self): return self.FOBPayCode
    def set_FOBPayCode(self, FOBPayCode): self.FOBPayCode = FOBPayCode
    def get_FOBLocationQualifier(self): return self.FOBLocationQualifier
    def set_FOBLocationQualifier(self, FOBLocationQualifier): self.FOBLocationQualifier = FOBLocationQualifier
    def get_FOBLocationDescription(self): return self.FOBLocationDescription
    def set_FOBLocationDescription(self, FOBLocationDescription): self.FOBLocationDescription = FOBLocationDescription
    def get_FOBTitlePassageCode(self): return self.FOBTitlePassageCode
    def set_FOBTitlePassageCode(self, FOBTitlePassageCode): self.FOBTitlePassageCode = FOBTitlePassageCode
    def get_FOBTitlePassageLocation(self): return self.FOBTitlePassageLocation
    def set_FOBTitlePassageLocation(self, FOBTitlePassageLocation): self.FOBTitlePassageLocation = FOBTitlePassageLocation
    def get_TransportationTermsQualifierCode(self): return self.TransportationTermsQualifierCode
    def set_TransportationTermsQualifierCode(self, TransportationTermsQualifierCode): self.TransportationTermsQualifierCode = TransportationTermsQualifierCode
    def get_TransportationTermsCode(self): return self.TransportationTermsCode
    def set_TransportationTermsCode(self, TransportationTermsCode): self.TransportationTermsCode = TransportationTermsCode
    def get_RiskOfLossCode(self): return self.RiskOfLossCode
    def set_RiskOfLossCode(self, RiskOfLossCode): self.RiskOfLossCode = RiskOfLossCode
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_FOBPayCodeType(self, value):
        # Validate type FOBPayCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', 'BP', 'CA', 'CC', 'CD', 'CF', 'DE', 'DF', 'FO', 'HP', 'MX', 'NC', 'NR', 'PA', 'PB', 'PC', 'PD', 'PE', 'PL', 'PO', 'PP', 'PS', 'PU', 'RC', 'RF', 'RS', 'TP', 'WC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FOBPayCodeType' % {"value" : value.encode("utf-8")} )
    def validate_FOBLocationQualifierType(self, value):
        # Validate type FOBLocationQualifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'DE', 'FA', 'K', 'KL', 'MI', 'OR', 'PE', 'PL', 'RG', 'SP', 'TL', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FOBLocationQualifierType' % {"value" : value.encode("utf-8")} )
    def validate_FOBTitlePassageCodeType(self, value):
        # Validate type FOBTitlePassageCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'DE', 'FA', 'FF', 'K', 'KL', 'MI', 'OR', 'PE', 'PL', 'RG', 'SP', 'TL', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FOBTitlePassageCodeType' % {"value" : value.encode("utf-8")} )
    def validate_TransportationTermsQualifierCodeType(self, value):
        # Validate type TransportationTermsQualifierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransportationTermsQualifierCodeType' % {"value" : value.encode("utf-8")} )
    def validate_RiskOfLossCodeType(self, value):
        # Validate type RiskOfLossCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BY', 'FE', 'IM', 'IR', 'LR', 'PP', 'SE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RiskOfLossCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.FOBPayCode is not None or
            self.FOBLocationQualifier is not None or
            self.FOBLocationDescription is not None or
            self.FOBTitlePassageCode is not None or
            self.FOBTitlePassageLocation is not None or
            self.TransportationTermsQualifierCode is not None or
            self.TransportationTermsCode is not None or
            self.RiskOfLossCode is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FOBRelatedInstructionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FOBRelatedInstructionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FOBRelatedInstructionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FOBPayCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBPayCode>%s</%sFOBPayCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBPayCode), input_name='FOBPayCode')), namespace_, eol_))
        if self.FOBLocationQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBLocationQualifier>%s</%sFOBLocationQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBLocationQualifier), input_name='FOBLocationQualifier')), namespace_, eol_))
        if self.FOBLocationDescription is not None:
            self.FOBLocationDescription.export(outfile, level, namespace_, name_='FOBLocationDescription', pretty_print=pretty_print)
        if self.FOBTitlePassageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBTitlePassageCode>%s</%sFOBTitlePassageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBTitlePassageCode), input_name='FOBTitlePassageCode')), namespace_, eol_))
        if self.FOBTitlePassageLocation is not None:
            self.FOBTitlePassageLocation.export(outfile, level, namespace_, name_='FOBTitlePassageLocation', pretty_print=pretty_print)
        if self.TransportationTermsQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportationTermsQualifierCode>%s</%sTransportationTermsQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransportationTermsQualifierCode), input_name='TransportationTermsQualifierCode')), namespace_, eol_))
        if self.TransportationTermsCode is not None:
            self.TransportationTermsCode.export(outfile, level, namespace_, name_='TransportationTermsCode', pretty_print=pretty_print)
        if self.RiskOfLossCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiskOfLossCode>%s</%sRiskOfLossCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RiskOfLossCode), input_name='RiskOfLossCode')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FOBPayCode':
            FOBPayCode_ = child_.text
            FOBPayCode_ = self.gds_validate_string(FOBPayCode_, node, 'FOBPayCode')
            self.FOBPayCode = FOBPayCode_
            # validate type FOBPayCodeType
            self.validate_FOBPayCodeType(self.FOBPayCode)
        elif nodeName_ == 'FOBLocationQualifier':
            FOBLocationQualifier_ = child_.text
            FOBLocationQualifier_ = self.gds_validate_string(FOBLocationQualifier_, node, 'FOBLocationQualifier')
            self.FOBLocationQualifier = FOBLocationQualifier_
            # validate type FOBLocationQualifierType
            self.validate_FOBLocationQualifierType(self.FOBLocationQualifier)
        elif nodeName_ == 'FOBLocationDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBLocationDescription = obj_
            obj_.original_tagname_ = 'FOBLocationDescription'
        elif nodeName_ == 'FOBTitlePassageCode':
            FOBTitlePassageCode_ = child_.text
            FOBTitlePassageCode_ = self.gds_validate_string(FOBTitlePassageCode_, node, 'FOBTitlePassageCode')
            self.FOBTitlePassageCode = FOBTitlePassageCode_
            # validate type FOBTitlePassageCodeType
            self.validate_FOBTitlePassageCodeType(self.FOBTitlePassageCode)
        elif nodeName_ == 'FOBTitlePassageLocation':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBTitlePassageLocation = obj_
            obj_.original_tagname_ = 'FOBTitlePassageLocation'
        elif nodeName_ == 'TransportationTermsQualifierCode':
            TransportationTermsQualifierCode_ = child_.text
            TransportationTermsQualifierCode_ = self.gds_validate_string(TransportationTermsQualifierCode_, node, 'TransportationTermsQualifierCode')
            self.TransportationTermsQualifierCode = TransportationTermsQualifierCode_
            # validate type TransportationTermsQualifierCodeType
            self.validate_TransportationTermsQualifierCodeType(self.TransportationTermsQualifierCode)
        elif nodeName_ == 'TransportationTermsCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransportationTermsCode = obj_
            obj_.original_tagname_ = 'TransportationTermsCode'
        elif nodeName_ == 'RiskOfLossCode':
            RiskOfLossCode_ = child_.text
            RiskOfLossCode_ = self.gds_validate_string(RiskOfLossCode_, node, 'RiskOfLossCode')
            self.RiskOfLossCode = RiskOfLossCode_
            # validate type RiskOfLossCodeType
            self.validate_RiskOfLossCodeType(self.RiskOfLossCode)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class FOBRelatedInstructionType


class OrderLevelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OrderHeader=None, QuantityAndWeight=None, CarrierInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, Commodity=None, PackLevel=None, ItemLevel=None, ContainerLevel=None):
        self.original_tagname_ = None
        self.OrderHeader = OrderHeader
        if QuantityAndWeight is None:
            self.QuantityAndWeight = []
        else:
            self.QuantityAndWeight = QuantityAndWeight
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        if PackLevel is None:
            self.PackLevel = []
        else:
            self.PackLevel = PackLevel
        if ItemLevel is None:
            self.ItemLevel = []
        else:
            self.ItemLevel = ItemLevel
        if ContainerLevel is None:
            self.ContainerLevel = []
        else:
            self.ContainerLevel = ContainerLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderLevelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderLevelType.subclass:
            return OrderLevelType.subclass(*args_, **kwargs_)
        else:
            return OrderLevelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OrderHeader(self): return self.OrderHeader
    def set_OrderHeader(self, OrderHeader): self.OrderHeader = OrderHeader
    def get_QuantityAndWeight(self): return self.QuantityAndWeight
    def set_QuantityAndWeight(self, QuantityAndWeight): self.QuantityAndWeight = QuantityAndWeight
    def add_QuantityAndWeight(self, value): self.QuantityAndWeight.append(value)
    def insert_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight.insert(index, value)
    def replace_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def add_PackLevel(self, value): self.PackLevel.append(value)
    def insert_PackLevel_at(self, index, value): self.PackLevel.insert(index, value)
    def replace_PackLevel_at(self, index, value): self.PackLevel[index] = value
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def add_ItemLevel(self, value): self.ItemLevel.append(value)
    def insert_ItemLevel_at(self, index, value): self.ItemLevel.insert(index, value)
    def replace_ItemLevel_at(self, index, value): self.ItemLevel[index] = value
    def get_ContainerLevel(self): return self.ContainerLevel
    def set_ContainerLevel(self, ContainerLevel): self.ContainerLevel = ContainerLevel
    def add_ContainerLevel(self, value): self.ContainerLevel.append(value)
    def insert_ContainerLevel_at(self, index, value): self.ContainerLevel.insert(index, value)
    def replace_ContainerLevel_at(self, index, value): self.ContainerLevel[index] = value
    def hasContent_(self):
        if (
            self.OrderHeader is not None or
            self.QuantityAndWeight or
            self.CarrierInformation or
            self.Date or
            self.Reference or
            self.Notes or
            self.Address or
            self.Tax or
            self.ChargesAllowances or
            self.Commodity or
            self.PackLevel or
            self.ItemLevel or
            self.ContainerLevel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderLevelType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderLevelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderLevelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderLevelType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderLevelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrderHeader is not None:
            self.OrderHeader.export(outfile, level, namespace_, name_='OrderHeader', pretty_print=pretty_print)
        for QuantityAndWeight_ in self.QuantityAndWeight:
            QuantityAndWeight_.export(outfile, level, namespace_, name_='QuantityAndWeight', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        for PackLevel_ in self.PackLevel:
            PackLevel_.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        for ItemLevel_ in self.ItemLevel:
            ItemLevel_.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        for ContainerLevel_ in self.ContainerLevel:
            ContainerLevel_.export(outfile, level, namespace_, name_='ContainerLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OrderHeader':
            obj_ = OrderHeaderType.factory()
            obj_.build(child_)
            self.OrderHeader = obj_
            obj_.original_tagname_ = 'OrderHeader'
        elif nodeName_ == 'QuantityAndWeight':
            obj_ = QuantityAndWeightType24.factory()
            obj_.build(child_)
            self.QuantityAndWeight.append(obj_)
            obj_.original_tagname_ = 'QuantityAndWeight'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType31.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType47.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType49.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType53.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType55.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType68.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType75.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevelType89.factory()
            obj_.build(child_)
            self.PackLevel.append(obj_)
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevelType487.factory()
            obj_.build(child_)
            self.ItemLevel.append(obj_)
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'ContainerLevel':
            obj_ = ContainerLevel.factory()
            obj_.build(child_)
            self.ContainerLevel.append(obj_)
            obj_.original_tagname_ = 'ContainerLevel'
# end class OrderLevelType


class OrderHeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DepositorOrderNumber=None, InternalOrderNumber=None, InternalOrderDate=None, InvoiceNumber=None, InvoiceDate=None, PurchaseOrderNumber=None, ReleaseNumber=None, PurchaseOrderDate=None, Department=None, DepartmentDescription=None, Vendor=None, JobNumber=None, Division=None, CustomerAccountNumber=None, CustomerOrderNumber=None, PromotionDealNumber=None, PromotionDealDescription=None, DeliveryDate=None, DeliveryTime=None):
        self.original_tagname_ = None
        self.DepositorOrderNumber = DepositorOrderNumber
        self.InternalOrderNumber = InternalOrderNumber
        self.InternalOrderDate = InternalOrderDate
        self.InvoiceNumber = InvoiceNumber
        self.InvoiceDate = InvoiceDate
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.ReleaseNumber = ReleaseNumber
        self.PurchaseOrderDate = PurchaseOrderDate
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Vendor = Vendor
        self.JobNumber = JobNumber
        self.Division = Division
        self.CustomerAccountNumber = CustomerAccountNumber
        self.CustomerOrderNumber = CustomerOrderNumber
        self.PromotionDealNumber = PromotionDealNumber
        self.PromotionDealDescription = PromotionDealDescription
        self.DeliveryDate = DeliveryDate
        self.DeliveryTime = DeliveryTime
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderHeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderHeaderType.subclass:
            return OrderHeaderType.subclass(*args_, **kwargs_)
        else:
            return OrderHeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DepositorOrderNumber(self): return self.DepositorOrderNumber
    def set_DepositorOrderNumber(self, DepositorOrderNumber): self.DepositorOrderNumber = DepositorOrderNumber
    def get_InternalOrderNumber(self): return self.InternalOrderNumber
    def set_InternalOrderNumber(self, InternalOrderNumber): self.InternalOrderNumber = InternalOrderNumber
    def get_InternalOrderDate(self): return self.InternalOrderDate
    def set_InternalOrderDate(self, InternalOrderDate): self.InternalOrderDate = InternalOrderDate
    def get_InvoiceNumber(self): return self.InvoiceNumber
    def set_InvoiceNumber(self, InvoiceNumber): self.InvoiceNumber = InvoiceNumber
    def get_InvoiceDate(self): return self.InvoiceDate
    def set_InvoiceDate(self, InvoiceDate): self.InvoiceDate = InvoiceDate
    def get_PurchaseOrderNumber(self): return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber): self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_ReleaseNumber(self): return self.ReleaseNumber
    def set_ReleaseNumber(self, ReleaseNumber): self.ReleaseNumber = ReleaseNumber
    def get_PurchaseOrderDate(self): return self.PurchaseOrderDate
    def set_PurchaseOrderDate(self, PurchaseOrderDate): self.PurchaseOrderDate = PurchaseOrderDate
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Vendor(self): return self.Vendor
    def set_Vendor(self, Vendor): self.Vendor = Vendor
    def get_JobNumber(self): return self.JobNumber
    def set_JobNumber(self, JobNumber): self.JobNumber = JobNumber
    def get_Division(self): return self.Division
    def set_Division(self, Division): self.Division = Division
    def get_CustomerAccountNumber(self): return self.CustomerAccountNumber
    def set_CustomerAccountNumber(self, CustomerAccountNumber): self.CustomerAccountNumber = CustomerAccountNumber
    def get_CustomerOrderNumber(self): return self.CustomerOrderNumber
    def set_CustomerOrderNumber(self, CustomerOrderNumber): self.CustomerOrderNumber = CustomerOrderNumber
    def get_PromotionDealNumber(self): return self.PromotionDealNumber
    def set_PromotionDealNumber(self, PromotionDealNumber): self.PromotionDealNumber = PromotionDealNumber
    def get_PromotionDealDescription(self): return self.PromotionDealDescription
    def set_PromotionDealDescription(self, PromotionDealDescription): self.PromotionDealDescription = PromotionDealDescription
    def get_DeliveryDate(self): return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate): self.DeliveryDate = DeliveryDate
    def get_DeliveryTime(self): return self.DeliveryTime
    def set_DeliveryTime(self, DeliveryTime): self.DeliveryTime = DeliveryTime
    def hasContent_(self):
        if (
            self.DepositorOrderNumber is not None or
            self.InternalOrderNumber is not None or
            self.InternalOrderDate is not None or
            self.InvoiceNumber is not None or
            self.InvoiceDate is not None or
            self.PurchaseOrderNumber is not None or
            self.ReleaseNumber is not None or
            self.PurchaseOrderDate is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Vendor is not None or
            self.JobNumber is not None or
            self.Division is not None or
            self.CustomerAccountNumber is not None or
            self.CustomerOrderNumber is not None or
            self.PromotionDealNumber is not None or
            self.PromotionDealDescription is not None or
            self.DeliveryDate is not None or
            self.DeliveryTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderHeaderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderHeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderHeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderHeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderHeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DepositorOrderNumber is not None:
            self.DepositorOrderNumber.export(outfile, level, namespace_, name_='DepositorOrderNumber', pretty_print=pretty_print)
        if self.InternalOrderNumber is not None:
            self.InternalOrderNumber.export(outfile, level, namespace_, name_='InternalOrderNumber', pretty_print=pretty_print)
        if self.InternalOrderDate is not None:
            self.InternalOrderDate.export(outfile, level, namespace_, name_='InternalOrderDate', pretty_print=pretty_print)
        if self.InvoiceNumber is not None:
            self.InvoiceNumber.export(outfile, level, namespace_, name_='InvoiceNumber', pretty_print=pretty_print)
        if self.InvoiceDate is not None:
            self.InvoiceDate.export(outfile, level, namespace_, name_='InvoiceDate', pretty_print=pretty_print)
        if self.PurchaseOrderNumber is not None:
            self.PurchaseOrderNumber.export(outfile, level, namespace_, name_='PurchaseOrderNumber', pretty_print=pretty_print)
        if self.ReleaseNumber is not None:
            self.ReleaseNumber.export(outfile, level, namespace_, name_='ReleaseNumber', pretty_print=pretty_print)
        if self.PurchaseOrderDate is not None:
            self.PurchaseOrderDate.export(outfile, level, namespace_, name_='PurchaseOrderDate', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Vendor is not None:
            self.Vendor.export(outfile, level, namespace_, name_='Vendor', pretty_print=pretty_print)
        if self.JobNumber is not None:
            self.JobNumber.export(outfile, level, namespace_, name_='JobNumber', pretty_print=pretty_print)
        if self.Division is not None:
            self.Division.export(outfile, level, namespace_, name_='Division', pretty_print=pretty_print)
        if self.CustomerAccountNumber is not None:
            self.CustomerAccountNumber.export(outfile, level, namespace_, name_='CustomerAccountNumber', pretty_print=pretty_print)
        if self.CustomerOrderNumber is not None:
            self.CustomerOrderNumber.export(outfile, level, namespace_, name_='CustomerOrderNumber', pretty_print=pretty_print)
        if self.PromotionDealNumber is not None:
            self.PromotionDealNumber.export(outfile, level, namespace_, name_='PromotionDealNumber', pretty_print=pretty_print)
        if self.PromotionDealDescription is not None:
            self.PromotionDealDescription.export(outfile, level, namespace_, name_='PromotionDealDescription', pretty_print=pretty_print)
        if self.DeliveryDate is not None:
            self.DeliveryDate.export(outfile, level, namespace_, name_='DeliveryDate', pretty_print=pretty_print)
        if self.DeliveryTime is not None:
            self.DeliveryTime.export(outfile, level, namespace_, name_='DeliveryTime', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DepositorOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepositorOrderNumber = obj_
            obj_.original_tagname_ = 'DepositorOrderNumber'
        elif nodeName_ == 'InternalOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternalOrderNumber = obj_
            obj_.original_tagname_ = 'InternalOrderNumber'
        elif nodeName_ == 'InternalOrderDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternalOrderDate = obj_
            obj_.original_tagname_ = 'InternalOrderDate'
        elif nodeName_ == 'InvoiceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InvoiceNumber = obj_
            obj_.original_tagname_ = 'InvoiceNumber'
        elif nodeName_ == 'InvoiceDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InvoiceDate = obj_
            obj_.original_tagname_ = 'InvoiceDate'
        elif nodeName_ == 'PurchaseOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchaseOrderNumber = obj_
            obj_.original_tagname_ = 'PurchaseOrderNumber'
        elif nodeName_ == 'ReleaseNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReleaseNumber = obj_
            obj_.original_tagname_ = 'ReleaseNumber'
        elif nodeName_ == 'PurchaseOrderDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchaseOrderDate = obj_
            obj_.original_tagname_ = 'PurchaseOrderDate'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Vendor':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Vendor = obj_
            obj_.original_tagname_ = 'Vendor'
        elif nodeName_ == 'JobNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JobNumber = obj_
            obj_.original_tagname_ = 'JobNumber'
        elif nodeName_ == 'Division':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Division = obj_
            obj_.original_tagname_ = 'Division'
        elif nodeName_ == 'CustomerAccountNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CustomerAccountNumber = obj_
            obj_.original_tagname_ = 'CustomerAccountNumber'
        elif nodeName_ == 'CustomerOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CustomerOrderNumber = obj_
            obj_.original_tagname_ = 'CustomerOrderNumber'
        elif nodeName_ == 'PromotionDealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PromotionDealNumber = obj_
            obj_.original_tagname_ = 'PromotionDealNumber'
        elif nodeName_ == 'PromotionDealDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PromotionDealDescription = obj_
            obj_.original_tagname_ = 'PromotionDealDescription'
        elif nodeName_ == 'DeliveryDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DeliveryDate = obj_
            obj_.original_tagname_ = 'DeliveryDate'
        elif nodeName_ == 'DeliveryTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DeliveryTime = obj_
            obj_.original_tagname_ = 'DeliveryTime'
# end class OrderHeaderType


class QuantityAndWeightType24(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackingMedium=None, PackingMaterial=None, LadingQuantity=None, LadingDescription=None, WeightQualifier=None, Weight=None, WeightUOM=None, Volume=None, VolumeUOM=None, PalletExchangeCode=None):
        self.original_tagname_ = None
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType25(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType26(self.PackingMaterial)
        self.LadingQuantity = LadingQuantity
        self.LadingDescription = LadingDescription
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType27(self.WeightQualifier)
        self.Weight = Weight
        self.WeightUOM = WeightUOM
        self.validate_WeightUOMType28(self.WeightUOM)
        self.Volume = Volume
        self.VolumeUOM = VolumeUOM
        self.validate_VolumeUOMType29(self.VolumeUOM)
        self.PalletExchangeCode = PalletExchangeCode
        self.validate_PalletExchangeCodeType30(self.PalletExchangeCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityAndWeightType24)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityAndWeightType24.subclass:
            return QuantityAndWeightType24.subclass(*args_, **kwargs_)
        else:
            return QuantityAndWeightType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LadingQuantity(self): return self.LadingQuantity
    def set_LadingQuantity(self, LadingQuantity): self.LadingQuantity = LadingQuantity
    def get_LadingDescription(self): return self.LadingDescription
    def set_LadingDescription(self, LadingDescription): self.LadingDescription = LadingDescription
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_WeightUOM(self): return self.WeightUOM
    def set_WeightUOM(self, WeightUOM): self.WeightUOM = WeightUOM
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_VolumeUOM(self): return self.VolumeUOM
    def set_VolumeUOM(self, VolumeUOM): self.VolumeUOM = VolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def validate_PackingMediumType25(self, value):
        # Validate type PackingMediumType25, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType25' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType26(self, value):
        # Validate type PackingMaterialType26, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType26' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType27(self, value):
        # Validate type WeightQualifierType27, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType27' % {"value" : value.encode("utf-8")} )
    def validate_WeightUOMType28(self, value):
        # Validate type WeightUOMType28, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightUOMType28' % {"value" : value.encode("utf-8")} )
    def validate_VolumeUOMType29(self, value):
        # Validate type VolumeUOMType29, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on VolumeUOMType29' % {"value" : value.encode("utf-8")} )
    def validate_PalletExchangeCodeType30(self, value):
        # Validate type PalletExchangeCodeType30, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletExchangeCodeType30' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LadingQuantity is not None or
            self.LadingDescription is not None or
            self.WeightQualifier is not None or
            self.Weight is not None or
            self.WeightUOM is not None or
            self.Volume is not None or
            self.VolumeUOM is not None or
            self.PalletExchangeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityAndWeightType24', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityAndWeightType24')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityAndWeightType24', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityAndWeightType24'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityAndWeightType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.LadingQuantity is not None:
            self.LadingQuantity.export(outfile, level, namespace_, name_='LadingQuantity', pretty_print=pretty_print)
        if self.LadingDescription is not None:
            self.LadingDescription.export(outfile, level, namespace_, name_='LadingDescription', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.WeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightUOM>%s</%sWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightUOM), input_name='WeightUOM')), namespace_, eol_))
        if self.Volume is not None:
            self.Volume.export(outfile, level, namespace_, name_='Volume', pretty_print=pretty_print)
        if self.VolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeUOM>%s</%sVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VolumeUOM), input_name='VolumeUOM')), namespace_, eol_))
        if self.PalletExchangeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletExchangeCode>%s</%sPalletExchangeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletExchangeCode), input_name='PalletExchangeCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType25
            self.validate_PackingMediumType25(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType26
            self.validate_PackingMaterialType26(self.PackingMaterial)
        elif nodeName_ == 'LadingQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingQuantity = obj_
            obj_.original_tagname_ = 'LadingQuantity'
        elif nodeName_ == 'LadingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingDescription = obj_
            obj_.original_tagname_ = 'LadingDescription'
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType27
            self.validate_WeightQualifierType27(self.WeightQualifier)
        elif nodeName_ == 'Weight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'WeightUOM':
            WeightUOM_ = child_.text
            WeightUOM_ = self.gds_validate_string(WeightUOM_, node, 'WeightUOM')
            self.WeightUOM = WeightUOM_
            # validate type WeightUOMType28
            self.validate_WeightUOMType28(self.WeightUOM)
        elif nodeName_ == 'Volume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
        elif nodeName_ == 'VolumeUOM':
            VolumeUOM_ = child_.text
            VolumeUOM_ = self.gds_validate_string(VolumeUOM_, node, 'VolumeUOM')
            self.VolumeUOM = VolumeUOM_
            # validate type VolumeUOMType29
            self.validate_VolumeUOMType29(self.VolumeUOM)
        elif nodeName_ == 'PalletExchangeCode':
            PalletExchangeCode_ = child_.text
            PalletExchangeCode_ = self.gds_validate_string(PalletExchangeCode_, node, 'PalletExchangeCode')
            self.PalletExchangeCode = PalletExchangeCode_
            # validate type PalletExchangeCodeType30
            self.validate_PalletExchangeCodeType30(self.PalletExchangeCode)
# end class QuantityAndWeightType24


class CarrierInformationType31(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType32(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType33(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType34(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType35(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType36(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType37(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType38(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType39(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType31)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType31.subclass:
            return CarrierInformationType31.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType31(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType32(self, value):
        # Validate type StatusCodeType32, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType32' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType33(self, value):
        # Validate type CarrierTransMethodCodeType33, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType33' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType34(self, value):
        # Validate type EquipmentDescriptionCodeType34, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType34' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType35(self, value):
        # Validate type SealStatusCodeType35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType35' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType36(self, value):
        # Validate type OwnershipCodeType36, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType36' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType37(self, value):
        # Validate type RoutingSequenceCodeType37, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType37' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType38(self, value):
        # Validate type TransitDirectionCodeType38, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType38' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType39(self, value):
        # Validate type TransitTimeQualType39, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType39' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType31', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType31')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType31', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType31'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType31', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType32
            self.validate_StatusCodeType32(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType33
            self.validate_CarrierTransMethodCodeType33(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType34
            self.validate_EquipmentDescriptionCodeType34(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType35
            self.validate_SealStatusCodeType35(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType36
            self.validate_OwnershipCodeType36(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType37
            self.validate_RoutingSequenceCodeType37(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType38
            self.validate_TransitDirectionCodeType38(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType39
            self.validate_TransitTimeQualType39(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType40.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType42.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType31


class ServiceLevelCodesType40(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType41(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType40)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType40.subclass:
            return ServiceLevelCodesType40.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType40(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType41(self, value):
        # Validate type ServiceLevelCodeType41, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType41' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType40', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType40')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType40', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType40'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType40', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType41
            self.validate_ServiceLevelCodeType41(self.ServiceLevelCode)
# end class ServiceLevelCodesType40


class AddressType42(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType43(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType44(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType42)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType42.subclass:
            return AddressType42.subclass(*args_, **kwargs_)
        else:
            return AddressType42(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType43(self, value):
        # Validate type AddressTypeCodeType43, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType43' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType44(self, value):
        # Validate type LocationCodeQualifierType44, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType44' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType42', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType42')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType42', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType42'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType42', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType43
            self.validate_AddressTypeCodeType43(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType44
            self.validate_LocationCodeQualifierType44(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType45.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType42


class DateType45(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type46(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType45)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType45.subclass:
            return DateType45.subclass(*args_, **kwargs_)
        else:
            return DateType45(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type46(self, value):
        # Validate type DateTimeQualifier1Type46, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type46' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType45', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType45')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType45', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType45'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType45', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type46
            self.validate_DateTimeQualifier1Type46(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType45


class DateType47(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type48(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType47)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType47.subclass:
            return DateType47.subclass(*args_, **kwargs_)
        else:
            return DateType47(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type48(self, value):
        # Validate type DateTimeQualifier1Type48, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type48' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType47', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType47')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType47', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType47'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType47', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type48
            self.validate_DateTimeQualifier1Type48(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType47


class ReferenceType49(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType50(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType49)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType49.subclass:
            return ReferenceType49.subclass(*args_, **kwargs_)
        else:
            return ReferenceType49(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType50(self, value):
        # Validate type ReferenceQualType50, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType50' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType49', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType49')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType49', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType49'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType49', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType50
            self.validate_ReferenceQualType50(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType51.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType49


class ReferenceIDsType51(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType52(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType51)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType51.subclass:
            return ReferenceIDsType51.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType51(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType52(self, value):
        # Validate type ReferenceQualType52, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType52' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType51', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType51')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType51', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType51'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType51', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType52
            self.validate_ReferenceQualType52(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType51


class NotesType53(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType54(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType53)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType53.subclass:
            return NotesType53.subclass(*args_, **kwargs_)
        else:
            return NotesType53(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType54(self, value):
        # Validate type NoteCodeType54, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType54' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType53', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType53')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType53', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType53'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType53', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType54
            self.validate_NoteCodeType54(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType53


class AddressType55(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType56(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType57(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType55)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType55.subclass:
            return AddressType55.subclass(*args_, **kwargs_)
        else:
            return AddressType55(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType56(self, value):
        # Validate type AddressTypeCodeType56, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType56' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType57(self, value):
        # Validate type LocationCodeQualifierType57, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType57' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType55', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType55')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType55', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType55'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType55', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType56
            self.validate_AddressTypeCodeType56(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType57
            self.validate_LocationCodeQualifierType57(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType58.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType62.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType66.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType55


class ReferenceType58(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType59(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType58)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType58.subclass:
            return ReferenceType58.subclass(*args_, **kwargs_)
        else:
            return ReferenceType58(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType59(self, value):
        # Validate type ReferenceQualType59, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType59' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType58', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType58')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType58', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType58'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType58', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType59
            self.validate_ReferenceQualType59(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType60.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType58


class ReferenceIDsType60(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType61(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType60)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType60.subclass:
            return ReferenceIDsType60.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType60(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType61(self, value):
        # Validate type ReferenceQualType61, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType61' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType60', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType60')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType60', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType60'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType60', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType61
            self.validate_ReferenceQualType61(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType60


class ContactType62(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType63(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType62)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType62.subclass:
            return ContactType62.subclass(*args_, **kwargs_)
        else:
            return ContactType62(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType63(self, value):
        # Validate type ContactTypeCodeType63, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType63' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType62', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType62')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType62', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType62'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType62', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType63
            self.validate_ContactTypeCodeType63(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType64.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType62


class AdditionalContactDetailsType64(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType65(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType64)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType64.subclass:
            return AdditionalContactDetailsType64.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType64(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType65(self, value):
        # Validate type ContactQualType65, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType65' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType64', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType64')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType64', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType64'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType64', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType65
            self.validate_ContactQualType65(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType64


class DateType66(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type67(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType66)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType66.subclass:
            return DateType66.subclass(*args_, **kwargs_)
        else:
            return DateType66(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type67(self, value):
        # Validate type DateTimeQualifier1Type67, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type67' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType66', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType66')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType66', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType66'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType66', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type67
            self.validate_DateTimeQualifier1Type67(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType66


class TaxType68(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType69(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType70(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType71(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType72(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType73(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType74(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType68)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType68.subclass:
            return TaxType68.subclass(*args_, **kwargs_)
        else:
            return TaxType68(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType69(self, value):
        # Validate type TaxTypeCodeType69, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType69' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType70(self, value):
        # Validate type TaxPercentQualType70, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType70' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType71(self, value):
        # Validate type JurisdictionQualType71, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType71' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType72(self, value):
        # Validate type TaxExemptCodeType72, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType72' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType73(self, value):
        # Validate type RelationshipCodeType73, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType73' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType74(self, value):
        # Validate type TaxHandlingCodeType74, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType74' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType68', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType68')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType68', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType68'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType68', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType69
            self.validate_TaxTypeCodeType69(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType70
            self.validate_TaxPercentQualType70(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType71
            self.validate_JurisdictionQualType71(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType72
            self.validate_TaxExemptCodeType72(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType73
            self.validate_RelationshipCodeType73(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType74
            self.validate_TaxHandlingCodeType74(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType68


class ChargesAllowancesType75(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType76(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType77(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType78(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType79(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType80(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType81(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType75)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType75.subclass:
            return ChargesAllowancesType75.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType75(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType76(self, value):
        # Validate type AllowChrgIndicatorType76, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType76' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType77(self, value):
        # Validate type AllowChrgCodeType77, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType77' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType78(self, value):
        # Validate type AllowChrgAgencyCodeType78, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType78' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType79(self, value):
        # Validate type AllowChrgPercentQualType79, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType79' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType80(self, value):
        # Validate type AllowChrgQtyUOMType80, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType80' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType81(self, value):
        # Validate type AllowChrgHandlingCodeType81, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType81' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType75', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType75')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType75', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType75'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType75', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType76
            self.validate_AllowChrgIndicatorType76(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType77
            self.validate_AllowChrgCodeType77(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType78
            self.validate_AllowChrgAgencyCodeType78(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType79
            self.validate_AllowChrgPercentQualType79(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType80
            self.validate_AllowChrgQtyUOMType80(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType81
            self.validate_AllowChrgHandlingCodeType81(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType82.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType75


class TaxType82(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType83(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType84(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType85(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType86(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType87(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType88(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType82)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType82.subclass:
            return TaxType82.subclass(*args_, **kwargs_)
        else:
            return TaxType82(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType83(self, value):
        # Validate type TaxTypeCodeType83, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType83' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType84(self, value):
        # Validate type TaxPercentQualType84, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType84' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType85(self, value):
        # Validate type JurisdictionQualType85, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType85' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType86(self, value):
        # Validate type TaxExemptCodeType86, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType86' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType87(self, value):
        # Validate type RelationshipCodeType87, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType87' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType88(self, value):
        # Validate type TaxHandlingCodeType88, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType88' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType82', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType82')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType82', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType82'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType82', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType83
            self.validate_TaxTypeCodeType83(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType84
            self.validate_TaxPercentQualType84(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType85
            self.validate_JurisdictionQualType85(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType86
            self.validate_TaxExemptCodeType86(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType87
            self.validate_RelationshipCodeType87(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType88
            self.validate_TaxHandlingCodeType88(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType82


class CommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType.subclass:
            return CommodityType.subclass(*args_, **kwargs_)
        else:
            return CommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType(self, value):
        # Validate type CommodityCodeQualifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType
            self.validate_CommodityCodeQualifierType(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType


class PackLevelType89(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Pack=None, PhysicalDetails=None, MarksAndNumbersCollection=None, PalletInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, CarrierInformation=None, Packaging=None, ItemLevel=None, PackLevel=None):
        self.original_tagname_ = None
        self.Pack = Pack
        if PhysicalDetails is None:
            self.PhysicalDetails = []
        else:
            self.PhysicalDetails = PhysicalDetails
        if MarksAndNumbersCollection is None:
            self.MarksAndNumbersCollection = []
        else:
            self.MarksAndNumbersCollection = MarksAndNumbersCollection
        if PalletInformation is None:
            self.PalletInformation = []
        else:
            self.PalletInformation = PalletInformation
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Packaging is None:
            self.Packaging = []
        else:
            self.Packaging = Packaging
        if ItemLevel is None:
            self.ItemLevel = []
        else:
            self.ItemLevel = ItemLevel
        if PackLevel is None:
            self.PackLevel = []
        else:
            self.PackLevel = PackLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackLevelType89)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackLevelType89.subclass:
            return PackLevelType89.subclass(*args_, **kwargs_)
        else:
            return PackLevelType89(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Pack(self): return self.Pack
    def set_Pack(self, Pack): self.Pack = Pack
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def add_PhysicalDetails(self, value): self.PhysicalDetails.append(value)
    def insert_PhysicalDetails_at(self, index, value): self.PhysicalDetails.insert(index, value)
    def replace_PhysicalDetails_at(self, index, value): self.PhysicalDetails[index] = value
    def get_MarksAndNumbersCollection(self): return self.MarksAndNumbersCollection
    def set_MarksAndNumbersCollection(self, MarksAndNumbersCollection): self.MarksAndNumbersCollection = MarksAndNumbersCollection
    def add_MarksAndNumbersCollection(self, value): self.MarksAndNumbersCollection.append(value)
    def insert_MarksAndNumbersCollection_at(self, index, value): self.MarksAndNumbersCollection.insert(index, value)
    def replace_MarksAndNumbersCollection_at(self, index, value): self.MarksAndNumbersCollection[index] = value
    def get_PalletInformation(self): return self.PalletInformation
    def set_PalletInformation(self, PalletInformation): self.PalletInformation = PalletInformation
    def add_PalletInformation(self, value): self.PalletInformation.append(value)
    def insert_PalletInformation_at(self, index, value): self.PalletInformation.insert(index, value)
    def replace_PalletInformation_at(self, index, value): self.PalletInformation[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def add_Packaging(self, value): self.Packaging.append(value)
    def insert_Packaging_at(self, index, value): self.Packaging.insert(index, value)
    def replace_Packaging_at(self, index, value): self.Packaging[index] = value
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def add_ItemLevel(self, value): self.ItemLevel.append(value)
    def insert_ItemLevel_at(self, index, value): self.ItemLevel.insert(index, value)
    def replace_ItemLevel_at(self, index, value): self.ItemLevel[index] = value
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def add_PackLevel(self, value): self.PackLevel.append(value)
    def insert_PackLevel_at(self, index, value): self.PackLevel.insert(index, value)
    def replace_PackLevel_at(self, index, value): self.PackLevel[index] = value
    def hasContent_(self):
        if (
            self.Pack is not None or
            self.PhysicalDetails or
            self.MarksAndNumbersCollection or
            self.PalletInformation or
            self.Date or
            self.Reference or
            self.Notes or
            self.Address or
            self.Tax or
            self.ChargesAllowances or
            self.CarrierInformation or
            self.Packaging or
            self.ItemLevel or
            self.PackLevel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackLevelType89', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackLevelType89')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackLevelType89', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackLevelType89'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackLevelType89', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Pack is not None:
            self.Pack.export(outfile, level, namespace_, name_='Pack', pretty_print=pretty_print)
        for PhysicalDetails_ in self.PhysicalDetails:
            PhysicalDetails_.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        for MarksAndNumbersCollection_ in self.MarksAndNumbersCollection:
            MarksAndNumbersCollection_.export(outfile, level, namespace_, name_='MarksAndNumbersCollection', pretty_print=pretty_print)
        for PalletInformation_ in self.PalletInformation:
            PalletInformation_.export(outfile, level, namespace_, name_='PalletInformation', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Packaging_ in self.Packaging:
            Packaging_.export(outfile, level, namespace_, name_='Packaging', pretty_print=pretty_print)
        for ItemLevel_ in self.ItemLevel:
            ItemLevel_.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        for PackLevel_ in self.PackLevel:
            PackLevel_.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Pack':
            obj_ = PackType.factory()
            obj_.build(child_)
            self.Pack = obj_
            obj_.original_tagname_ = 'Pack'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType.factory()
            obj_.build(child_)
            self.PhysicalDetails.append(obj_)
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'MarksAndNumbersCollection':
            obj_ = MarksAndNumbersCollectionType.factory()
            obj_.build(child_)
            self.MarksAndNumbersCollection.append(obj_)
            obj_.original_tagname_ = 'MarksAndNumbersCollection'
        elif nodeName_ == 'PalletInformation':
            obj_ = PalletInformationType.factory()
            obj_.build(child_)
            self.PalletInformation.append(obj_)
            obj_.original_tagname_ = 'PalletInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType95.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType97.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType101.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType103.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType116.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType123.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType137.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Packaging':
            obj_ = PackagingType.factory()
            obj_.build(child_)
            self.Packaging.append(obj_)
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevelType.factory()
            obj_.build(child_)
            self.ItemLevel.append(obj_)
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevelType260.factory()
            obj_.build(child_)
            self.PackLevel.append(obj_)
            obj_.original_tagname_ = 'PackLevel'
# end class PackLevelType89


class PackType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackLevelType=None, ShippingSerialID=None, CarrierPackageID=None):
        self.original_tagname_ = None
        self.PackLevelType = PackLevelType
        self.validate_PackLevelTypeType(self.PackLevelType)
        self.ShippingSerialID = ShippingSerialID
        self.CarrierPackageID = CarrierPackageID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackType.subclass:
            return PackType.subclass(*args_, **kwargs_)
        else:
            return PackType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackLevelType(self): return self.PackLevelType
    def set_PackLevelType(self, PackLevelType): self.PackLevelType = PackLevelType
    def get_ShippingSerialID(self): return self.ShippingSerialID
    def set_ShippingSerialID(self, ShippingSerialID): self.ShippingSerialID = ShippingSerialID
    def get_CarrierPackageID(self): return self.CarrierPackageID
    def set_CarrierPackageID(self, CarrierPackageID): self.CarrierPackageID = CarrierPackageID
    def validate_PackLevelTypeType(self, value):
        # Validate type PackLevelTypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['P', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackLevelTypeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackLevelType is not None or
            self.ShippingSerialID is not None or
            self.CarrierPackageID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackLevelType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackLevelType>%s</%sPackLevelType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackLevelType), input_name='PackLevelType')), namespace_, eol_))
        if self.ShippingSerialID is not None:
            self.ShippingSerialID.export(outfile, level, namespace_, name_='ShippingSerialID', pretty_print=pretty_print)
        if self.CarrierPackageID is not None:
            self.CarrierPackageID.export(outfile, level, namespace_, name_='CarrierPackageID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackLevelType':
            PackLevelType_ = child_.text
            PackLevelType_ = self.gds_validate_string(PackLevelType_, node, 'PackLevelType')
            self.PackLevelType = PackLevelType_
            # validate type PackLevelTypeType
            self.validate_PackLevelTypeType(self.PackLevelType)
        elif nodeName_ == 'ShippingSerialID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShippingSerialID = obj_
            obj_.original_tagname_ = 'ShippingSerialID'
        elif nodeName_ == 'CarrierPackageID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierPackageID = obj_
            obj_.original_tagname_ = 'CarrierPackageID'
# end class PackType


class PhysicalDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.validate_PackQualifierType(self.PackQualifier)
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.validate_PackUOMType(self.PackUOM)
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType90(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType91(self.PackingMaterial)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType92(self.WeightQualifier)
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.validate_PackWeightUOMType(self.PackWeightUOM)
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.validate_PackVolumeUOMType(self.PackVolumeUOM)
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.validate_PackDimensionUOMType(self.PackDimensionUOM)
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType.subclass:
            return PhysicalDetailsType.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def validate_PackQualifierType(self, value):
        # Validate type PackQualifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackQualifierType' % {"value" : value.encode("utf-8")} )
    def validate_PackUOMType(self, value):
        # Validate type PackUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackUOMType' % {"value" : value.encode("utf-8")} )
    def validate_PackingMediumType90(self, value):
        # Validate type PackingMediumType90, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType90' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType91(self, value):
        # Validate type PackingMaterialType91, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType91' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType92(self, value):
        # Validate type WeightQualifierType92, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType92' % {"value" : value.encode("utf-8")} )
    def validate_PackWeightUOMType(self, value):
        # Validate type PackWeightUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackWeightUOMType' % {"value" : value.encode("utf-8")} )
    def validate_PackVolumeUOMType(self, value):
        # Validate type PackVolumeUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackVolumeUOMType' % {"value" : value.encode("utf-8")} )
    def validate_PackDimensionUOMType(self, value):
        # Validate type PackDimensionUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackDimensionUOMType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackQualifier>%s</%sPackQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackQualifier), input_name='PackQualifier')), namespace_, eol_))
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackUOM>%s</%sPackUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackUOM), input_name='PackUOM')), namespace_, eol_))
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeightUOM>%s</%sPackWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeightUOM), input_name='PackWeightUOM')), namespace_, eol_))
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolumeUOM>%s</%sPackVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolumeUOM), input_name='PackVolumeUOM')), namespace_, eol_))
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackDimensionUOM>%s</%sPackDimensionUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackDimensionUOM), input_name='PackDimensionUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            PackQualifier_ = child_.text
            PackQualifier_ = self.gds_validate_string(PackQualifier_, node, 'PackQualifier')
            self.PackQualifier = PackQualifier_
            # validate type PackQualifierType
            self.validate_PackQualifierType(self.PackQualifier)
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            PackUOM_ = child_.text
            PackUOM_ = self.gds_validate_string(PackUOM_, node, 'PackUOM')
            self.PackUOM = PackUOM_
            # validate type PackUOMType
            self.validate_PackUOMType(self.PackUOM)
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType90
            self.validate_PackingMediumType90(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType91
            self.validate_PackingMaterialType91(self.PackingMaterial)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType92
            self.validate_WeightQualifierType92(self.WeightQualifier)
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            PackWeightUOM_ = child_.text
            PackWeightUOM_ = self.gds_validate_string(PackWeightUOM_, node, 'PackWeightUOM')
            self.PackWeightUOM = PackWeightUOM_
            # validate type PackWeightUOMType
            self.validate_PackWeightUOMType(self.PackWeightUOM)
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            PackVolumeUOM_ = child_.text
            PackVolumeUOM_ = self.gds_validate_string(PackVolumeUOM_, node, 'PackVolumeUOM')
            self.PackVolumeUOM = PackVolumeUOM_
            # validate type PackVolumeUOMType
            self.validate_PackVolumeUOMType(self.PackVolumeUOM)
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            PackDimensionUOM_ = child_.text
            PackDimensionUOM_ = self.gds_validate_string(PackDimensionUOM_, node, 'PackDimensionUOM')
            self.PackDimensionUOM = PackDimensionUOM_
            # validate type PackDimensionUOMType
            self.validate_PackDimensionUOMType(self.PackDimensionUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType


class MarksAndNumbersCollectionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MarksAndNumbersQualifier1=None, MarksAndNumbers1=None):
        self.original_tagname_ = None
        self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
        self.validate_MarksAndNumbersQualifier1Type(self.MarksAndNumbersQualifier1)
        self.MarksAndNumbers1 = MarksAndNumbers1
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarksAndNumbersCollectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarksAndNumbersCollectionType.subclass:
            return MarksAndNumbersCollectionType.subclass(*args_, **kwargs_)
        else:
            return MarksAndNumbersCollectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarksAndNumbersQualifier1(self): return self.MarksAndNumbersQualifier1
    def set_MarksAndNumbersQualifier1(self, MarksAndNumbersQualifier1): self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
    def get_MarksAndNumbers1(self): return self.MarksAndNumbers1
    def set_MarksAndNumbers1(self, MarksAndNumbers1): self.MarksAndNumbers1 = MarksAndNumbers1
    def validate_MarksAndNumbersQualifier1Type(self, value):
        # Validate type MarksAndNumbersQualifier1Type, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CA', 'SI', 'UC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MarksAndNumbersQualifier1Type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MarksAndNumbersQualifier1 is not None or
            self.MarksAndNumbers1 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MarksAndNumbersCollectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MarksAndNumbersCollectionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MarksAndNumbersCollectionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarksAndNumbersQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarksAndNumbersQualifier1>%s</%sMarksAndNumbersQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MarksAndNumbersQualifier1), input_name='MarksAndNumbersQualifier1')), namespace_, eol_))
        if self.MarksAndNumbers1 is not None:
            self.MarksAndNumbers1.export(outfile, level, namespace_, name_='MarksAndNumbers1', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarksAndNumbersQualifier1':
            MarksAndNumbersQualifier1_ = child_.text
            MarksAndNumbersQualifier1_ = self.gds_validate_string(MarksAndNumbersQualifier1_, node, 'MarksAndNumbersQualifier1')
            self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1_
            # validate type MarksAndNumbersQualifier1Type
            self.validate_MarksAndNumbersQualifier1Type(self.MarksAndNumbersQualifier1)
        elif nodeName_ == 'MarksAndNumbers1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MarksAndNumbers1 = obj_
            obj_.original_tagname_ = 'MarksAndNumbers1'
# end class MarksAndNumbersCollectionType


class PalletInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PalletQualifier=None, PalletValue=None, PalletTypeCode=None, PalletTiers=None, PalletBlocks=None, UnitWeight=None, UnitWeightUOM=None, Length=None, Width=None, Height=None, UnitOfMeasure=None, WeightQualifier=None, PalletWeight=None, PalletWeightUOM=None, PalletVolume=None, PalletVolumeUOM=None, PalletExchangeCode=None, PalletStructureCode=None):
        self.original_tagname_ = None
        self.PalletQualifier = PalletQualifier
        self.validate_PalletQualifierType(self.PalletQualifier)
        self.PalletValue = PalletValue
        self.PalletTypeCode = PalletTypeCode
        self.validate_PalletTypeCodeType(self.PalletTypeCode)
        self.PalletTiers = PalletTiers
        self.PalletBlocks = PalletBlocks
        self.UnitWeight = UnitWeight
        self.UnitWeightUOM = UnitWeightUOM
        self.validate_UnitWeightUOMType(self.UnitWeightUOM)
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.UnitOfMeasure = UnitOfMeasure
        self.validate_UnitOfMeasureType(self.UnitOfMeasure)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType93(self.WeightQualifier)
        self.PalletWeight = PalletWeight
        self.PalletWeightUOM = PalletWeightUOM
        self.validate_PalletWeightUOMType(self.PalletWeightUOM)
        self.PalletVolume = PalletVolume
        self.PalletVolumeUOM = PalletVolumeUOM
        self.validate_PalletVolumeUOMType(self.PalletVolumeUOM)
        self.PalletExchangeCode = PalletExchangeCode
        self.validate_PalletExchangeCodeType94(self.PalletExchangeCode)
        self.PalletStructureCode = PalletStructureCode
        self.validate_PalletStructureCodeType(self.PalletStructureCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletInformationType.subclass:
            return PalletInformationType.subclass(*args_, **kwargs_)
        else:
            return PalletInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletQualifier(self): return self.PalletQualifier
    def set_PalletQualifier(self, PalletQualifier): self.PalletQualifier = PalletQualifier
    def get_PalletValue(self): return self.PalletValue
    def set_PalletValue(self, PalletValue): self.PalletValue = PalletValue
    def get_PalletTypeCode(self): return self.PalletTypeCode
    def set_PalletTypeCode(self, PalletTypeCode): self.PalletTypeCode = PalletTypeCode
    def get_PalletTiers(self): return self.PalletTiers
    def set_PalletTiers(self, PalletTiers): self.PalletTiers = PalletTiers
    def get_PalletBlocks(self): return self.PalletBlocks
    def set_PalletBlocks(self, PalletBlocks): self.PalletBlocks = PalletBlocks
    def get_UnitWeight(self): return self.UnitWeight
    def set_UnitWeight(self, UnitWeight): self.UnitWeight = UnitWeight
    def get_UnitWeightUOM(self): return self.UnitWeightUOM
    def set_UnitWeightUOM(self, UnitWeightUOM): self.UnitWeightUOM = UnitWeightUOM
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PalletWeight(self): return self.PalletWeight
    def set_PalletWeight(self, PalletWeight): self.PalletWeight = PalletWeight
    def get_PalletWeightUOM(self): return self.PalletWeightUOM
    def set_PalletWeightUOM(self, PalletWeightUOM): self.PalletWeightUOM = PalletWeightUOM
    def get_PalletVolume(self): return self.PalletVolume
    def set_PalletVolume(self, PalletVolume): self.PalletVolume = PalletVolume
    def get_PalletVolumeUOM(self): return self.PalletVolumeUOM
    def set_PalletVolumeUOM(self, PalletVolumeUOM): self.PalletVolumeUOM = PalletVolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def get_PalletStructureCode(self): return self.PalletStructureCode
    def set_PalletStructureCode(self, PalletStructureCode): self.PalletStructureCode = PalletStructureCode
    def validate_PalletQualifierType(self, value):
        # Validate type PalletQualifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletQualifierType' % {"value" : value.encode("utf-8")} )
    def validate_PalletTypeCodeType(self, value):
        # Validate type PalletTypeCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '10', '11', '3', '4', '5', '6', '7', '8']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletTypeCodeType' % {"value" : value.encode("utf-8")} )
    def validate_UnitWeightUOMType(self, value):
        # Validate type UnitWeightUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitWeightUOMType' % {"value" : value.encode("utf-8")} )
    def validate_UnitOfMeasureType(self, value):
        # Validate type UnitOfMeasureType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitOfMeasureType' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType93(self, value):
        # Validate type WeightQualifierType93, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType93' % {"value" : value.encode("utf-8")} )
    def validate_PalletWeightUOMType(self, value):
        # Validate type PalletWeightUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletWeightUOMType' % {"value" : value.encode("utf-8")} )
    def validate_PalletVolumeUOMType(self, value):
        # Validate type PalletVolumeUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletVolumeUOMType' % {"value" : value.encode("utf-8")} )
    def validate_PalletExchangeCodeType94(self, value):
        # Validate type PalletExchangeCodeType94, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletExchangeCodeType94' % {"value" : value.encode("utf-8")} )
    def validate_PalletStructureCodeType(self, value):
        # Validate type PalletStructureCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'B', 'C', 'S']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletStructureCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PalletQualifier is not None or
            self.PalletValue is not None or
            self.PalletTypeCode is not None or
            self.PalletTiers is not None or
            self.PalletBlocks is not None or
            self.UnitWeight is not None or
            self.UnitWeightUOM is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.UnitOfMeasure is not None or
            self.WeightQualifier is not None or
            self.PalletWeight is not None or
            self.PalletWeightUOM is not None or
            self.PalletVolume is not None or
            self.PalletVolumeUOM is not None or
            self.PalletExchangeCode is not None or
            self.PalletStructureCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PalletInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PalletInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PalletInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PalletInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletQualifier>%s</%sPalletQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletQualifier), input_name='PalletQualifier')), namespace_, eol_))
        if self.PalletValue is not None:
            self.PalletValue.export(outfile, level, namespace_, name_='PalletValue', pretty_print=pretty_print)
        if self.PalletTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletTypeCode>%s</%sPalletTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletTypeCode), input_name='PalletTypeCode')), namespace_, eol_))
        if self.PalletTiers is not None:
            self.PalletTiers.export(outfile, level, namespace_, name_='PalletTiers', pretty_print=pretty_print)
        if self.PalletBlocks is not None:
            self.PalletBlocks.export(outfile, level, namespace_, name_='PalletBlocks', pretty_print=pretty_print)
        if self.UnitWeight is not None:
            self.UnitWeight.export(outfile, level, namespace_, name_='UnitWeight', pretty_print=pretty_print)
        if self.UnitWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitWeightUOM>%s</%sUnitWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitWeightUOM), input_name='UnitWeightUOM')), namespace_, eol_))
        if self.Length is not None:
            self.Length.export(outfile, level, namespace_, name_='Length', pretty_print=pretty_print)
        if self.Width is not None:
            self.Width.export(outfile, level, namespace_, name_='Width', pretty_print=pretty_print)
        if self.Height is not None:
            self.Height.export(outfile, level, namespace_, name_='Height', pretty_print=pretty_print)
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitOfMeasure), input_name='UnitOfMeasure')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PalletWeight is not None:
            self.PalletWeight.export(outfile, level, namespace_, name_='PalletWeight', pretty_print=pretty_print)
        if self.PalletWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletWeightUOM>%s</%sPalletWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletWeightUOM), input_name='PalletWeightUOM')), namespace_, eol_))
        if self.PalletVolume is not None:
            self.PalletVolume.export(outfile, level, namespace_, name_='PalletVolume', pretty_print=pretty_print)
        if self.PalletVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletVolumeUOM>%s</%sPalletVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletVolumeUOM), input_name='PalletVolumeUOM')), namespace_, eol_))
        if self.PalletExchangeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletExchangeCode>%s</%sPalletExchangeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletExchangeCode), input_name='PalletExchangeCode')), namespace_, eol_))
        if self.PalletStructureCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletStructureCode>%s</%sPalletStructureCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletStructureCode), input_name='PalletStructureCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletQualifier':
            PalletQualifier_ = child_.text
            PalletQualifier_ = self.gds_validate_string(PalletQualifier_, node, 'PalletQualifier')
            self.PalletQualifier = PalletQualifier_
            # validate type PalletQualifierType
            self.validate_PalletQualifierType(self.PalletQualifier)
        elif nodeName_ == 'PalletValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletValue = obj_
            obj_.original_tagname_ = 'PalletValue'
        elif nodeName_ == 'PalletTypeCode':
            PalletTypeCode_ = child_.text
            PalletTypeCode_ = self.gds_validate_string(PalletTypeCode_, node, 'PalletTypeCode')
            self.PalletTypeCode = PalletTypeCode_
            # validate type PalletTypeCodeType
            self.validate_PalletTypeCodeType(self.PalletTypeCode)
        elif nodeName_ == 'PalletTiers':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTiers = obj_
            obj_.original_tagname_ = 'PalletTiers'
        elif nodeName_ == 'PalletBlocks':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletBlocks = obj_
            obj_.original_tagname_ = 'PalletBlocks'
        elif nodeName_ == 'UnitWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeight = obj_
            obj_.original_tagname_ = 'UnitWeight'
        elif nodeName_ == 'UnitWeightUOM':
            UnitWeightUOM_ = child_.text
            UnitWeightUOM_ = self.gds_validate_string(UnitWeightUOM_, node, 'UnitWeightUOM')
            self.UnitWeightUOM = UnitWeightUOM_
            # validate type UnitWeightUOMType
            self.validate_UnitWeightUOMType(self.UnitWeightUOM)
        elif nodeName_ == 'Length':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Length = obj_
            obj_.original_tagname_ = 'Length'
        elif nodeName_ == 'Width':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Width = obj_
            obj_.original_tagname_ = 'Width'
        elif nodeName_ == 'Height':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Height = obj_
            obj_.original_tagname_ = 'Height'
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
            # validate type UnitOfMeasureType
            self.validate_UnitOfMeasureType(self.UnitOfMeasure)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType93
            self.validate_WeightQualifierType93(self.WeightQualifier)
        elif nodeName_ == 'PalletWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeight = obj_
            obj_.original_tagname_ = 'PalletWeight'
        elif nodeName_ == 'PalletWeightUOM':
            PalletWeightUOM_ = child_.text
            PalletWeightUOM_ = self.gds_validate_string(PalletWeightUOM_, node, 'PalletWeightUOM')
            self.PalletWeightUOM = PalletWeightUOM_
            # validate type PalletWeightUOMType
            self.validate_PalletWeightUOMType(self.PalletWeightUOM)
        elif nodeName_ == 'PalletVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolume = obj_
            obj_.original_tagname_ = 'PalletVolume'
        elif nodeName_ == 'PalletVolumeUOM':
            PalletVolumeUOM_ = child_.text
            PalletVolumeUOM_ = self.gds_validate_string(PalletVolumeUOM_, node, 'PalletVolumeUOM')
            self.PalletVolumeUOM = PalletVolumeUOM_
            # validate type PalletVolumeUOMType
            self.validate_PalletVolumeUOMType(self.PalletVolumeUOM)
        elif nodeName_ == 'PalletExchangeCode':
            PalletExchangeCode_ = child_.text
            PalletExchangeCode_ = self.gds_validate_string(PalletExchangeCode_, node, 'PalletExchangeCode')
            self.PalletExchangeCode = PalletExchangeCode_
            # validate type PalletExchangeCodeType94
            self.validate_PalletExchangeCodeType94(self.PalletExchangeCode)
        elif nodeName_ == 'PalletStructureCode':
            PalletStructureCode_ = child_.text
            PalletStructureCode_ = self.gds_validate_string(PalletStructureCode_, node, 'PalletStructureCode')
            self.PalletStructureCode = PalletStructureCode_
            # validate type PalletStructureCodeType
            self.validate_PalletStructureCodeType(self.PalletStructureCode)
# end class PalletInformationType


class DateType95(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type96(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType95)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType95.subclass:
            return DateType95.subclass(*args_, **kwargs_)
        else:
            return DateType95(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type96(self, value):
        # Validate type DateTimeQualifier1Type96, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type96' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType95', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType95')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType95', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType95'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType95', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type96
            self.validate_DateTimeQualifier1Type96(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType95


class ReferenceType97(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType98(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType97)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType97.subclass:
            return ReferenceType97.subclass(*args_, **kwargs_)
        else:
            return ReferenceType97(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType98(self, value):
        # Validate type ReferenceQualType98, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType98' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType97', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType97')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType97', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType97'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType97', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType98
            self.validate_ReferenceQualType98(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType99.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType97


class ReferenceIDsType99(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType100(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType99)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType99.subclass:
            return ReferenceIDsType99.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType99(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType100(self, value):
        # Validate type ReferenceQualType100, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType100' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType99', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType99')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType99', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType99'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType99', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType100
            self.validate_ReferenceQualType100(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType99


class NotesType101(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType102(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType101)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType101.subclass:
            return NotesType101.subclass(*args_, **kwargs_)
        else:
            return NotesType101(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType102(self, value):
        # Validate type NoteCodeType102, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType102' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType101', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType101')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType101', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType101'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType101', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType102
            self.validate_NoteCodeType102(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType101


class AddressType103(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType104(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType105(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType103)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType103.subclass:
            return AddressType103.subclass(*args_, **kwargs_)
        else:
            return AddressType103(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType104(self, value):
        # Validate type AddressTypeCodeType104, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType104' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType105(self, value):
        # Validate type LocationCodeQualifierType105, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType105' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType103', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType103')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType103', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType103'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType103', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType104
            self.validate_AddressTypeCodeType104(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType105
            self.validate_LocationCodeQualifierType105(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType106.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType110.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType114.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType103


class ReferenceType106(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType107(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType106)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType106.subclass:
            return ReferenceType106.subclass(*args_, **kwargs_)
        else:
            return ReferenceType106(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType107(self, value):
        # Validate type ReferenceQualType107, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType107' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType106', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType106')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType106', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType106'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType106', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType107
            self.validate_ReferenceQualType107(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType108.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType106


class ReferenceIDsType108(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType109(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType108)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType108.subclass:
            return ReferenceIDsType108.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType108(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType109(self, value):
        # Validate type ReferenceQualType109, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType109' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType108', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType108')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType108', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType108'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType108', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType109
            self.validate_ReferenceQualType109(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType108


class ContactType110(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType111(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType110)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType110.subclass:
            return ContactType110.subclass(*args_, **kwargs_)
        else:
            return ContactType110(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType111(self, value):
        # Validate type ContactTypeCodeType111, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType111' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType110', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType110')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType110', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType110'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType110', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType111
            self.validate_ContactTypeCodeType111(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType112.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType110


class AdditionalContactDetailsType112(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType113(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType112)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType112.subclass:
            return AdditionalContactDetailsType112.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType112(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType113(self, value):
        # Validate type ContactQualType113, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType113' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType112', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType112')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType112', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType112'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType112', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType113
            self.validate_ContactQualType113(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType112


class DateType114(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type115(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType114)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType114.subclass:
            return DateType114.subclass(*args_, **kwargs_)
        else:
            return DateType114(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type115(self, value):
        # Validate type DateTimeQualifier1Type115, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type115' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType114', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType114')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType114', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType114'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType114', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type115
            self.validate_DateTimeQualifier1Type115(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType114


class TaxType116(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType117(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType118(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType119(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType120(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType121(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType122(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType116)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType116.subclass:
            return TaxType116.subclass(*args_, **kwargs_)
        else:
            return TaxType116(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType117(self, value):
        # Validate type TaxTypeCodeType117, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType117' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType118(self, value):
        # Validate type TaxPercentQualType118, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType118' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType119(self, value):
        # Validate type JurisdictionQualType119, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType119' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType120(self, value):
        # Validate type TaxExemptCodeType120, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType120' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType121(self, value):
        # Validate type RelationshipCodeType121, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType121' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType122(self, value):
        # Validate type TaxHandlingCodeType122, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType122' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType116', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType116')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType116', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType116'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType116', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType117
            self.validate_TaxTypeCodeType117(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType118
            self.validate_TaxPercentQualType118(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType119
            self.validate_JurisdictionQualType119(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType120
            self.validate_TaxExemptCodeType120(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType121
            self.validate_RelationshipCodeType121(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType122
            self.validate_TaxHandlingCodeType122(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType116


class ChargesAllowancesType123(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType124(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType125(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType126(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType127(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType128(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType129(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType123)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType123.subclass:
            return ChargesAllowancesType123.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType123(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType124(self, value):
        # Validate type AllowChrgIndicatorType124, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType124' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType125(self, value):
        # Validate type AllowChrgCodeType125, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType125' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType126(self, value):
        # Validate type AllowChrgAgencyCodeType126, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType126' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType127(self, value):
        # Validate type AllowChrgPercentQualType127, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType127' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType128(self, value):
        # Validate type AllowChrgQtyUOMType128, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType128' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType129(self, value):
        # Validate type AllowChrgHandlingCodeType129, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType129' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType123', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType123')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType123', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType123'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType123', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType124
            self.validate_AllowChrgIndicatorType124(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType125
            self.validate_AllowChrgCodeType125(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType126
            self.validate_AllowChrgAgencyCodeType126(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType127
            self.validate_AllowChrgPercentQualType127(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType128
            self.validate_AllowChrgQtyUOMType128(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType129
            self.validate_AllowChrgHandlingCodeType129(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType130.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType123


class TaxType130(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType131(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType132(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType133(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType134(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType135(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType136(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType130)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType130.subclass:
            return TaxType130.subclass(*args_, **kwargs_)
        else:
            return TaxType130(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType131(self, value):
        # Validate type TaxTypeCodeType131, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType131' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType132(self, value):
        # Validate type TaxPercentQualType132, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType132' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType133(self, value):
        # Validate type JurisdictionQualType133, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType133' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType134(self, value):
        # Validate type TaxExemptCodeType134, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType134' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType135(self, value):
        # Validate type RelationshipCodeType135, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType135' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType136(self, value):
        # Validate type TaxHandlingCodeType136, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType136' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType130', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType130')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType130', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType130'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType130', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType131
            self.validate_TaxTypeCodeType131(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType132
            self.validate_TaxPercentQualType132(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType133
            self.validate_JurisdictionQualType133(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType134
            self.validate_TaxExemptCodeType134(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType135
            self.validate_RelationshipCodeType135(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType136
            self.validate_TaxHandlingCodeType136(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType130


class CarrierInformationType137(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType138(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType139(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType140(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType141(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType142(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType143(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType144(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType145(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType137)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType137.subclass:
            return CarrierInformationType137.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType137(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType138(self, value):
        # Validate type StatusCodeType138, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType138' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType139(self, value):
        # Validate type CarrierTransMethodCodeType139, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType139' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType140(self, value):
        # Validate type EquipmentDescriptionCodeType140, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType140' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType141(self, value):
        # Validate type SealStatusCodeType141, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType141' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType142(self, value):
        # Validate type OwnershipCodeType142, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType142' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType143(self, value):
        # Validate type RoutingSequenceCodeType143, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType143' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType144(self, value):
        # Validate type TransitDirectionCodeType144, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType144' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType145(self, value):
        # Validate type TransitTimeQualType145, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType145' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType137', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType137')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType137', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType137'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType137', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType138
            self.validate_StatusCodeType138(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType139
            self.validate_CarrierTransMethodCodeType139(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType140
            self.validate_EquipmentDescriptionCodeType140(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType141
            self.validate_SealStatusCodeType141(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType142
            self.validate_OwnershipCodeType142(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType143
            self.validate_RoutingSequenceCodeType143(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType144
            self.validate_TransitDirectionCodeType144(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType145
            self.validate_TransitTimeQualType145(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType146.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType148.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType137


class ServiceLevelCodesType146(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType147(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType146)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType146.subclass:
            return ServiceLevelCodesType146.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType146(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType147(self, value):
        # Validate type ServiceLevelCodeType147, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType147' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType146', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType146')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType146', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType146'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType146', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType147
            self.validate_ServiceLevelCodeType147(self.ServiceLevelCode)
# end class ServiceLevelCodesType146


class AddressType148(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType149(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType150(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType148)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType148.subclass:
            return AddressType148.subclass(*args_, **kwargs_)
        else:
            return AddressType148(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType149(self, value):
        # Validate type AddressTypeCodeType149, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType149' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType150(self, value):
        # Validate type LocationCodeQualifierType150, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType150' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType148', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType148')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType148', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType148'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType148', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType149
            self.validate_AddressTypeCodeType149(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType150
            self.validate_LocationCodeQualifierType150(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType151.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType148


class DateType151(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type152(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType151)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType151.subclass:
            return DateType151.subclass(*args_, **kwargs_)
        else:
            return DateType151(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type152(self, value):
        # Validate type DateTimeQualifier1Type152, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type152' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType151', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType151')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType151', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType151'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType151', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type152
            self.validate_DateTimeQualifier1Type152(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType151


class PackagingType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, PackagingCharacteristicCode=None, AgencyQualifierCode=None, PackagingDescriptionCode=None, PackagingDescription=None, UnitLoadOptionCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType(self.ItemDescriptionType)
        self.PackagingCharacteristicCode = PackagingCharacteristicCode
        self.validate_PackagingCharacteristicCodeType(self.PackagingCharacteristicCode)
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType(self.AgencyQualifierCode)
        self.PackagingDescriptionCode = PackagingDescriptionCode
        self.PackagingDescription = PackagingDescription
        self.UnitLoadOptionCode = UnitLoadOptionCode
        self.validate_UnitLoadOptionCodeType(self.UnitLoadOptionCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingType.subclass:
            return PackagingType.subclass(*args_, **kwargs_)
        else:
            return PackagingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_PackagingCharacteristicCode(self): return self.PackagingCharacteristicCode
    def set_PackagingCharacteristicCode(self, PackagingCharacteristicCode): self.PackagingCharacteristicCode = PackagingCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_PackagingDescriptionCode(self): return self.PackagingDescriptionCode
    def set_PackagingDescriptionCode(self, PackagingDescriptionCode): self.PackagingDescriptionCode = PackagingDescriptionCode
    def get_PackagingDescription(self): return self.PackagingDescription
    def set_PackagingDescription(self, PackagingDescription): self.PackagingDescription = PackagingDescription
    def get_UnitLoadOptionCode(self): return self.UnitLoadOptionCode
    def set_UnitLoadOptionCode(self, UnitLoadOptionCode): self.UnitLoadOptionCode = UnitLoadOptionCode
    def validate_ItemDescriptionTypeType(self, value):
        # Validate type ItemDescriptionTypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType' % {"value" : value.encode("utf-8")} )
    def validate_PackagingCharacteristicCodeType(self, value):
        # Validate type PackagingCharacteristicCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['10', '34', '35', '36', 'HZ', 'PK']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackagingCharacteristicCodeType' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType(self, value):
        # Validate type AgencyQualifierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType' % {"value" : value.encode("utf-8")} )
    def validate_UnitLoadOptionCodeType(self, value):
        # Validate type UnitLoadOptionCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitLoadOptionCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.PackagingCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.PackagingDescriptionCode is not None or
            self.PackagingDescription is not None or
            self.UnitLoadOptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackagingType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackagingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackagingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackagingType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackagingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.PackagingCharacteristicCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingCharacteristicCode>%s</%sPackagingCharacteristicCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackagingCharacteristicCode), input_name='PackagingCharacteristicCode')), namespace_, eol_))
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.PackagingDescriptionCode is not None:
            self.PackagingDescriptionCode.export(outfile, level, namespace_, name_='PackagingDescriptionCode', pretty_print=pretty_print)
        if self.PackagingDescription is not None:
            self.PackagingDescription.export(outfile, level, namespace_, name_='PackagingDescription', pretty_print=pretty_print)
        if self.UnitLoadOptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitLoadOptionCode>%s</%sUnitLoadOptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitLoadOptionCode), input_name='UnitLoadOptionCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType
            self.validate_ItemDescriptionTypeType(self.ItemDescriptionType)
        elif nodeName_ == 'PackagingCharacteristicCode':
            PackagingCharacteristicCode_ = child_.text
            PackagingCharacteristicCode_ = self.gds_validate_string(PackagingCharacteristicCode_, node, 'PackagingCharacteristicCode')
            self.PackagingCharacteristicCode = PackagingCharacteristicCode_
            # validate type PackagingCharacteristicCodeType
            self.validate_PackagingCharacteristicCodeType(self.PackagingCharacteristicCode)
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType
            self.validate_AgencyQualifierCodeType(self.AgencyQualifierCode)
        elif nodeName_ == 'PackagingDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescriptionCode = obj_
            obj_.original_tagname_ = 'PackagingDescriptionCode'
        elif nodeName_ == 'PackagingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescription = obj_
            obj_.original_tagname_ = 'PackagingDescription'
        elif nodeName_ == 'UnitLoadOptionCode':
            UnitLoadOptionCode_ = child_.text
            UnitLoadOptionCode_ = self.gds_validate_string(UnitLoadOptionCode_, node, 'UnitLoadOptionCode')
            self.UnitLoadOptionCode = UnitLoadOptionCode_
            # validate type UnitLoadOptionCodeType
            self.validate_UnitLoadOptionCodeType(self.UnitLoadOptionCode)
# end class PackagingType


class ItemLevelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentLine=None, PhysicalDetails=None, CarrierSpecialHandlingDetail=None, CarrierInformation=None, Measurements=None, PriceInformation=None, ProductOrItemDescription=None, MasterItemAttribute=None, Date=None, Reference=None, Notes=None, Commodity=None, Address=None, Sublines=None, Tax=None, ChargesAllowances=None, ItemLoadInfo=None, PackLevel=None):
        self.original_tagname_ = None
        self.ShipmentLine = ShipmentLine
        if PhysicalDetails is None:
            self.PhysicalDetails = []
        else:
            self.PhysicalDetails = PhysicalDetails
        if CarrierSpecialHandlingDetail is None:
            self.CarrierSpecialHandlingDetail = []
        else:
            self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if MasterItemAttribute is None:
            self.MasterItemAttribute = []
        else:
            self.MasterItemAttribute = MasterItemAttribute
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        self.Sublines = Sublines
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if ItemLoadInfo is None:
            self.ItemLoadInfo = []
        else:
            self.ItemLoadInfo = ItemLoadInfo
        if PackLevel is None:
            self.PackLevel = []
        else:
            self.PackLevel = PackLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLevelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLevelType.subclass:
            return ItemLevelType.subclass(*args_, **kwargs_)
        else:
            return ItemLevelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentLine(self): return self.ShipmentLine
    def set_ShipmentLine(self, ShipmentLine): self.ShipmentLine = ShipmentLine
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def add_PhysicalDetails(self, value): self.PhysicalDetails.append(value)
    def insert_PhysicalDetails_at(self, index, value): self.PhysicalDetails.insert(index, value)
    def replace_PhysicalDetails_at(self, index, value): self.PhysicalDetails[index] = value
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def add_CarrierSpecialHandlingDetail(self, value): self.CarrierSpecialHandlingDetail.append(value)
    def insert_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail.insert(index, value)
    def replace_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def add_MasterItemAttribute(self, value): self.MasterItemAttribute.append(value)
    def insert_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute.insert(index, value)
    def replace_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Sublines(self): return self.Sublines
    def set_Sublines(self, Sublines): self.Sublines = Sublines
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_ItemLoadInfo(self): return self.ItemLoadInfo
    def set_ItemLoadInfo(self, ItemLoadInfo): self.ItemLoadInfo = ItemLoadInfo
    def add_ItemLoadInfo(self, value): self.ItemLoadInfo.append(value)
    def insert_ItemLoadInfo_at(self, index, value): self.ItemLoadInfo.insert(index, value)
    def replace_ItemLoadInfo_at(self, index, value): self.ItemLoadInfo[index] = value
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def add_PackLevel(self, value): self.PackLevel.append(value)
    def insert_PackLevel_at(self, index, value): self.PackLevel.insert(index, value)
    def replace_PackLevel_at(self, index, value): self.PackLevel[index] = value
    def hasContent_(self):
        if (
            self.ShipmentLine is not None or
            self.PhysicalDetails or
            self.CarrierSpecialHandlingDetail or
            self.CarrierInformation or
            self.Measurements or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.MasterItemAttribute or
            self.Date or
            self.Reference or
            self.Notes or
            self.Commodity or
            self.Address or
            self.Sublines is not None or
            self.Tax or
            self.ChargesAllowances or
            self.ItemLoadInfo or
            self.PackLevel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLevelType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLevelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLevelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLevelType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLevelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentLine is not None:
            self.ShipmentLine.export(outfile, level, namespace_, name_='ShipmentLine', pretty_print=pretty_print)
        for PhysicalDetails_ in self.PhysicalDetails:
            PhysicalDetails_.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        for CarrierSpecialHandlingDetail_ in self.CarrierSpecialHandlingDetail:
            CarrierSpecialHandlingDetail_.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for MasterItemAttribute_ in self.MasterItemAttribute:
            MasterItemAttribute_.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Sublines is not None:
            self.Sublines.export(outfile, level, namespace_, name_='Sublines', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for ItemLoadInfo_ in self.ItemLoadInfo:
            ItemLoadInfo_.export(outfile, level, namespace_, name_='ItemLoadInfo', pretty_print=pretty_print)
        for PackLevel_ in self.PackLevel:
            PackLevel_.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentLine':
            obj_ = ShipmentLineType.factory()
            obj_.build(child_)
            self.ShipmentLine = obj_
            obj_.original_tagname_ = 'ShipmentLine'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType153.factory()
            obj_.build(child_)
            self.PhysicalDetails.append(obj_)
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType162.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail.append(obj_)
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType166.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType.factory()
            obj_.build(child_)
            self.MasterItemAttribute.append(obj_)
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'Date':
            obj_ = DateType190.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType192.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType196.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType198.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Address':
            obj_ = AddressType200.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Sublines':
            obj_ = SublinesType.factory()
            obj_.build(child_)
            self.Sublines = obj_
            obj_.original_tagname_ = 'Sublines'
        elif nodeName_ == 'Tax':
            obj_ = TaxType231.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType238.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'ItemLoadInfo':
            obj_ = ItemLoadInfoType.factory()
            obj_.build(child_)
            self.ItemLoadInfo.append(obj_)
            obj_.original_tagname_ = 'ItemLoadInfo'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel.append(obj_)
            obj_.original_tagname_ = 'PackLevel'
# end class ItemLevelType


class ShipmentLineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, OrderQty=None, OrderQtyUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, ItemStatusCode=None, ShipQty=None, ShipQtyUOM=None, ShipDate=None, QtyLeftToReceive=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, SellerDateCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.OrderQty = OrderQty
        self.OrderQtyUOM = OrderQtyUOM
        self.validate_OrderQtyUOMType(self.OrderQtyUOM)
        self.PurchasePriceType = PurchasePriceType
        self.validate_PurchasePriceTypeType(self.PurchasePriceType)
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.validate_PurchasePriceBasisType(self.PurchasePriceBasis)
        self.ItemStatusCode = ItemStatusCode
        self.validate_ItemStatusCodeType(self.ItemStatusCode)
        self.ShipQty = ShipQty
        self.ShipQtyUOM = ShipQtyUOM
        self.validate_ShipQtyUOMType(self.ShipQtyUOM)
        self.ShipDate = ShipDate
        self.QtyLeftToReceive = QtyLeftToReceive
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.SellerDateCode = SellerDateCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentLineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentLineType.subclass:
            return ShipmentLineType.subclass(*args_, **kwargs_)
        else:
            return ShipmentLineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_OrderQty(self): return self.OrderQty
    def set_OrderQty(self, OrderQty): self.OrderQty = OrderQty
    def get_OrderQtyUOM(self): return self.OrderQtyUOM
    def set_OrderQtyUOM(self, OrderQtyUOM): self.OrderQtyUOM = OrderQtyUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_ItemStatusCode(self): return self.ItemStatusCode
    def set_ItemStatusCode(self, ItemStatusCode): self.ItemStatusCode = ItemStatusCode
    def get_ShipQty(self): return self.ShipQty
    def set_ShipQty(self, ShipQty): self.ShipQty = ShipQty
    def get_ShipQtyUOM(self): return self.ShipQtyUOM
    def set_ShipQtyUOM(self, ShipQtyUOM): self.ShipQtyUOM = ShipQtyUOM
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_QtyLeftToReceive(self): return self.QtyLeftToReceive
    def set_QtyLeftToReceive(self, QtyLeftToReceive): self.QtyLeftToReceive = QtyLeftToReceive
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_SellerDateCode(self): return self.SellerDateCode
    def set_SellerDateCode(self, SellerDateCode): self.SellerDateCode = SellerDateCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def validate_OrderQtyUOMType(self, value):
        # Validate type OrderQtyUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OrderQtyUOMType' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceTypeType(self, value):
        # Validate type PurchasePriceTypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceTypeType' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceBasisType(self, value):
        # Validate type PurchasePriceBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceBasisType' % {"value" : value.encode("utf-8")} )
    def validate_ItemStatusCodeType(self, value):
        # Validate type ItemStatusCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'AR', 'BP', 'DR', 'IA', 'IB', 'IC', 'ID', 'IF', 'IH', 'IP', 'IQ', 'IR', 'IS', 'R1', 'R2', 'R4', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemStatusCodeType' % {"value" : value.encode("utf-8")} )
    def validate_ShipQtyUOMType(self, value):
        # Validate type ShipQtyUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipQtyUOMType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.OrderQty is not None or
            self.OrderQtyUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.ItemStatusCode is not None or
            self.ShipQty is not None or
            self.ShipQtyUOM is not None or
            self.ShipDate is not None or
            self.QtyLeftToReceive is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.SellerDateCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentLineType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentLineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentLineType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentLineType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentLineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.OrderQty is not None:
            self.OrderQty.export(outfile, level, namespace_, name_='OrderQty', pretty_print=pretty_print)
        if self.OrderQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderQtyUOM>%s</%sOrderQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OrderQtyUOM), input_name='OrderQtyUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.ItemStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemStatusCode>%s</%sItemStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemStatusCode), input_name='ItemStatusCode')), namespace_, eol_))
        if self.ShipQty is not None:
            self.ShipQty.export(outfile, level, namespace_, name_='ShipQty', pretty_print=pretty_print)
        if self.ShipQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipQtyUOM>%s</%sShipQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ShipQtyUOM), input_name='ShipQtyUOM')), namespace_, eol_))
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.QtyLeftToReceive is not None:
            self.QtyLeftToReceive.export(outfile, level, namespace_, name_='QtyLeftToReceive', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Class is not None:
            self.Class.export(outfile, level, namespace_, name_='Class', pretty_print=pretty_print)
        if self.SellerDateCode is not None:
            self.SellerDateCode.export(outfile, level, namespace_, name_='SellerDateCode', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'OrderQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQty = obj_
            obj_.original_tagname_ = 'OrderQty'
        elif nodeName_ == 'OrderQtyUOM':
            OrderQtyUOM_ = child_.text
            OrderQtyUOM_ = self.gds_validate_string(OrderQtyUOM_, node, 'OrderQtyUOM')
            self.OrderQtyUOM = OrderQtyUOM_
            # validate type OrderQtyUOMType
            self.validate_OrderQtyUOMType(self.OrderQtyUOM)
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
            # validate type PurchasePriceTypeType
            self.validate_PurchasePriceTypeType(self.PurchasePriceType)
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
            # validate type PurchasePriceBasisType
            self.validate_PurchasePriceBasisType(self.PurchasePriceBasis)
        elif nodeName_ == 'ItemStatusCode':
            ItemStatusCode_ = child_.text
            ItemStatusCode_ = self.gds_validate_string(ItemStatusCode_, node, 'ItemStatusCode')
            self.ItemStatusCode = ItemStatusCode_
            # validate type ItemStatusCodeType
            self.validate_ItemStatusCodeType(self.ItemStatusCode)
        elif nodeName_ == 'ShipQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQty = obj_
            obj_.original_tagname_ = 'ShipQty'
        elif nodeName_ == 'ShipQtyUOM':
            ShipQtyUOM_ = child_.text
            ShipQtyUOM_ = self.gds_validate_string(ShipQtyUOM_, node, 'ShipQtyUOM')
            self.ShipQtyUOM = ShipQtyUOM_
            # validate type ShipQtyUOMType
            self.validate_ShipQtyUOMType(self.ShipQtyUOM)
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'QtyLeftToReceive':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyLeftToReceive = obj_
            obj_.original_tagname_ = 'QtyLeftToReceive'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Class':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Class = obj_
            obj_.original_tagname_ = 'Class'
        elif nodeName_ == 'SellerDateCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellerDateCode = obj_
            obj_.original_tagname_ = 'SellerDateCode'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class ShipmentLineType


class ProductIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.validate_PartNumberQualType(self.PartNumberQual)
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType.subclass:
            return ProductIDType.subclass(*args_, **kwargs_)
        else:
            return ProductIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def validate_PartNumberQualType(self, value):
        # Validate type PartNumberQualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['B8', 'BO', 'CB', 'FU', 'IS', 'IT', 'IZ', 'MG', 'MN', 'N5', 'SK', 'SZ', 'VA', 'VC', 'VE', 'ZBP', 'ZVP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PartNumberQualType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
            # validate type PartNumberQualType
            self.validate_PartNumberQualType(self.PartNumberQual)
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType


class NRFStandardColorAndSizeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType.subclass:
            return NRFStandardColorAndSizeType.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType


class PhysicalDetailsType153(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.validate_PackQualifierType154(self.PackQualifier)
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.validate_PackUOMType155(self.PackUOM)
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType156(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType157(self.PackingMaterial)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType158(self.WeightQualifier)
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.validate_PackWeightUOMType159(self.PackWeightUOM)
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.validate_PackVolumeUOMType160(self.PackVolumeUOM)
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.validate_PackDimensionUOMType161(self.PackDimensionUOM)
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType153)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType153.subclass:
            return PhysicalDetailsType153.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType153(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def validate_PackQualifierType154(self, value):
        # Validate type PackQualifierType154, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackQualifierType154' % {"value" : value.encode("utf-8")} )
    def validate_PackUOMType155(self, value):
        # Validate type PackUOMType155, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackUOMType155' % {"value" : value.encode("utf-8")} )
    def validate_PackingMediumType156(self, value):
        # Validate type PackingMediumType156, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType156' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType157(self, value):
        # Validate type PackingMaterialType157, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType157' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType158(self, value):
        # Validate type WeightQualifierType158, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType158' % {"value" : value.encode("utf-8")} )
    def validate_PackWeightUOMType159(self, value):
        # Validate type PackWeightUOMType159, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackWeightUOMType159' % {"value" : value.encode("utf-8")} )
    def validate_PackVolumeUOMType160(self, value):
        # Validate type PackVolumeUOMType160, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackVolumeUOMType160' % {"value" : value.encode("utf-8")} )
    def validate_PackDimensionUOMType161(self, value):
        # Validate type PackDimensionUOMType161, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackDimensionUOMType161' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType153', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType153')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType153', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType153'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType153', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackQualifier>%s</%sPackQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackQualifier), input_name='PackQualifier')), namespace_, eol_))
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackUOM>%s</%sPackUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackUOM), input_name='PackUOM')), namespace_, eol_))
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeightUOM>%s</%sPackWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeightUOM), input_name='PackWeightUOM')), namespace_, eol_))
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolumeUOM>%s</%sPackVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolumeUOM), input_name='PackVolumeUOM')), namespace_, eol_))
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackDimensionUOM>%s</%sPackDimensionUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackDimensionUOM), input_name='PackDimensionUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            PackQualifier_ = child_.text
            PackQualifier_ = self.gds_validate_string(PackQualifier_, node, 'PackQualifier')
            self.PackQualifier = PackQualifier_
            # validate type PackQualifierType154
            self.validate_PackQualifierType154(self.PackQualifier)
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            PackUOM_ = child_.text
            PackUOM_ = self.gds_validate_string(PackUOM_, node, 'PackUOM')
            self.PackUOM = PackUOM_
            # validate type PackUOMType155
            self.validate_PackUOMType155(self.PackUOM)
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType156
            self.validate_PackingMediumType156(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType157
            self.validate_PackingMaterialType157(self.PackingMaterial)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType158
            self.validate_WeightQualifierType158(self.WeightQualifier)
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            PackWeightUOM_ = child_.text
            PackWeightUOM_ = self.gds_validate_string(PackWeightUOM_, node, 'PackWeightUOM')
            self.PackWeightUOM = PackWeightUOM_
            # validate type PackWeightUOMType159
            self.validate_PackWeightUOMType159(self.PackWeightUOM)
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            PackVolumeUOM_ = child_.text
            PackVolumeUOM_ = self.gds_validate_string(PackVolumeUOM_, node, 'PackVolumeUOM')
            self.PackVolumeUOM = PackVolumeUOM_
            # validate type PackVolumeUOMType160
            self.validate_PackVolumeUOMType160(self.PackVolumeUOM)
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            PackDimensionUOM_ = child_.text
            PackDimensionUOM_ = self.gds_validate_string(PackDimensionUOM_, node, 'PackDimensionUOM')
            self.PackDimensionUOM = PackDimensionUOM_
            # validate type PackDimensionUOMType161
            self.validate_PackDimensionUOMType161(self.PackDimensionUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType153


class CarrierSpecialHandlingDetailType162(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.validate_SpecialHandlingCodeType163(self.SpecialHandlingCode)
        self.HazardousMaterialCode = HazardousMaterialCode
        self.validate_HazardousMaterialCodeType164(self.HazardousMaterialCode)
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType165(self.YesOrNoResponse)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType162)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType162.subclass:
            return CarrierSpecialHandlingDetailType162.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType162(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def validate_SpecialHandlingCodeType163(self, value):
        # Validate type SpecialHandlingCodeType163, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AH', 'BKA', 'CO', 'DA', 'DNF', 'EL', 'EX', 'FL', 'FP', 'FR', 'HM', 'IC', 'KMD', 'MRF', 'NPR', 'NW', 'OPR', 'OSB', 'OTC', 'PFH', 'PG', 'PHR', 'RM', 'SUIP', 'UN', 'UNDF', 'VOC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SpecialHandlingCodeType163' % {"value" : value.encode("utf-8")} )
    def validate_HazardousMaterialCodeType164(self, value):
        # Validate type HazardousMaterialCodeType164, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['D', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on HazardousMaterialCodeType164' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType165(self, value):
        # Validate type YesOrNoResponseType165, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType165' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType162', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType162')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType162', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType162'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType162', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialHandlingCode>%s</%sSpecialHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SpecialHandlingCode), input_name='SpecialHandlingCode')), namespace_, eol_))
        if self.HazardousMaterialCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialCode>%s</%sHazardousMaterialCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialCode), input_name='HazardousMaterialCode')), namespace_, eol_))
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            SpecialHandlingCode_ = child_.text
            SpecialHandlingCode_ = self.gds_validate_string(SpecialHandlingCode_, node, 'SpecialHandlingCode')
            self.SpecialHandlingCode = SpecialHandlingCode_
            # validate type SpecialHandlingCodeType163
            self.validate_SpecialHandlingCodeType163(self.SpecialHandlingCode)
        elif nodeName_ == 'HazardousMaterialCode':
            HazardousMaterialCode_ = child_.text
            HazardousMaterialCode_ = self.gds_validate_string(HazardousMaterialCode_, node, 'HazardousMaterialCode')
            self.HazardousMaterialCode = HazardousMaterialCode_
            # validate type HazardousMaterialCodeType164
            self.validate_HazardousMaterialCodeType164(self.HazardousMaterialCode)
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType165
            self.validate_YesOrNoResponseType165(self.YesOrNoResponse)
# end class CarrierSpecialHandlingDetailType162


class CarrierInformationType166(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType167(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType168(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType169(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType170(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType171(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType172(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType173(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType174(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType166)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType166.subclass:
            return CarrierInformationType166.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType166(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType167(self, value):
        # Validate type StatusCodeType167, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType167' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType168(self, value):
        # Validate type CarrierTransMethodCodeType168, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType168' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType169(self, value):
        # Validate type EquipmentDescriptionCodeType169, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType169' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType170(self, value):
        # Validate type SealStatusCodeType170, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType170' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType171(self, value):
        # Validate type OwnershipCodeType171, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType171' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType172(self, value):
        # Validate type RoutingSequenceCodeType172, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType172' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType173(self, value):
        # Validate type TransitDirectionCodeType173, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType173' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType174(self, value):
        # Validate type TransitTimeQualType174, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType174' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType166', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType166')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType166', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType166'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType166', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType167
            self.validate_StatusCodeType167(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType168
            self.validate_CarrierTransMethodCodeType168(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType169
            self.validate_EquipmentDescriptionCodeType169(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType170
            self.validate_SealStatusCodeType170(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType171
            self.validate_OwnershipCodeType171(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType172
            self.validate_RoutingSequenceCodeType172(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType173
            self.validate_TransitDirectionCodeType173(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType174
            self.validate_TransitTimeQualType174(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType175.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType177.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType166


class ServiceLevelCodesType175(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType176(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType175)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType175.subclass:
            return ServiceLevelCodesType175.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType175(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType176(self, value):
        # Validate type ServiceLevelCodeType176, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType176' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType175', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType175')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType175', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType175'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType175', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType176
            self.validate_ServiceLevelCodeType176(self.ServiceLevelCode)
# end class ServiceLevelCodesType175


class AddressType177(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType178(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType179(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType177)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType177.subclass:
            return AddressType177.subclass(*args_, **kwargs_)
        else:
            return AddressType177(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType178(self, value):
        # Validate type AddressTypeCodeType178, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType178' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType179(self, value):
        # Validate type LocationCodeQualifierType179, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType179' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType177', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType177')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType177', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType177'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType177', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType178
            self.validate_AddressTypeCodeType178(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType179
            self.validate_LocationCodeQualifierType179(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType180.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType177


class DateType180(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type181(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType180)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType180.subclass:
            return DateType180.subclass(*args_, **kwargs_)
        else:
            return DateType180(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type181(self, value):
        # Validate type DateTimeQualifier1Type181, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type181' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType180', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType180')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType180', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType180'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType180', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type181
            self.validate_DateTimeQualifier1Type181(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType180


class MeasurementsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.validate_MeasurementQualifierType(self.MeasurementQualifier)
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.validate_CompositeUOMType(self.CompositeUOM)
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.validate_MeasurementSignificanceCodeType(self.MeasurementSignificanceCode)
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType.subclass:
            return MeasurementsType.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def validate_MeasurementQualifierType(self, value):
        # Validate type MeasurementQualifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CRM', 'CVOL', 'CWHT', 'D9', 'DI', 'DIA', 'DP', 'HT', 'LN', 'PRS', 'PW', 'TC', 'THU', 'TT', 'VOL', 'WD', 'WT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementQualifierType' % {"value" : value.encode("utf-8")} )
    def validate_CompositeUOMType(self, value):
        # Validate type CompositeUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CompositeUOMType' % {"value" : value.encode("utf-8")} )
    def validate_MeasurementSignificanceCodeType(self, value):
        # Validate type MeasurementSignificanceCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementSignificanceCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
            # validate type MeasurementQualifierType
            self.validate_MeasurementQualifierType(self.MeasurementQualifier)
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
            # validate type CompositeUOMType
            self.validate_CompositeUOMType(self.CompositeUOM)
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
            # validate type MeasurementSignificanceCodeType
            self.validate_MeasurementSignificanceCodeType(self.MeasurementSignificanceCode)
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType


class PriceInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.validate_ChangeReasonCodeType(self.ChangeReasonCode)
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.validate_PriceTypeIDCodeType(self.PriceTypeIDCode)
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.validate_UnitPriceBasisType(self.UnitPriceBasis)
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.validate_PriceMultiplierQualType(self.PriceMultiplierQual)
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.validate_QuantityUOMType(self.QuantityUOM)
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.validate_ClassOfTradeCodeType(self.ClassOfTradeCode)
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType.subclass:
            return PriceInformationType.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_ChangeReasonCodeType(self, value):
        # Validate type ChangeReasonCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AQ', 'EV', 'PS', 'QO', 'UP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ChangeReasonCodeType' % {"value" : value.encode("utf-8")} )
    def validate_PriceTypeIDCodeType(self, value):
        # Validate type PriceTypeIDCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceTypeIDCodeType' % {"value" : value.encode("utf-8")} )
    def validate_UnitPriceBasisType(self, value):
        # Validate type UnitPriceBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitPriceBasisType' % {"value" : value.encode("utf-8")} )
    def validate_PriceMultiplierQualType(self, value):
        # Validate type PriceMultiplierQualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CSD', 'CSR', 'DIS', 'ILP', 'PSP', 'SEL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceMultiplierQualType' % {"value" : value.encode("utf-8")} )
    def validate_QuantityUOMType(self, value):
        # Validate type QuantityUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QuantityUOMType' % {"value" : value.encode("utf-8")} )
    def validate_ClassOfTradeCodeType(self, value):
        # Validate type ClassOfTradeCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RS', 'SA', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ClassOfTradeCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
            # validate type ChangeReasonCodeType
            self.validate_ChangeReasonCodeType(self.ChangeReasonCode)
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
            # validate type PriceTypeIDCodeType
            self.validate_PriceTypeIDCodeType(self.PriceTypeIDCode)
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
            # validate type UnitPriceBasisType
            self.validate_UnitPriceBasisType(self.UnitPriceBasis)
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
            # validate type PriceMultiplierQualType
            self.validate_PriceMultiplierQualType(self.PriceMultiplierQual)
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
            # validate type QuantityUOMType
            self.validate_QuantityUOMType(self.QuantityUOM)
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
            # validate type ClassOfTradeCodeType
            self.validate_ClassOfTradeCodeType(self.ClassOfTradeCode)
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType


class ProductOrItemDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType182(self.ItemDescriptionType)
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType183(self.AgencyQualifierCode)
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType184(self.YesOrNoResponse)
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType.subclass:
            return ProductOrItemDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def validate_ItemDescriptionTypeType182(self, value):
        # Validate type ItemDescriptionTypeType182, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType182' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType183(self, value):
        # Validate type AgencyQualifierCodeType183, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType183' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType184(self, value):
        # Validate type YesOrNoResponseType184, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType184' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType182
            self.validate_ItemDescriptionTypeType182(self.ItemDescriptionType)
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType183
            self.validate_AgencyQualifierCodeType183(self.AgencyQualifierCode)
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType184
            self.validate_YesOrNoResponseType184(self.YesOrNoResponse)
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType


class MasterItemAttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        if ItemAttribute is None:
            self.ItemAttribute = []
        else:
            self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType.subclass:
            return MasterItemAttributeType.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def add_ItemAttribute(self, value): self.ItemAttribute.append(value)
    def insert_ItemAttribute_at(self, index, value): self.ItemAttribute.insert(index, value)
    def replace_ItemAttribute_at(self, index, value): self.ItemAttribute[index] = value
    def hasContent_(self):
        if (
            self.ItemAttribute
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemAttribute_ in self.ItemAttribute:
            ItemAttribute_.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType.factory()
            obj_.build(child_)
            self.ItemAttribute.append(obj_)
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType


class ItemAttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.validate_ItemAttributeQualifierType(self.ItemAttributeQualifier)
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.validate_ValueUOMType(self.ValueUOM)
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType185(self.YesOrNoResponse)
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType.subclass:
            return ItemAttributeType.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def validate_ItemAttributeQualifierType(self, value):
        # Validate type ItemAttributeQualifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ATH', 'BARC', 'BIND', 'BRN', 'CH', 'CI', 'COO', 'DESR', 'DF', 'DNC', 'DS', 'EDT', 'ESC', 'HE', 'ITS', 'LQD', 'MAK', 'MOD', 'MSD', 'MYE', 'PBL', 'REP', 'RI', 'RP', 'RTC', 'SET', 'SHL', 'SL', 'SN', 'SPC', 'SSZ', 'STG', 'SVC', 'SVD', 'SW', 'TEA', 'TIT', 'WAR', 'WOOD', 'WPF', 'WR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemAttributeQualifierType' % {"value" : value.encode("utf-8")} )
    def validate_ValueUOMType(self, value):
        # Validate type ValueUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ValueUOMType' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType185(self, value):
        # Validate type YesOrNoResponseType185, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType185' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemAttributeQualifier>%s</%sItemAttributeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemAttributeQualifier), input_name='ItemAttributeQualifier')), namespace_, eol_))
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
        if self.ValueUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueUOM>%s</%sValueUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ValueUOM), input_name='ValueUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            ItemAttributeQualifier_ = child_.text
            ItemAttributeQualifier_ = self.gds_validate_string(ItemAttributeQualifier_, node, 'ItemAttributeQualifier')
            self.ItemAttributeQualifier = ItemAttributeQualifier_
            # validate type ItemAttributeQualifierType
            self.validate_ItemAttributeQualifierType(self.ItemAttributeQualifier)
        elif nodeName_ == 'Value':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
        elif nodeName_ == 'ValueUOM':
            ValueUOM_ = child_.text
            ValueUOM_ = self.gds_validate_string(ValueUOM_, node, 'ValueUOM')
            self.ValueUOM = ValueUOM_
            # validate type ValueUOMType
            self.validate_ValueUOMType(self.ValueUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType185
            self.validate_YesOrNoResponseType185(self.YesOrNoResponse)
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType186.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType


class MeasurementsType186(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.validate_MeasurementQualifierType187(self.MeasurementQualifier)
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.validate_CompositeUOMType188(self.CompositeUOM)
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.validate_MeasurementSignificanceCodeType189(self.MeasurementSignificanceCode)
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType186)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType186.subclass:
            return MeasurementsType186.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType186(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def validate_MeasurementQualifierType187(self, value):
        # Validate type MeasurementQualifierType187, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CRM', 'CVOL', 'CWHT', 'D9', 'DI', 'DIA', 'DP', 'HT', 'LN', 'PRS', 'PW', 'TC', 'THU', 'TT', 'VOL', 'WD', 'WT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementQualifierType187' % {"value" : value.encode("utf-8")} )
    def validate_CompositeUOMType188(self, value):
        # Validate type CompositeUOMType188, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CompositeUOMType188' % {"value" : value.encode("utf-8")} )
    def validate_MeasurementSignificanceCodeType189(self, value):
        # Validate type MeasurementSignificanceCodeType189, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementSignificanceCodeType189' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType186', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType186')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType186', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType186'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType186', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
            # validate type MeasurementQualifierType187
            self.validate_MeasurementQualifierType187(self.MeasurementQualifier)
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
            # validate type CompositeUOMType188
            self.validate_CompositeUOMType188(self.CompositeUOM)
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
            # validate type MeasurementSignificanceCodeType189
            self.validate_MeasurementSignificanceCodeType189(self.MeasurementSignificanceCode)
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType186


class DateType190(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type191(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType190)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType190.subclass:
            return DateType190.subclass(*args_, **kwargs_)
        else:
            return DateType190(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type191(self, value):
        # Validate type DateTimeQualifier1Type191, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type191' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType190', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType190')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType190', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType190'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType190', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type191
            self.validate_DateTimeQualifier1Type191(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType190


class ReferenceType192(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType193(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType192)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType192.subclass:
            return ReferenceType192.subclass(*args_, **kwargs_)
        else:
            return ReferenceType192(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType193(self, value):
        # Validate type ReferenceQualType193, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType193' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType192', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType192')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType192', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType192'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType192', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType193
            self.validate_ReferenceQualType193(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType194.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType192


class ReferenceIDsType194(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType195(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType194)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType194.subclass:
            return ReferenceIDsType194.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType194(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType195(self, value):
        # Validate type ReferenceQualType195, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType195' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType194', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType194')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType194', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType194'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType194', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType195
            self.validate_ReferenceQualType195(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType194


class NotesType196(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType197(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType196)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType196.subclass:
            return NotesType196.subclass(*args_, **kwargs_)
        else:
            return NotesType196(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType197(self, value):
        # Validate type NoteCodeType197, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType197' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType196', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType196')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType196', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType196'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType196', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType197
            self.validate_NoteCodeType197(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType196


class CommodityType198(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType199(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType198)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType198.subclass:
            return CommodityType198.subclass(*args_, **kwargs_)
        else:
            return CommodityType198(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType199(self, value):
        # Validate type CommodityCodeQualifierType199, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType199' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType198', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType198')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType198', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType198'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType198', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType199
            self.validate_CommodityCodeQualifierType199(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType198


class AddressType200(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType201(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType202(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType200)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType200.subclass:
            return AddressType200.subclass(*args_, **kwargs_)
        else:
            return AddressType200(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType201(self, value):
        # Validate type AddressTypeCodeType201, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType201' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType202(self, value):
        # Validate type LocationCodeQualifierType202, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType202' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType200', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType200')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType200', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType200'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType200', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType201
            self.validate_AddressTypeCodeType201(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType202
            self.validate_LocationCodeQualifierType202(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType203.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType207.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType211.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType200


class ReferenceType203(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType204(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType203)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType203.subclass:
            return ReferenceType203.subclass(*args_, **kwargs_)
        else:
            return ReferenceType203(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType204(self, value):
        # Validate type ReferenceQualType204, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType204' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType203', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType203')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType203', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType203'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType203', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType204
            self.validate_ReferenceQualType204(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType205.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType203


class ReferenceIDsType205(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType206(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType205)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType205.subclass:
            return ReferenceIDsType205.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType205(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType206(self, value):
        # Validate type ReferenceQualType206, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType206' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType205', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType205')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType205', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType205'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType205', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType206
            self.validate_ReferenceQualType206(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType205


class ContactType207(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType208(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType207)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType207.subclass:
            return ContactType207.subclass(*args_, **kwargs_)
        else:
            return ContactType207(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType208(self, value):
        # Validate type ContactTypeCodeType208, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType208' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType207', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType207')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType207', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType207'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType207', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType208
            self.validate_ContactTypeCodeType208(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType209.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType207


class AdditionalContactDetailsType209(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType210(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType209)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType209.subclass:
            return AdditionalContactDetailsType209.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType209(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType210(self, value):
        # Validate type ContactQualType210, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType210' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType209', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType209')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType209', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType209'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType209', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType210
            self.validate_ContactQualType210(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType209


class DateType211(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type212(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType211)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType211.subclass:
            return DateType211.subclass(*args_, **kwargs_)
        else:
            return DateType211(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type212(self, value):
        # Validate type DateTimeQualifier1Type212, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type212' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType211', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType211')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType211', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType211'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType211', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type212
            self.validate_DateTimeQualifier1Type212(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType211


class SublinesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Subline=None):
        self.original_tagname_ = None
        if Subline is None:
            self.Subline = []
        else:
            self.Subline = Subline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublinesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublinesType.subclass:
            return SublinesType.subclass(*args_, **kwargs_)
        else:
            return SublinesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def add_Subline(self, value): self.Subline.append(value)
    def insert_Subline_at(self, index, value): self.Subline.insert(index, value)
    def replace_Subline_at(self, index, value): self.Subline[index] = value
    def hasContent_(self):
        if (
            self.Subline
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublinesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublinesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublinesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublinesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublinesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Subline_ in self.Subline:
            Subline_.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Subline':
            obj_ = SublineType.factory()
            obj_.build(child_)
            self.Subline.append(obj_)
            obj_.original_tagname_ = 'Subline'
# end class SublinesType


class SublineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, PriceInformation=None, ProductOrItemDescription=None, Commodity=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType.subclass:
            return SublineType.subclass(*args_, **kwargs_)
        else:
            return SublineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.Commodity
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType218.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType225.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType229.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
# end class SublineType


class SublineItemDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.validate_QtyPerUOMType(self.QtyPerUOM)
        self.PurchasePriceType = PurchasePriceType
        self.validate_PurchasePriceTypeType215(self.PurchasePriceType)
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.validate_PurchasePriceBasisType216(self.PurchasePriceBasis)
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType.subclass:
            return SublineItemDetailType.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def validate_QtyPerUOMType(self, value):
        # Validate type QtyPerUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QtyPerUOMType' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceTypeType215(self, value):
        # Validate type PurchasePriceTypeType215, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceTypeType215' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceBasisType216(self, value):
        # Validate type PurchasePriceBasisType216, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceBasisType216' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.QtyPer is not None:
            self.QtyPer.export(outfile, level, namespace_, name_='QtyPer', pretty_print=pretty_print)
        if self.QtyPerUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQtyPerUOM>%s</%sQtyPerUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QtyPerUOM), input_name='QtyPerUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType213.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'QtyPer':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPer = obj_
            obj_.original_tagname_ = 'QtyPer'
        elif nodeName_ == 'QtyPerUOM':
            QtyPerUOM_ = child_.text
            QtyPerUOM_ = self.gds_validate_string(QtyPerUOM_, node, 'QtyPerUOM')
            self.QtyPerUOM = QtyPerUOM_
            # validate type QtyPerUOMType
            self.validate_QtyPerUOMType(self.QtyPerUOM)
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
            # validate type PurchasePriceTypeType215
            self.validate_PurchasePriceTypeType215(self.PurchasePriceType)
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
            # validate type PurchasePriceBasisType216
            self.validate_PurchasePriceBasisType216(self.PurchasePriceBasis)
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType217.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType


class ProductIDType213(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.validate_PartNumberQualType214(self.PartNumberQual)
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType213)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType213.subclass:
            return ProductIDType213.subclass(*args_, **kwargs_)
        else:
            return ProductIDType213(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def validate_PartNumberQualType214(self, value):
        # Validate type PartNumberQualType214, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['B8', 'BO', 'CB', 'FU', 'IS', 'IT', 'IZ', 'MG', 'MN', 'N5', 'SK', 'SZ', 'VA', 'VC', 'VE', 'ZBP', 'ZVP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PartNumberQualType214' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType213', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType213')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType213', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType213'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType213', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
            # validate type PartNumberQualType214
            self.validate_PartNumberQualType214(self.PartNumberQual)
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType213


class NRFStandardColorAndSizeType217(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType217)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType217.subclass:
            return NRFStandardColorAndSizeType217.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType217(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType217', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType217')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType217', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType217'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType217', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType217


class PriceInformationType218(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.validate_ChangeReasonCodeType219(self.ChangeReasonCode)
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.validate_PriceTypeIDCodeType220(self.PriceTypeIDCode)
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.validate_UnitPriceBasisType221(self.UnitPriceBasis)
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.validate_PriceMultiplierQualType222(self.PriceMultiplierQual)
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.validate_QuantityUOMType223(self.QuantityUOM)
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.validate_ClassOfTradeCodeType224(self.ClassOfTradeCode)
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType218)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType218.subclass:
            return PriceInformationType218.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType218(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_ChangeReasonCodeType219(self, value):
        # Validate type ChangeReasonCodeType219, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AQ', 'EV', 'PS', 'QO', 'UP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ChangeReasonCodeType219' % {"value" : value.encode("utf-8")} )
    def validate_PriceTypeIDCodeType220(self, value):
        # Validate type PriceTypeIDCodeType220, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceTypeIDCodeType220' % {"value" : value.encode("utf-8")} )
    def validate_UnitPriceBasisType221(self, value):
        # Validate type UnitPriceBasisType221, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitPriceBasisType221' % {"value" : value.encode("utf-8")} )
    def validate_PriceMultiplierQualType222(self, value):
        # Validate type PriceMultiplierQualType222, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CSD', 'CSR', 'DIS', 'ILP', 'PSP', 'SEL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceMultiplierQualType222' % {"value" : value.encode("utf-8")} )
    def validate_QuantityUOMType223(self, value):
        # Validate type QuantityUOMType223, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QuantityUOMType223' % {"value" : value.encode("utf-8")} )
    def validate_ClassOfTradeCodeType224(self, value):
        # Validate type ClassOfTradeCodeType224, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RS', 'SA', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ClassOfTradeCodeType224' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType218', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType218')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType218', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType218'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType218', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
            # validate type ChangeReasonCodeType219
            self.validate_ChangeReasonCodeType219(self.ChangeReasonCode)
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
            # validate type PriceTypeIDCodeType220
            self.validate_PriceTypeIDCodeType220(self.PriceTypeIDCode)
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
            # validate type UnitPriceBasisType221
            self.validate_UnitPriceBasisType221(self.UnitPriceBasis)
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
            # validate type PriceMultiplierQualType222
            self.validate_PriceMultiplierQualType222(self.PriceMultiplierQual)
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
            # validate type QuantityUOMType223
            self.validate_QuantityUOMType223(self.QuantityUOM)
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
            # validate type ClassOfTradeCodeType224
            self.validate_ClassOfTradeCodeType224(self.ClassOfTradeCode)
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType218


class ProductOrItemDescriptionType225(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType226(self.ItemDescriptionType)
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType227(self.AgencyQualifierCode)
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType228(self.YesOrNoResponse)
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType225)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType225.subclass:
            return ProductOrItemDescriptionType225.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType225(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def validate_ItemDescriptionTypeType226(self, value):
        # Validate type ItemDescriptionTypeType226, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType226' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType227(self, value):
        # Validate type AgencyQualifierCodeType227, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType227' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType228(self, value):
        # Validate type YesOrNoResponseType228, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType228' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType225', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType225')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType225', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType225'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType225', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType226
            self.validate_ItemDescriptionTypeType226(self.ItemDescriptionType)
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType227
            self.validate_AgencyQualifierCodeType227(self.AgencyQualifierCode)
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType228
            self.validate_YesOrNoResponseType228(self.YesOrNoResponse)
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType225


class CommodityType229(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType230(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType229)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType229.subclass:
            return CommodityType229.subclass(*args_, **kwargs_)
        else:
            return CommodityType229(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType230(self, value):
        # Validate type CommodityCodeQualifierType230, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType230' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType229', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType229')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType229', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType229'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType229', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType230
            self.validate_CommodityCodeQualifierType230(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType229


class TaxType231(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType232(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType233(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType234(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType235(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType236(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType237(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType231)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType231.subclass:
            return TaxType231.subclass(*args_, **kwargs_)
        else:
            return TaxType231(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType232(self, value):
        # Validate type TaxTypeCodeType232, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType232' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType233(self, value):
        # Validate type TaxPercentQualType233, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType233' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType234(self, value):
        # Validate type JurisdictionQualType234, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType234' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType235(self, value):
        # Validate type TaxExemptCodeType235, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType235' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType236(self, value):
        # Validate type RelationshipCodeType236, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType236' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType237(self, value):
        # Validate type TaxHandlingCodeType237, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType237' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType231', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType231')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType231', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType231'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType231', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType232
            self.validate_TaxTypeCodeType232(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType233
            self.validate_TaxPercentQualType233(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType234
            self.validate_JurisdictionQualType234(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType235
            self.validate_TaxExemptCodeType235(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType236
            self.validate_RelationshipCodeType236(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType237
            self.validate_TaxHandlingCodeType237(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType231


class ChargesAllowancesType238(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType239(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType240(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType241(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType242(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType243(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType244(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType238)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType238.subclass:
            return ChargesAllowancesType238.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType238(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType239(self, value):
        # Validate type AllowChrgIndicatorType239, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType239' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType240(self, value):
        # Validate type AllowChrgCodeType240, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType240' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType241(self, value):
        # Validate type AllowChrgAgencyCodeType241, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType241' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType242(self, value):
        # Validate type AllowChrgPercentQualType242, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType242' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType243(self, value):
        # Validate type AllowChrgQtyUOMType243, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType243' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType244(self, value):
        # Validate type AllowChrgHandlingCodeType244, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType244' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType238', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType238')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType238', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType238'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType238', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType239
            self.validate_AllowChrgIndicatorType239(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType240
            self.validate_AllowChrgCodeType240(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType241
            self.validate_AllowChrgAgencyCodeType241(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType242
            self.validate_AllowChrgPercentQualType242(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType243
            self.validate_AllowChrgQtyUOMType243(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType244
            self.validate_AllowChrgHandlingCodeType244(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType245.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType238


class TaxType245(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType246(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType247(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType248(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType249(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType250(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType251(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType245)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType245.subclass:
            return TaxType245.subclass(*args_, **kwargs_)
        else:
            return TaxType245(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType246(self, value):
        # Validate type TaxTypeCodeType246, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType246' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType247(self, value):
        # Validate type TaxPercentQualType247, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType247' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType248(self, value):
        # Validate type JurisdictionQualType248, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType248' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType249(self, value):
        # Validate type TaxExemptCodeType249, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType249' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType250(self, value):
        # Validate type RelationshipCodeType250, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType250' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType251(self, value):
        # Validate type TaxHandlingCodeType251, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType251' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType245', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType245')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType245', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType245'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType245', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType246
            self.validate_TaxTypeCodeType246(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType247
            self.validate_TaxPercentQualType247(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType248
            self.validate_JurisdictionQualType248(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType249
            self.validate_TaxExemptCodeType249(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType250
            self.validate_RelationshipCodeType250(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType251
            self.validate_TaxHandlingCodeType251(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType245


class ItemLoadInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemLoad=None, Reference=None, Notes=None):
        self.original_tagname_ = None
        self.ItemLoad = ItemLoad
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadInfoType.subclass:
            return ItemLoadInfoType.subclass(*args_, **kwargs_)
        else:
            return ItemLoadInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemLoad(self): return self.ItemLoad
    def set_ItemLoad(self, ItemLoad): self.ItemLoad = ItemLoad
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def hasContent_(self):
        if (
            self.ItemLoad is not None or
            self.Reference or
            self.Notes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadInfoType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemLoad is not None:
            self.ItemLoad.export(outfile, level, namespace_, name_='ItemLoad', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemLoad':
            obj_ = ItemLoadType.factory()
            obj_.build(child_)
            self.ItemLoad = obj_
            obj_.original_tagname_ = 'ItemLoad'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType254.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType258.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
# end class ItemLoadInfoType


class ItemLoadType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfLoads=None, UnitsShipped=None, PackingMedium=None, PackingMaterial=None, LoadSize=None, LoadSizeUOM=None):
        self.original_tagname_ = None
        self.NumberOfLoads = NumberOfLoads
        self.UnitsShipped = UnitsShipped
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType252(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType253(self.PackingMaterial)
        self.LoadSize = LoadSize
        self.LoadSizeUOM = LoadSizeUOM
        self.validate_LoadSizeUOMType(self.LoadSizeUOM)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadType.subclass:
            return ItemLoadType.subclass(*args_, **kwargs_)
        else:
            return ItemLoadType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfLoads(self): return self.NumberOfLoads
    def set_NumberOfLoads(self, NumberOfLoads): self.NumberOfLoads = NumberOfLoads
    def get_UnitsShipped(self): return self.UnitsShipped
    def set_UnitsShipped(self, UnitsShipped): self.UnitsShipped = UnitsShipped
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LoadSize(self): return self.LoadSize
    def set_LoadSize(self, LoadSize): self.LoadSize = LoadSize
    def get_LoadSizeUOM(self): return self.LoadSizeUOM
    def set_LoadSizeUOM(self, LoadSizeUOM): self.LoadSizeUOM = LoadSizeUOM
    def validate_PackingMediumType252(self, value):
        # Validate type PackingMediumType252, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType252' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType253(self, value):
        # Validate type PackingMaterialType253, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType253' % {"value" : value.encode("utf-8")} )
    def validate_LoadSizeUOMType(self, value):
        # Validate type LoadSizeUOMType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LoadSizeUOMType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NumberOfLoads is not None or
            self.UnitsShipped is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LoadSize is not None or
            self.LoadSizeUOM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfLoads is not None:
            self.NumberOfLoads.export(outfile, level, namespace_, name_='NumberOfLoads', pretty_print=pretty_print)
        if self.UnitsShipped is not None:
            self.UnitsShipped.export(outfile, level, namespace_, name_='UnitsShipped', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.LoadSize is not None:
            self.LoadSize.export(outfile, level, namespace_, name_='LoadSize', pretty_print=pretty_print)
        if self.LoadSizeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLoadSizeUOM>%s</%sLoadSizeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LoadSizeUOM), input_name='LoadSizeUOM')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfLoads':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NumberOfLoads = obj_
            obj_.original_tagname_ = 'NumberOfLoads'
        elif nodeName_ == 'UnitsShipped':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitsShipped = obj_
            obj_.original_tagname_ = 'UnitsShipped'
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType252
            self.validate_PackingMediumType252(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType253
            self.validate_PackingMaterialType253(self.PackingMaterial)
        elif nodeName_ == 'LoadSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSize = obj_
            obj_.original_tagname_ = 'LoadSize'
        elif nodeName_ == 'LoadSizeUOM':
            LoadSizeUOM_ = child_.text
            LoadSizeUOM_ = self.gds_validate_string(LoadSizeUOM_, node, 'LoadSizeUOM')
            self.LoadSizeUOM = LoadSizeUOM_
            # validate type LoadSizeUOMType
            self.validate_LoadSizeUOMType(self.LoadSizeUOM)
# end class ItemLoadType


class ReferenceType254(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType255(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType254)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType254.subclass:
            return ReferenceType254.subclass(*args_, **kwargs_)
        else:
            return ReferenceType254(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType255(self, value):
        # Validate type ReferenceQualType255, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType255' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType254', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType254')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType254', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType254'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType254', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType255
            self.validate_ReferenceQualType255(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType256.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType254


class ReferenceIDsType256(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType257(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType256)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType256.subclass:
            return ReferenceIDsType256.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType256(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType257(self, value):
        # Validate type ReferenceQualType257, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType257' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType256', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType256')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType256', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType256'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType256', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType257
            self.validate_ReferenceQualType257(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType256


class NotesType258(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType259(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType258)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType258.subclass:
            return NotesType258.subclass(*args_, **kwargs_)
        else:
            return NotesType258(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType259(self, value):
        # Validate type NoteCodeType259, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType259' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType258', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType258')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType258', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType258'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType258', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType259
            self.validate_NoteCodeType259(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType258


class PackLevelType260(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Pack=None, PhysicalDetails=None, MarksAndNumbersCollection=None, PalletInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, CarrierInformation=None, Packaging=None, ItemLevel=None):
        self.original_tagname_ = None
        self.Pack = Pack
        if PhysicalDetails is None:
            self.PhysicalDetails = []
        else:
            self.PhysicalDetails = PhysicalDetails
        if MarksAndNumbersCollection is None:
            self.MarksAndNumbersCollection = []
        else:
            self.MarksAndNumbersCollection = MarksAndNumbersCollection
        if PalletInformation is None:
            self.PalletInformation = []
        else:
            self.PalletInformation = PalletInformation
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Packaging is None:
            self.Packaging = []
        else:
            self.Packaging = Packaging
        if ItemLevel is None:
            self.ItemLevel = []
        else:
            self.ItemLevel = ItemLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackLevelType260)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackLevelType260.subclass:
            return PackLevelType260.subclass(*args_, **kwargs_)
        else:
            return PackLevelType260(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Pack(self): return self.Pack
    def set_Pack(self, Pack): self.Pack = Pack
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def add_PhysicalDetails(self, value): self.PhysicalDetails.append(value)
    def insert_PhysicalDetails_at(self, index, value): self.PhysicalDetails.insert(index, value)
    def replace_PhysicalDetails_at(self, index, value): self.PhysicalDetails[index] = value
    def get_MarksAndNumbersCollection(self): return self.MarksAndNumbersCollection
    def set_MarksAndNumbersCollection(self, MarksAndNumbersCollection): self.MarksAndNumbersCollection = MarksAndNumbersCollection
    def add_MarksAndNumbersCollection(self, value): self.MarksAndNumbersCollection.append(value)
    def insert_MarksAndNumbersCollection_at(self, index, value): self.MarksAndNumbersCollection.insert(index, value)
    def replace_MarksAndNumbersCollection_at(self, index, value): self.MarksAndNumbersCollection[index] = value
    def get_PalletInformation(self): return self.PalletInformation
    def set_PalletInformation(self, PalletInformation): self.PalletInformation = PalletInformation
    def add_PalletInformation(self, value): self.PalletInformation.append(value)
    def insert_PalletInformation_at(self, index, value): self.PalletInformation.insert(index, value)
    def replace_PalletInformation_at(self, index, value): self.PalletInformation[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def add_Packaging(self, value): self.Packaging.append(value)
    def insert_Packaging_at(self, index, value): self.Packaging.insert(index, value)
    def replace_Packaging_at(self, index, value): self.Packaging[index] = value
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def add_ItemLevel(self, value): self.ItemLevel.append(value)
    def insert_ItemLevel_at(self, index, value): self.ItemLevel.insert(index, value)
    def replace_ItemLevel_at(self, index, value): self.ItemLevel[index] = value
    def hasContent_(self):
        if (
            self.Pack is not None or
            self.PhysicalDetails or
            self.MarksAndNumbersCollection or
            self.PalletInformation or
            self.Date or
            self.Reference or
            self.Notes or
            self.Address or
            self.Tax or
            self.ChargesAllowances or
            self.CarrierInformation or
            self.Packaging or
            self.ItemLevel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackLevelType260', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackLevelType260')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackLevelType260', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackLevelType260'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackLevelType260', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Pack is not None:
            self.Pack.export(outfile, level, namespace_, name_='Pack', pretty_print=pretty_print)
        for PhysicalDetails_ in self.PhysicalDetails:
            PhysicalDetails_.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        for MarksAndNumbersCollection_ in self.MarksAndNumbersCollection:
            MarksAndNumbersCollection_.export(outfile, level, namespace_, name_='MarksAndNumbersCollection', pretty_print=pretty_print)
        for PalletInformation_ in self.PalletInformation:
            PalletInformation_.export(outfile, level, namespace_, name_='PalletInformation', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Packaging_ in self.Packaging:
            Packaging_.export(outfile, level, namespace_, name_='Packaging', pretty_print=pretty_print)
        for ItemLevel_ in self.ItemLevel:
            ItemLevel_.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Pack':
            obj_ = PackType261.factory()
            obj_.build(child_)
            self.Pack = obj_
            obj_.original_tagname_ = 'Pack'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType263.factory()
            obj_.build(child_)
            self.PhysicalDetails.append(obj_)
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'MarksAndNumbersCollection':
            obj_ = MarksAndNumbersCollectionType272.factory()
            obj_.build(child_)
            self.MarksAndNumbersCollection.append(obj_)
            obj_.original_tagname_ = 'MarksAndNumbersCollection'
        elif nodeName_ == 'PalletInformation':
            obj_ = PalletInformationType274.factory()
            obj_.build(child_)
            self.PalletInformation.append(obj_)
            obj_.original_tagname_ = 'PalletInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType284.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType286.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType290.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType292.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType305.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType312.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType326.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Packaging':
            obj_ = PackagingType342.factory()
            obj_.build(child_)
            self.Packaging.append(obj_)
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevelType347.factory()
            obj_.build(child_)
            self.ItemLevel.append(obj_)
            obj_.original_tagname_ = 'ItemLevel'
# end class PackLevelType260


class PackType261(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackLevelType=None, ShippingSerialID=None, CarrierPackageID=None):
        self.original_tagname_ = None
        self.PackLevelType = PackLevelType
        self.validate_PackLevelTypeType262(self.PackLevelType)
        self.ShippingSerialID = ShippingSerialID
        self.CarrierPackageID = CarrierPackageID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackType261)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackType261.subclass:
            return PackType261.subclass(*args_, **kwargs_)
        else:
            return PackType261(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackLevelType(self): return self.PackLevelType
    def set_PackLevelType(self, PackLevelType): self.PackLevelType = PackLevelType
    def get_ShippingSerialID(self): return self.ShippingSerialID
    def set_ShippingSerialID(self, ShippingSerialID): self.ShippingSerialID = ShippingSerialID
    def get_CarrierPackageID(self): return self.CarrierPackageID
    def set_CarrierPackageID(self, CarrierPackageID): self.CarrierPackageID = CarrierPackageID
    def validate_PackLevelTypeType262(self, value):
        # Validate type PackLevelTypeType262, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['P', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackLevelTypeType262' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackLevelType is not None or
            self.ShippingSerialID is not None or
            self.CarrierPackageID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackType261', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackType261')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackType261', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackType261'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackType261', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackLevelType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackLevelType>%s</%sPackLevelType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackLevelType), input_name='PackLevelType')), namespace_, eol_))
        if self.ShippingSerialID is not None:
            self.ShippingSerialID.export(outfile, level, namespace_, name_='ShippingSerialID', pretty_print=pretty_print)
        if self.CarrierPackageID is not None:
            self.CarrierPackageID.export(outfile, level, namespace_, name_='CarrierPackageID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackLevelType':
            PackLevelType_ = child_.text
            PackLevelType_ = self.gds_validate_string(PackLevelType_, node, 'PackLevelType')
            self.PackLevelType = PackLevelType_
            # validate type PackLevelTypeType262
            self.validate_PackLevelTypeType262(self.PackLevelType)
        elif nodeName_ == 'ShippingSerialID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShippingSerialID = obj_
            obj_.original_tagname_ = 'ShippingSerialID'
        elif nodeName_ == 'CarrierPackageID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierPackageID = obj_
            obj_.original_tagname_ = 'CarrierPackageID'
# end class PackType261


class PhysicalDetailsType263(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.validate_PackQualifierType264(self.PackQualifier)
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.validate_PackUOMType265(self.PackUOM)
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType266(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType267(self.PackingMaterial)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType268(self.WeightQualifier)
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.validate_PackWeightUOMType269(self.PackWeightUOM)
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.validate_PackVolumeUOMType270(self.PackVolumeUOM)
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.validate_PackDimensionUOMType271(self.PackDimensionUOM)
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType263)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType263.subclass:
            return PhysicalDetailsType263.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType263(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def validate_PackQualifierType264(self, value):
        # Validate type PackQualifierType264, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackQualifierType264' % {"value" : value.encode("utf-8")} )
    def validate_PackUOMType265(self, value):
        # Validate type PackUOMType265, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackUOMType265' % {"value" : value.encode("utf-8")} )
    def validate_PackingMediumType266(self, value):
        # Validate type PackingMediumType266, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType266' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType267(self, value):
        # Validate type PackingMaterialType267, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType267' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType268(self, value):
        # Validate type WeightQualifierType268, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType268' % {"value" : value.encode("utf-8")} )
    def validate_PackWeightUOMType269(self, value):
        # Validate type PackWeightUOMType269, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackWeightUOMType269' % {"value" : value.encode("utf-8")} )
    def validate_PackVolumeUOMType270(self, value):
        # Validate type PackVolumeUOMType270, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackVolumeUOMType270' % {"value" : value.encode("utf-8")} )
    def validate_PackDimensionUOMType271(self, value):
        # Validate type PackDimensionUOMType271, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackDimensionUOMType271' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType263', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType263')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType263', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType263'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType263', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackQualifier>%s</%sPackQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackQualifier), input_name='PackQualifier')), namespace_, eol_))
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackUOM>%s</%sPackUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackUOM), input_name='PackUOM')), namespace_, eol_))
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeightUOM>%s</%sPackWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeightUOM), input_name='PackWeightUOM')), namespace_, eol_))
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolumeUOM>%s</%sPackVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolumeUOM), input_name='PackVolumeUOM')), namespace_, eol_))
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackDimensionUOM>%s</%sPackDimensionUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackDimensionUOM), input_name='PackDimensionUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            PackQualifier_ = child_.text
            PackQualifier_ = self.gds_validate_string(PackQualifier_, node, 'PackQualifier')
            self.PackQualifier = PackQualifier_
            # validate type PackQualifierType264
            self.validate_PackQualifierType264(self.PackQualifier)
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            PackUOM_ = child_.text
            PackUOM_ = self.gds_validate_string(PackUOM_, node, 'PackUOM')
            self.PackUOM = PackUOM_
            # validate type PackUOMType265
            self.validate_PackUOMType265(self.PackUOM)
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType266
            self.validate_PackingMediumType266(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType267
            self.validate_PackingMaterialType267(self.PackingMaterial)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType268
            self.validate_WeightQualifierType268(self.WeightQualifier)
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            PackWeightUOM_ = child_.text
            PackWeightUOM_ = self.gds_validate_string(PackWeightUOM_, node, 'PackWeightUOM')
            self.PackWeightUOM = PackWeightUOM_
            # validate type PackWeightUOMType269
            self.validate_PackWeightUOMType269(self.PackWeightUOM)
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            PackVolumeUOM_ = child_.text
            PackVolumeUOM_ = self.gds_validate_string(PackVolumeUOM_, node, 'PackVolumeUOM')
            self.PackVolumeUOM = PackVolumeUOM_
            # validate type PackVolumeUOMType270
            self.validate_PackVolumeUOMType270(self.PackVolumeUOM)
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            PackDimensionUOM_ = child_.text
            PackDimensionUOM_ = self.gds_validate_string(PackDimensionUOM_, node, 'PackDimensionUOM')
            self.PackDimensionUOM = PackDimensionUOM_
            # validate type PackDimensionUOMType271
            self.validate_PackDimensionUOMType271(self.PackDimensionUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType263


class MarksAndNumbersCollectionType272(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MarksAndNumbersQualifier1=None, MarksAndNumbers1=None):
        self.original_tagname_ = None
        self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
        self.validate_MarksAndNumbersQualifier1Type273(self.MarksAndNumbersQualifier1)
        self.MarksAndNumbers1 = MarksAndNumbers1
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarksAndNumbersCollectionType272)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarksAndNumbersCollectionType272.subclass:
            return MarksAndNumbersCollectionType272.subclass(*args_, **kwargs_)
        else:
            return MarksAndNumbersCollectionType272(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarksAndNumbersQualifier1(self): return self.MarksAndNumbersQualifier1
    def set_MarksAndNumbersQualifier1(self, MarksAndNumbersQualifier1): self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
    def get_MarksAndNumbers1(self): return self.MarksAndNumbers1
    def set_MarksAndNumbers1(self, MarksAndNumbers1): self.MarksAndNumbers1 = MarksAndNumbers1
    def validate_MarksAndNumbersQualifier1Type273(self, value):
        # Validate type MarksAndNumbersQualifier1Type273, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CA', 'SI', 'UC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MarksAndNumbersQualifier1Type273' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MarksAndNumbersQualifier1 is not None or
            self.MarksAndNumbers1 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType272', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MarksAndNumbersCollectionType272')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MarksAndNumbersCollectionType272', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MarksAndNumbersCollectionType272'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType272', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarksAndNumbersQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarksAndNumbersQualifier1>%s</%sMarksAndNumbersQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MarksAndNumbersQualifier1), input_name='MarksAndNumbersQualifier1')), namespace_, eol_))
        if self.MarksAndNumbers1 is not None:
            self.MarksAndNumbers1.export(outfile, level, namespace_, name_='MarksAndNumbers1', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarksAndNumbersQualifier1':
            MarksAndNumbersQualifier1_ = child_.text
            MarksAndNumbersQualifier1_ = self.gds_validate_string(MarksAndNumbersQualifier1_, node, 'MarksAndNumbersQualifier1')
            self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1_
            # validate type MarksAndNumbersQualifier1Type273
            self.validate_MarksAndNumbersQualifier1Type273(self.MarksAndNumbersQualifier1)
        elif nodeName_ == 'MarksAndNumbers1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MarksAndNumbers1 = obj_
            obj_.original_tagname_ = 'MarksAndNumbers1'
# end class MarksAndNumbersCollectionType272


class PalletInformationType274(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PalletQualifier=None, PalletValue=None, PalletTypeCode=None, PalletTiers=None, PalletBlocks=None, UnitWeight=None, UnitWeightUOM=None, Length=None, Width=None, Height=None, UnitOfMeasure=None, WeightQualifier=None, PalletWeight=None, PalletWeightUOM=None, PalletVolume=None, PalletVolumeUOM=None, PalletExchangeCode=None, PalletStructureCode=None):
        self.original_tagname_ = None
        self.PalletQualifier = PalletQualifier
        self.validate_PalletQualifierType275(self.PalletQualifier)
        self.PalletValue = PalletValue
        self.PalletTypeCode = PalletTypeCode
        self.validate_PalletTypeCodeType276(self.PalletTypeCode)
        self.PalletTiers = PalletTiers
        self.PalletBlocks = PalletBlocks
        self.UnitWeight = UnitWeight
        self.UnitWeightUOM = UnitWeightUOM
        self.validate_UnitWeightUOMType277(self.UnitWeightUOM)
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.UnitOfMeasure = UnitOfMeasure
        self.validate_UnitOfMeasureType278(self.UnitOfMeasure)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType279(self.WeightQualifier)
        self.PalletWeight = PalletWeight
        self.PalletWeightUOM = PalletWeightUOM
        self.validate_PalletWeightUOMType280(self.PalletWeightUOM)
        self.PalletVolume = PalletVolume
        self.PalletVolumeUOM = PalletVolumeUOM
        self.validate_PalletVolumeUOMType281(self.PalletVolumeUOM)
        self.PalletExchangeCode = PalletExchangeCode
        self.validate_PalletExchangeCodeType282(self.PalletExchangeCode)
        self.PalletStructureCode = PalletStructureCode
        self.validate_PalletStructureCodeType283(self.PalletStructureCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletInformationType274)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletInformationType274.subclass:
            return PalletInformationType274.subclass(*args_, **kwargs_)
        else:
            return PalletInformationType274(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletQualifier(self): return self.PalletQualifier
    def set_PalletQualifier(self, PalletQualifier): self.PalletQualifier = PalletQualifier
    def get_PalletValue(self): return self.PalletValue
    def set_PalletValue(self, PalletValue): self.PalletValue = PalletValue
    def get_PalletTypeCode(self): return self.PalletTypeCode
    def set_PalletTypeCode(self, PalletTypeCode): self.PalletTypeCode = PalletTypeCode
    def get_PalletTiers(self): return self.PalletTiers
    def set_PalletTiers(self, PalletTiers): self.PalletTiers = PalletTiers
    def get_PalletBlocks(self): return self.PalletBlocks
    def set_PalletBlocks(self, PalletBlocks): self.PalletBlocks = PalletBlocks
    def get_UnitWeight(self): return self.UnitWeight
    def set_UnitWeight(self, UnitWeight): self.UnitWeight = UnitWeight
    def get_UnitWeightUOM(self): return self.UnitWeightUOM
    def set_UnitWeightUOM(self, UnitWeightUOM): self.UnitWeightUOM = UnitWeightUOM
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PalletWeight(self): return self.PalletWeight
    def set_PalletWeight(self, PalletWeight): self.PalletWeight = PalletWeight
    def get_PalletWeightUOM(self): return self.PalletWeightUOM
    def set_PalletWeightUOM(self, PalletWeightUOM): self.PalletWeightUOM = PalletWeightUOM
    def get_PalletVolume(self): return self.PalletVolume
    def set_PalletVolume(self, PalletVolume): self.PalletVolume = PalletVolume
    def get_PalletVolumeUOM(self): return self.PalletVolumeUOM
    def set_PalletVolumeUOM(self, PalletVolumeUOM): self.PalletVolumeUOM = PalletVolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def get_PalletStructureCode(self): return self.PalletStructureCode
    def set_PalletStructureCode(self, PalletStructureCode): self.PalletStructureCode = PalletStructureCode
    def validate_PalletQualifierType275(self, value):
        # Validate type PalletQualifierType275, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletQualifierType275' % {"value" : value.encode("utf-8")} )
    def validate_PalletTypeCodeType276(self, value):
        # Validate type PalletTypeCodeType276, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '10', '11', '3', '4', '5', '6', '7', '8']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletTypeCodeType276' % {"value" : value.encode("utf-8")} )
    def validate_UnitWeightUOMType277(self, value):
        # Validate type UnitWeightUOMType277, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitWeightUOMType277' % {"value" : value.encode("utf-8")} )
    def validate_UnitOfMeasureType278(self, value):
        # Validate type UnitOfMeasureType278, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitOfMeasureType278' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType279(self, value):
        # Validate type WeightQualifierType279, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType279' % {"value" : value.encode("utf-8")} )
    def validate_PalletWeightUOMType280(self, value):
        # Validate type PalletWeightUOMType280, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletWeightUOMType280' % {"value" : value.encode("utf-8")} )
    def validate_PalletVolumeUOMType281(self, value):
        # Validate type PalletVolumeUOMType281, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletVolumeUOMType281' % {"value" : value.encode("utf-8")} )
    def validate_PalletExchangeCodeType282(self, value):
        # Validate type PalletExchangeCodeType282, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletExchangeCodeType282' % {"value" : value.encode("utf-8")} )
    def validate_PalletStructureCodeType283(self, value):
        # Validate type PalletStructureCodeType283, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'B', 'C', 'S']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletStructureCodeType283' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PalletQualifier is not None or
            self.PalletValue is not None or
            self.PalletTypeCode is not None or
            self.PalletTiers is not None or
            self.PalletBlocks is not None or
            self.UnitWeight is not None or
            self.UnitWeightUOM is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.UnitOfMeasure is not None or
            self.WeightQualifier is not None or
            self.PalletWeight is not None or
            self.PalletWeightUOM is not None or
            self.PalletVolume is not None or
            self.PalletVolumeUOM is not None or
            self.PalletExchangeCode is not None or
            self.PalletStructureCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PalletInformationType274', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletInformationType274')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PalletInformationType274', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PalletInformationType274'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PalletInformationType274', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletQualifier>%s</%sPalletQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletQualifier), input_name='PalletQualifier')), namespace_, eol_))
        if self.PalletValue is not None:
            self.PalletValue.export(outfile, level, namespace_, name_='PalletValue', pretty_print=pretty_print)
        if self.PalletTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletTypeCode>%s</%sPalletTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletTypeCode), input_name='PalletTypeCode')), namespace_, eol_))
        if self.PalletTiers is not None:
            self.PalletTiers.export(outfile, level, namespace_, name_='PalletTiers', pretty_print=pretty_print)
        if self.PalletBlocks is not None:
            self.PalletBlocks.export(outfile, level, namespace_, name_='PalletBlocks', pretty_print=pretty_print)
        if self.UnitWeight is not None:
            self.UnitWeight.export(outfile, level, namespace_, name_='UnitWeight', pretty_print=pretty_print)
        if self.UnitWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitWeightUOM>%s</%sUnitWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitWeightUOM), input_name='UnitWeightUOM')), namespace_, eol_))
        if self.Length is not None:
            self.Length.export(outfile, level, namespace_, name_='Length', pretty_print=pretty_print)
        if self.Width is not None:
            self.Width.export(outfile, level, namespace_, name_='Width', pretty_print=pretty_print)
        if self.Height is not None:
            self.Height.export(outfile, level, namespace_, name_='Height', pretty_print=pretty_print)
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitOfMeasure), input_name='UnitOfMeasure')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PalletWeight is not None:
            self.PalletWeight.export(outfile, level, namespace_, name_='PalletWeight', pretty_print=pretty_print)
        if self.PalletWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletWeightUOM>%s</%sPalletWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletWeightUOM), input_name='PalletWeightUOM')), namespace_, eol_))
        if self.PalletVolume is not None:
            self.PalletVolume.export(outfile, level, namespace_, name_='PalletVolume', pretty_print=pretty_print)
        if self.PalletVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletVolumeUOM>%s</%sPalletVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletVolumeUOM), input_name='PalletVolumeUOM')), namespace_, eol_))
        if self.PalletExchangeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletExchangeCode>%s</%sPalletExchangeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletExchangeCode), input_name='PalletExchangeCode')), namespace_, eol_))
        if self.PalletStructureCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletStructureCode>%s</%sPalletStructureCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletStructureCode), input_name='PalletStructureCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletQualifier':
            PalletQualifier_ = child_.text
            PalletQualifier_ = self.gds_validate_string(PalletQualifier_, node, 'PalletQualifier')
            self.PalletQualifier = PalletQualifier_
            # validate type PalletQualifierType275
            self.validate_PalletQualifierType275(self.PalletQualifier)
        elif nodeName_ == 'PalletValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletValue = obj_
            obj_.original_tagname_ = 'PalletValue'
        elif nodeName_ == 'PalletTypeCode':
            PalletTypeCode_ = child_.text
            PalletTypeCode_ = self.gds_validate_string(PalletTypeCode_, node, 'PalletTypeCode')
            self.PalletTypeCode = PalletTypeCode_
            # validate type PalletTypeCodeType276
            self.validate_PalletTypeCodeType276(self.PalletTypeCode)
        elif nodeName_ == 'PalletTiers':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTiers = obj_
            obj_.original_tagname_ = 'PalletTiers'
        elif nodeName_ == 'PalletBlocks':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletBlocks = obj_
            obj_.original_tagname_ = 'PalletBlocks'
        elif nodeName_ == 'UnitWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeight = obj_
            obj_.original_tagname_ = 'UnitWeight'
        elif nodeName_ == 'UnitWeightUOM':
            UnitWeightUOM_ = child_.text
            UnitWeightUOM_ = self.gds_validate_string(UnitWeightUOM_, node, 'UnitWeightUOM')
            self.UnitWeightUOM = UnitWeightUOM_
            # validate type UnitWeightUOMType277
            self.validate_UnitWeightUOMType277(self.UnitWeightUOM)
        elif nodeName_ == 'Length':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Length = obj_
            obj_.original_tagname_ = 'Length'
        elif nodeName_ == 'Width':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Width = obj_
            obj_.original_tagname_ = 'Width'
        elif nodeName_ == 'Height':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Height = obj_
            obj_.original_tagname_ = 'Height'
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
            # validate type UnitOfMeasureType278
            self.validate_UnitOfMeasureType278(self.UnitOfMeasure)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType279
            self.validate_WeightQualifierType279(self.WeightQualifier)
        elif nodeName_ == 'PalletWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeight = obj_
            obj_.original_tagname_ = 'PalletWeight'
        elif nodeName_ == 'PalletWeightUOM':
            PalletWeightUOM_ = child_.text
            PalletWeightUOM_ = self.gds_validate_string(PalletWeightUOM_, node, 'PalletWeightUOM')
            self.PalletWeightUOM = PalletWeightUOM_
            # validate type PalletWeightUOMType280
            self.validate_PalletWeightUOMType280(self.PalletWeightUOM)
        elif nodeName_ == 'PalletVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolume = obj_
            obj_.original_tagname_ = 'PalletVolume'
        elif nodeName_ == 'PalletVolumeUOM':
            PalletVolumeUOM_ = child_.text
            PalletVolumeUOM_ = self.gds_validate_string(PalletVolumeUOM_, node, 'PalletVolumeUOM')
            self.PalletVolumeUOM = PalletVolumeUOM_
            # validate type PalletVolumeUOMType281
            self.validate_PalletVolumeUOMType281(self.PalletVolumeUOM)
        elif nodeName_ == 'PalletExchangeCode':
            PalletExchangeCode_ = child_.text
            PalletExchangeCode_ = self.gds_validate_string(PalletExchangeCode_, node, 'PalletExchangeCode')
            self.PalletExchangeCode = PalletExchangeCode_
            # validate type PalletExchangeCodeType282
            self.validate_PalletExchangeCodeType282(self.PalletExchangeCode)
        elif nodeName_ == 'PalletStructureCode':
            PalletStructureCode_ = child_.text
            PalletStructureCode_ = self.gds_validate_string(PalletStructureCode_, node, 'PalletStructureCode')
            self.PalletStructureCode = PalletStructureCode_
            # validate type PalletStructureCodeType283
            self.validate_PalletStructureCodeType283(self.PalletStructureCode)
# end class PalletInformationType274


class DateType284(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type285(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType284)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType284.subclass:
            return DateType284.subclass(*args_, **kwargs_)
        else:
            return DateType284(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type285(self, value):
        # Validate type DateTimeQualifier1Type285, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type285' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType284', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType284')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType284', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType284'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType284', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type285
            self.validate_DateTimeQualifier1Type285(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType284


class ReferenceType286(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType287(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType286)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType286.subclass:
            return ReferenceType286.subclass(*args_, **kwargs_)
        else:
            return ReferenceType286(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType287(self, value):
        # Validate type ReferenceQualType287, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType287' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType286', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType286')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType286', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType286'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType286', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType287
            self.validate_ReferenceQualType287(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType288.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType286


class ReferenceIDsType288(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType289(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType288)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType288.subclass:
            return ReferenceIDsType288.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType288(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType289(self, value):
        # Validate type ReferenceQualType289, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType289' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType288', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType288')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType288', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType288'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType288', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType289
            self.validate_ReferenceQualType289(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType288


class NotesType290(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType291(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType290)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType290.subclass:
            return NotesType290.subclass(*args_, **kwargs_)
        else:
            return NotesType290(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType291(self, value):
        # Validate type NoteCodeType291, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType291' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType290', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType290')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType290', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType290'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType290', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType291
            self.validate_NoteCodeType291(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType290


class AddressType292(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType293(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType294(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType292)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType292.subclass:
            return AddressType292.subclass(*args_, **kwargs_)
        else:
            return AddressType292(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType293(self, value):
        # Validate type AddressTypeCodeType293, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType293' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType294(self, value):
        # Validate type LocationCodeQualifierType294, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType294' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType292', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType292')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType292', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType292'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType292', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType293
            self.validate_AddressTypeCodeType293(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType294
            self.validate_LocationCodeQualifierType294(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType295.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType299.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType303.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType292


class ReferenceType295(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType296(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType295)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType295.subclass:
            return ReferenceType295.subclass(*args_, **kwargs_)
        else:
            return ReferenceType295(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType296(self, value):
        # Validate type ReferenceQualType296, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType296' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType295', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType295')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType295', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType295'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType295', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType296
            self.validate_ReferenceQualType296(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType297.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType295


class ReferenceIDsType297(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType298(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType297)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType297.subclass:
            return ReferenceIDsType297.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType297(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType298(self, value):
        # Validate type ReferenceQualType298, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType298' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType297', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType297')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType297', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType297'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType297', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType298
            self.validate_ReferenceQualType298(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType297


class ContactType299(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType300(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType299)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType299.subclass:
            return ContactType299.subclass(*args_, **kwargs_)
        else:
            return ContactType299(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType300(self, value):
        # Validate type ContactTypeCodeType300, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType300' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType299', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType299')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType299', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType299'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType299', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType300
            self.validate_ContactTypeCodeType300(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType301.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType299


class AdditionalContactDetailsType301(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType302(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType301)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType301.subclass:
            return AdditionalContactDetailsType301.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType301(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType302(self, value):
        # Validate type ContactQualType302, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType302' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType301', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType301')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType301', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType301'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType301', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType302
            self.validate_ContactQualType302(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType301


class DateType303(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type304(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType303)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType303.subclass:
            return DateType303.subclass(*args_, **kwargs_)
        else:
            return DateType303(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type304(self, value):
        # Validate type DateTimeQualifier1Type304, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type304' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType303', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType303')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType303', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType303'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType303', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type304
            self.validate_DateTimeQualifier1Type304(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType303


class TaxType305(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType306(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType307(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType308(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType309(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType310(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType311(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType305)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType305.subclass:
            return TaxType305.subclass(*args_, **kwargs_)
        else:
            return TaxType305(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType306(self, value):
        # Validate type TaxTypeCodeType306, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType306' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType307(self, value):
        # Validate type TaxPercentQualType307, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType307' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType308(self, value):
        # Validate type JurisdictionQualType308, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType308' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType309(self, value):
        # Validate type TaxExemptCodeType309, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType309' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType310(self, value):
        # Validate type RelationshipCodeType310, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType310' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType311(self, value):
        # Validate type TaxHandlingCodeType311, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType311' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType305', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType305')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType305', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType305'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType305', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType306
            self.validate_TaxTypeCodeType306(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType307
            self.validate_TaxPercentQualType307(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType308
            self.validate_JurisdictionQualType308(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType309
            self.validate_TaxExemptCodeType309(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType310
            self.validate_RelationshipCodeType310(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType311
            self.validate_TaxHandlingCodeType311(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType305


class ChargesAllowancesType312(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType313(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType314(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType315(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType316(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType317(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType318(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType312)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType312.subclass:
            return ChargesAllowancesType312.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType312(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType313(self, value):
        # Validate type AllowChrgIndicatorType313, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType313' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType314(self, value):
        # Validate type AllowChrgCodeType314, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType314' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType315(self, value):
        # Validate type AllowChrgAgencyCodeType315, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType315' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType316(self, value):
        # Validate type AllowChrgPercentQualType316, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType316' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType317(self, value):
        # Validate type AllowChrgQtyUOMType317, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType317' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType318(self, value):
        # Validate type AllowChrgHandlingCodeType318, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType318' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType312', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType312')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType312', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType312'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType312', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType313
            self.validate_AllowChrgIndicatorType313(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType314
            self.validate_AllowChrgCodeType314(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType315
            self.validate_AllowChrgAgencyCodeType315(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType316
            self.validate_AllowChrgPercentQualType316(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType317
            self.validate_AllowChrgQtyUOMType317(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType318
            self.validate_AllowChrgHandlingCodeType318(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType319.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType312


class TaxType319(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType320(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType321(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType322(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType323(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType324(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType325(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType319)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType319.subclass:
            return TaxType319.subclass(*args_, **kwargs_)
        else:
            return TaxType319(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType320(self, value):
        # Validate type TaxTypeCodeType320, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType320' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType321(self, value):
        # Validate type TaxPercentQualType321, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType321' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType322(self, value):
        # Validate type JurisdictionQualType322, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType322' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType323(self, value):
        # Validate type TaxExemptCodeType323, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType323' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType324(self, value):
        # Validate type RelationshipCodeType324, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType324' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType325(self, value):
        # Validate type TaxHandlingCodeType325, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType325' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType319', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType319')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType319', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType319'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType319', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType320
            self.validate_TaxTypeCodeType320(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType321
            self.validate_TaxPercentQualType321(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType322
            self.validate_JurisdictionQualType322(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType323
            self.validate_TaxExemptCodeType323(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType324
            self.validate_RelationshipCodeType324(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType325
            self.validate_TaxHandlingCodeType325(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType319


class CarrierInformationType326(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType327(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType328(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType329(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType330(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType331(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType332(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType333(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType334(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType326)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType326.subclass:
            return CarrierInformationType326.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType326(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType327(self, value):
        # Validate type StatusCodeType327, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType327' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType328(self, value):
        # Validate type CarrierTransMethodCodeType328, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType328' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType329(self, value):
        # Validate type EquipmentDescriptionCodeType329, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType329' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType330(self, value):
        # Validate type SealStatusCodeType330, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType330' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType331(self, value):
        # Validate type OwnershipCodeType331, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType331' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType332(self, value):
        # Validate type RoutingSequenceCodeType332, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType332' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType333(self, value):
        # Validate type TransitDirectionCodeType333, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType333' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType334(self, value):
        # Validate type TransitTimeQualType334, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType334' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType326', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType326')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType326', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType326'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType326', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType327
            self.validate_StatusCodeType327(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType328
            self.validate_CarrierTransMethodCodeType328(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType329
            self.validate_EquipmentDescriptionCodeType329(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType330
            self.validate_SealStatusCodeType330(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType331
            self.validate_OwnershipCodeType331(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType332
            self.validate_RoutingSequenceCodeType332(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType333
            self.validate_TransitDirectionCodeType333(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType334
            self.validate_TransitTimeQualType334(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType335.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType337.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType326


class ServiceLevelCodesType335(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType336(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType335)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType335.subclass:
            return ServiceLevelCodesType335.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType335(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType336(self, value):
        # Validate type ServiceLevelCodeType336, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType336' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType335', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType335')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType335', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType335'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType335', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType336
            self.validate_ServiceLevelCodeType336(self.ServiceLevelCode)
# end class ServiceLevelCodesType335


class AddressType337(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType338(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType339(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType337)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType337.subclass:
            return AddressType337.subclass(*args_, **kwargs_)
        else:
            return AddressType337(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType338(self, value):
        # Validate type AddressTypeCodeType338, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType338' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType339(self, value):
        # Validate type LocationCodeQualifierType339, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType339' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType337', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType337')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType337', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType337'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType337', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType338
            self.validate_AddressTypeCodeType338(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType339
            self.validate_LocationCodeQualifierType339(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType340.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType337


class DateType340(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type341(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType340)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType340.subclass:
            return DateType340.subclass(*args_, **kwargs_)
        else:
            return DateType340(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type341(self, value):
        # Validate type DateTimeQualifier1Type341, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type341' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType340', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType340')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType340', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType340'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType340', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type341
            self.validate_DateTimeQualifier1Type341(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType340


class PackagingType342(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, PackagingCharacteristicCode=None, AgencyQualifierCode=None, PackagingDescriptionCode=None, PackagingDescription=None, UnitLoadOptionCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType343(self.ItemDescriptionType)
        self.PackagingCharacteristicCode = PackagingCharacteristicCode
        self.validate_PackagingCharacteristicCodeType344(self.PackagingCharacteristicCode)
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType345(self.AgencyQualifierCode)
        self.PackagingDescriptionCode = PackagingDescriptionCode
        self.PackagingDescription = PackagingDescription
        self.UnitLoadOptionCode = UnitLoadOptionCode
        self.validate_UnitLoadOptionCodeType346(self.UnitLoadOptionCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingType342)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingType342.subclass:
            return PackagingType342.subclass(*args_, **kwargs_)
        else:
            return PackagingType342(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_PackagingCharacteristicCode(self): return self.PackagingCharacteristicCode
    def set_PackagingCharacteristicCode(self, PackagingCharacteristicCode): self.PackagingCharacteristicCode = PackagingCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_PackagingDescriptionCode(self): return self.PackagingDescriptionCode
    def set_PackagingDescriptionCode(self, PackagingDescriptionCode): self.PackagingDescriptionCode = PackagingDescriptionCode
    def get_PackagingDescription(self): return self.PackagingDescription
    def set_PackagingDescription(self, PackagingDescription): self.PackagingDescription = PackagingDescription
    def get_UnitLoadOptionCode(self): return self.UnitLoadOptionCode
    def set_UnitLoadOptionCode(self, UnitLoadOptionCode): self.UnitLoadOptionCode = UnitLoadOptionCode
    def validate_ItemDescriptionTypeType343(self, value):
        # Validate type ItemDescriptionTypeType343, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType343' % {"value" : value.encode("utf-8")} )
    def validate_PackagingCharacteristicCodeType344(self, value):
        # Validate type PackagingCharacteristicCodeType344, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['10', '34', '35', '36', 'HZ', 'PK']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackagingCharacteristicCodeType344' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType345(self, value):
        # Validate type AgencyQualifierCodeType345, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType345' % {"value" : value.encode("utf-8")} )
    def validate_UnitLoadOptionCodeType346(self, value):
        # Validate type UnitLoadOptionCodeType346, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitLoadOptionCodeType346' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.PackagingCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.PackagingDescriptionCode is not None or
            self.PackagingDescription is not None or
            self.UnitLoadOptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackagingType342', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackagingType342')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackagingType342', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackagingType342'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackagingType342', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.PackagingCharacteristicCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingCharacteristicCode>%s</%sPackagingCharacteristicCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackagingCharacteristicCode), input_name='PackagingCharacteristicCode')), namespace_, eol_))
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.PackagingDescriptionCode is not None:
            self.PackagingDescriptionCode.export(outfile, level, namespace_, name_='PackagingDescriptionCode', pretty_print=pretty_print)
        if self.PackagingDescription is not None:
            self.PackagingDescription.export(outfile, level, namespace_, name_='PackagingDescription', pretty_print=pretty_print)
        if self.UnitLoadOptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitLoadOptionCode>%s</%sUnitLoadOptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitLoadOptionCode), input_name='UnitLoadOptionCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType343
            self.validate_ItemDescriptionTypeType343(self.ItemDescriptionType)
        elif nodeName_ == 'PackagingCharacteristicCode':
            PackagingCharacteristicCode_ = child_.text
            PackagingCharacteristicCode_ = self.gds_validate_string(PackagingCharacteristicCode_, node, 'PackagingCharacteristicCode')
            self.PackagingCharacteristicCode = PackagingCharacteristicCode_
            # validate type PackagingCharacteristicCodeType344
            self.validate_PackagingCharacteristicCodeType344(self.PackagingCharacteristicCode)
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType345
            self.validate_AgencyQualifierCodeType345(self.AgencyQualifierCode)
        elif nodeName_ == 'PackagingDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescriptionCode = obj_
            obj_.original_tagname_ = 'PackagingDescriptionCode'
        elif nodeName_ == 'PackagingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescription = obj_
            obj_.original_tagname_ = 'PackagingDescription'
        elif nodeName_ == 'UnitLoadOptionCode':
            UnitLoadOptionCode_ = child_.text
            UnitLoadOptionCode_ = self.gds_validate_string(UnitLoadOptionCode_, node, 'UnitLoadOptionCode')
            self.UnitLoadOptionCode = UnitLoadOptionCode_
            # validate type UnitLoadOptionCodeType346
            self.validate_UnitLoadOptionCodeType346(self.UnitLoadOptionCode)
# end class PackagingType342


class ItemLevelType347(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentLine=None, PhysicalDetails=None, CarrierSpecialHandlingDetail=None, CarrierInformation=None, Measurements=None, PriceInformation=None, ProductOrItemDescription=None, MasterItemAttribute=None, Date=None, Reference=None, Notes=None, Commodity=None, Address=None, Sublines=None, Tax=None, ChargesAllowances=None, ItemLoadInfo=None):
        self.original_tagname_ = None
        self.ShipmentLine = ShipmentLine
        if PhysicalDetails is None:
            self.PhysicalDetails = []
        else:
            self.PhysicalDetails = PhysicalDetails
        if CarrierSpecialHandlingDetail is None:
            self.CarrierSpecialHandlingDetail = []
        else:
            self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if MasterItemAttribute is None:
            self.MasterItemAttribute = []
        else:
            self.MasterItemAttribute = MasterItemAttribute
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        self.Sublines = Sublines
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if ItemLoadInfo is None:
            self.ItemLoadInfo = []
        else:
            self.ItemLoadInfo = ItemLoadInfo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLevelType347)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLevelType347.subclass:
            return ItemLevelType347.subclass(*args_, **kwargs_)
        else:
            return ItemLevelType347(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentLine(self): return self.ShipmentLine
    def set_ShipmentLine(self, ShipmentLine): self.ShipmentLine = ShipmentLine
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def add_PhysicalDetails(self, value): self.PhysicalDetails.append(value)
    def insert_PhysicalDetails_at(self, index, value): self.PhysicalDetails.insert(index, value)
    def replace_PhysicalDetails_at(self, index, value): self.PhysicalDetails[index] = value
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def add_CarrierSpecialHandlingDetail(self, value): self.CarrierSpecialHandlingDetail.append(value)
    def insert_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail.insert(index, value)
    def replace_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def add_MasterItemAttribute(self, value): self.MasterItemAttribute.append(value)
    def insert_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute.insert(index, value)
    def replace_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Sublines(self): return self.Sublines
    def set_Sublines(self, Sublines): self.Sublines = Sublines
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_ItemLoadInfo(self): return self.ItemLoadInfo
    def set_ItemLoadInfo(self, ItemLoadInfo): self.ItemLoadInfo = ItemLoadInfo
    def add_ItemLoadInfo(self, value): self.ItemLoadInfo.append(value)
    def insert_ItemLoadInfo_at(self, index, value): self.ItemLoadInfo.insert(index, value)
    def replace_ItemLoadInfo_at(self, index, value): self.ItemLoadInfo[index] = value
    def hasContent_(self):
        if (
            self.ShipmentLine is not None or
            self.PhysicalDetails or
            self.CarrierSpecialHandlingDetail or
            self.CarrierInformation or
            self.Measurements or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.MasterItemAttribute or
            self.Date or
            self.Reference or
            self.Notes or
            self.Commodity or
            self.Address or
            self.Sublines is not None or
            self.Tax or
            self.ChargesAllowances or
            self.ItemLoadInfo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLevelType347', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLevelType347')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLevelType347', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLevelType347'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLevelType347', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentLine is not None:
            self.ShipmentLine.export(outfile, level, namespace_, name_='ShipmentLine', pretty_print=pretty_print)
        for PhysicalDetails_ in self.PhysicalDetails:
            PhysicalDetails_.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        for CarrierSpecialHandlingDetail_ in self.CarrierSpecialHandlingDetail:
            CarrierSpecialHandlingDetail_.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for MasterItemAttribute_ in self.MasterItemAttribute:
            MasterItemAttribute_.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Sublines is not None:
            self.Sublines.export(outfile, level, namespace_, name_='Sublines', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for ItemLoadInfo_ in self.ItemLoadInfo:
            ItemLoadInfo_.export(outfile, level, namespace_, name_='ItemLoadInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentLine':
            obj_ = ShipmentLineType348.factory()
            obj_.build(child_)
            self.ShipmentLine = obj_
            obj_.original_tagname_ = 'ShipmentLine'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType357.factory()
            obj_.build(child_)
            self.PhysicalDetails.append(obj_)
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType366.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail.append(obj_)
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType370.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType386.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType390.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType397.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType401.factory()
            obj_.build(child_)
            self.MasterItemAttribute.append(obj_)
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'Date':
            obj_ = DateType410.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType412.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType416.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType418.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Address':
            obj_ = AddressType420.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Sublines':
            obj_ = SublinesType433.factory()
            obj_.build(child_)
            self.Sublines = obj_
            obj_.original_tagname_ = 'Sublines'
        elif nodeName_ == 'Tax':
            obj_ = TaxType455.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType462.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'ItemLoadInfo':
            obj_ = ItemLoadInfoType476.factory()
            obj_.build(child_)
            self.ItemLoadInfo.append(obj_)
            obj_.original_tagname_ = 'ItemLoadInfo'
# end class ItemLevelType347


class ShipmentLineType348(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, OrderQty=None, OrderQtyUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, ItemStatusCode=None, ShipQty=None, ShipQtyUOM=None, ShipDate=None, QtyLeftToReceive=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, SellerDateCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.OrderQty = OrderQty
        self.OrderQtyUOM = OrderQtyUOM
        self.validate_OrderQtyUOMType351(self.OrderQtyUOM)
        self.PurchasePriceType = PurchasePriceType
        self.validate_PurchasePriceTypeType352(self.PurchasePriceType)
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.validate_PurchasePriceBasisType353(self.PurchasePriceBasis)
        self.ItemStatusCode = ItemStatusCode
        self.validate_ItemStatusCodeType354(self.ItemStatusCode)
        self.ShipQty = ShipQty
        self.ShipQtyUOM = ShipQtyUOM
        self.validate_ShipQtyUOMType355(self.ShipQtyUOM)
        self.ShipDate = ShipDate
        self.QtyLeftToReceive = QtyLeftToReceive
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.SellerDateCode = SellerDateCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentLineType348)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentLineType348.subclass:
            return ShipmentLineType348.subclass(*args_, **kwargs_)
        else:
            return ShipmentLineType348(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_OrderQty(self): return self.OrderQty
    def set_OrderQty(self, OrderQty): self.OrderQty = OrderQty
    def get_OrderQtyUOM(self): return self.OrderQtyUOM
    def set_OrderQtyUOM(self, OrderQtyUOM): self.OrderQtyUOM = OrderQtyUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_ItemStatusCode(self): return self.ItemStatusCode
    def set_ItemStatusCode(self, ItemStatusCode): self.ItemStatusCode = ItemStatusCode
    def get_ShipQty(self): return self.ShipQty
    def set_ShipQty(self, ShipQty): self.ShipQty = ShipQty
    def get_ShipQtyUOM(self): return self.ShipQtyUOM
    def set_ShipQtyUOM(self, ShipQtyUOM): self.ShipQtyUOM = ShipQtyUOM
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_QtyLeftToReceive(self): return self.QtyLeftToReceive
    def set_QtyLeftToReceive(self, QtyLeftToReceive): self.QtyLeftToReceive = QtyLeftToReceive
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_SellerDateCode(self): return self.SellerDateCode
    def set_SellerDateCode(self, SellerDateCode): self.SellerDateCode = SellerDateCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def validate_OrderQtyUOMType351(self, value):
        # Validate type OrderQtyUOMType351, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OrderQtyUOMType351' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceTypeType352(self, value):
        # Validate type PurchasePriceTypeType352, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceTypeType352' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceBasisType353(self, value):
        # Validate type PurchasePriceBasisType353, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceBasisType353' % {"value" : value.encode("utf-8")} )
    def validate_ItemStatusCodeType354(self, value):
        # Validate type ItemStatusCodeType354, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'AR', 'BP', 'DR', 'IA', 'IB', 'IC', 'ID', 'IF', 'IH', 'IP', 'IQ', 'IR', 'IS', 'R1', 'R2', 'R4', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemStatusCodeType354' % {"value" : value.encode("utf-8")} )
    def validate_ShipQtyUOMType355(self, value):
        # Validate type ShipQtyUOMType355, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipQtyUOMType355' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.OrderQty is not None or
            self.OrderQtyUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.ItemStatusCode is not None or
            self.ShipQty is not None or
            self.ShipQtyUOM is not None or
            self.ShipDate is not None or
            self.QtyLeftToReceive is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.SellerDateCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentLineType348', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentLineType348')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentLineType348', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentLineType348'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentLineType348', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.OrderQty is not None:
            self.OrderQty.export(outfile, level, namespace_, name_='OrderQty', pretty_print=pretty_print)
        if self.OrderQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderQtyUOM>%s</%sOrderQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OrderQtyUOM), input_name='OrderQtyUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.ItemStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemStatusCode>%s</%sItemStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemStatusCode), input_name='ItemStatusCode')), namespace_, eol_))
        if self.ShipQty is not None:
            self.ShipQty.export(outfile, level, namespace_, name_='ShipQty', pretty_print=pretty_print)
        if self.ShipQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipQtyUOM>%s</%sShipQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ShipQtyUOM), input_name='ShipQtyUOM')), namespace_, eol_))
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.QtyLeftToReceive is not None:
            self.QtyLeftToReceive.export(outfile, level, namespace_, name_='QtyLeftToReceive', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Class is not None:
            self.Class.export(outfile, level, namespace_, name_='Class', pretty_print=pretty_print)
        if self.SellerDateCode is not None:
            self.SellerDateCode.export(outfile, level, namespace_, name_='SellerDateCode', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType349.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'OrderQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQty = obj_
            obj_.original_tagname_ = 'OrderQty'
        elif nodeName_ == 'OrderQtyUOM':
            OrderQtyUOM_ = child_.text
            OrderQtyUOM_ = self.gds_validate_string(OrderQtyUOM_, node, 'OrderQtyUOM')
            self.OrderQtyUOM = OrderQtyUOM_
            # validate type OrderQtyUOMType351
            self.validate_OrderQtyUOMType351(self.OrderQtyUOM)
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
            # validate type PurchasePriceTypeType352
            self.validate_PurchasePriceTypeType352(self.PurchasePriceType)
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
            # validate type PurchasePriceBasisType353
            self.validate_PurchasePriceBasisType353(self.PurchasePriceBasis)
        elif nodeName_ == 'ItemStatusCode':
            ItemStatusCode_ = child_.text
            ItemStatusCode_ = self.gds_validate_string(ItemStatusCode_, node, 'ItemStatusCode')
            self.ItemStatusCode = ItemStatusCode_
            # validate type ItemStatusCodeType354
            self.validate_ItemStatusCodeType354(self.ItemStatusCode)
        elif nodeName_ == 'ShipQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQty = obj_
            obj_.original_tagname_ = 'ShipQty'
        elif nodeName_ == 'ShipQtyUOM':
            ShipQtyUOM_ = child_.text
            ShipQtyUOM_ = self.gds_validate_string(ShipQtyUOM_, node, 'ShipQtyUOM')
            self.ShipQtyUOM = ShipQtyUOM_
            # validate type ShipQtyUOMType355
            self.validate_ShipQtyUOMType355(self.ShipQtyUOM)
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'QtyLeftToReceive':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyLeftToReceive = obj_
            obj_.original_tagname_ = 'QtyLeftToReceive'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Class':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Class = obj_
            obj_.original_tagname_ = 'Class'
        elif nodeName_ == 'SellerDateCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellerDateCode = obj_
            obj_.original_tagname_ = 'SellerDateCode'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType356.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class ShipmentLineType348


class ProductIDType349(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.validate_PartNumberQualType350(self.PartNumberQual)
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType349)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType349.subclass:
            return ProductIDType349.subclass(*args_, **kwargs_)
        else:
            return ProductIDType349(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def validate_PartNumberQualType350(self, value):
        # Validate type PartNumberQualType350, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['B8', 'BO', 'CB', 'FU', 'IS', 'IT', 'IZ', 'MG', 'MN', 'N5', 'SK', 'SZ', 'VA', 'VC', 'VE', 'ZBP', 'ZVP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PartNumberQualType350' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType349', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType349')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType349', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType349'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType349', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
            # validate type PartNumberQualType350
            self.validate_PartNumberQualType350(self.PartNumberQual)
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType349


class NRFStandardColorAndSizeType356(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType356)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType356.subclass:
            return NRFStandardColorAndSizeType356.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType356(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType356', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType356')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType356', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType356'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType356', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType356


class PhysicalDetailsType357(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.validate_PackQualifierType358(self.PackQualifier)
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.validate_PackUOMType359(self.PackUOM)
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType360(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType361(self.PackingMaterial)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType362(self.WeightQualifier)
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.validate_PackWeightUOMType363(self.PackWeightUOM)
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.validate_PackVolumeUOMType364(self.PackVolumeUOM)
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.validate_PackDimensionUOMType365(self.PackDimensionUOM)
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType357)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType357.subclass:
            return PhysicalDetailsType357.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType357(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def validate_PackQualifierType358(self, value):
        # Validate type PackQualifierType358, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackQualifierType358' % {"value" : value.encode("utf-8")} )
    def validate_PackUOMType359(self, value):
        # Validate type PackUOMType359, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackUOMType359' % {"value" : value.encode("utf-8")} )
    def validate_PackingMediumType360(self, value):
        # Validate type PackingMediumType360, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType360' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType361(self, value):
        # Validate type PackingMaterialType361, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType361' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType362(self, value):
        # Validate type WeightQualifierType362, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType362' % {"value" : value.encode("utf-8")} )
    def validate_PackWeightUOMType363(self, value):
        # Validate type PackWeightUOMType363, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackWeightUOMType363' % {"value" : value.encode("utf-8")} )
    def validate_PackVolumeUOMType364(self, value):
        # Validate type PackVolumeUOMType364, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackVolumeUOMType364' % {"value" : value.encode("utf-8")} )
    def validate_PackDimensionUOMType365(self, value):
        # Validate type PackDimensionUOMType365, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackDimensionUOMType365' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType357', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType357')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType357', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType357'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType357', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackQualifier>%s</%sPackQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackQualifier), input_name='PackQualifier')), namespace_, eol_))
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackUOM>%s</%sPackUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackUOM), input_name='PackUOM')), namespace_, eol_))
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeightUOM>%s</%sPackWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeightUOM), input_name='PackWeightUOM')), namespace_, eol_))
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolumeUOM>%s</%sPackVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolumeUOM), input_name='PackVolumeUOM')), namespace_, eol_))
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackDimensionUOM>%s</%sPackDimensionUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackDimensionUOM), input_name='PackDimensionUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            PackQualifier_ = child_.text
            PackQualifier_ = self.gds_validate_string(PackQualifier_, node, 'PackQualifier')
            self.PackQualifier = PackQualifier_
            # validate type PackQualifierType358
            self.validate_PackQualifierType358(self.PackQualifier)
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            PackUOM_ = child_.text
            PackUOM_ = self.gds_validate_string(PackUOM_, node, 'PackUOM')
            self.PackUOM = PackUOM_
            # validate type PackUOMType359
            self.validate_PackUOMType359(self.PackUOM)
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType360
            self.validate_PackingMediumType360(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType361
            self.validate_PackingMaterialType361(self.PackingMaterial)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType362
            self.validate_WeightQualifierType362(self.WeightQualifier)
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            PackWeightUOM_ = child_.text
            PackWeightUOM_ = self.gds_validate_string(PackWeightUOM_, node, 'PackWeightUOM')
            self.PackWeightUOM = PackWeightUOM_
            # validate type PackWeightUOMType363
            self.validate_PackWeightUOMType363(self.PackWeightUOM)
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            PackVolumeUOM_ = child_.text
            PackVolumeUOM_ = self.gds_validate_string(PackVolumeUOM_, node, 'PackVolumeUOM')
            self.PackVolumeUOM = PackVolumeUOM_
            # validate type PackVolumeUOMType364
            self.validate_PackVolumeUOMType364(self.PackVolumeUOM)
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            PackDimensionUOM_ = child_.text
            PackDimensionUOM_ = self.gds_validate_string(PackDimensionUOM_, node, 'PackDimensionUOM')
            self.PackDimensionUOM = PackDimensionUOM_
            # validate type PackDimensionUOMType365
            self.validate_PackDimensionUOMType365(self.PackDimensionUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType357


class CarrierSpecialHandlingDetailType366(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.validate_SpecialHandlingCodeType367(self.SpecialHandlingCode)
        self.HazardousMaterialCode = HazardousMaterialCode
        self.validate_HazardousMaterialCodeType368(self.HazardousMaterialCode)
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType369(self.YesOrNoResponse)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType366)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType366.subclass:
            return CarrierSpecialHandlingDetailType366.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType366(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def validate_SpecialHandlingCodeType367(self, value):
        # Validate type SpecialHandlingCodeType367, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AH', 'BKA', 'CO', 'DA', 'DNF', 'EL', 'EX', 'FL', 'FP', 'FR', 'HM', 'IC', 'KMD', 'MRF', 'NPR', 'NW', 'OPR', 'OSB', 'OTC', 'PFH', 'PG', 'PHR', 'RM', 'SUIP', 'UN', 'UNDF', 'VOC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SpecialHandlingCodeType367' % {"value" : value.encode("utf-8")} )
    def validate_HazardousMaterialCodeType368(self, value):
        # Validate type HazardousMaterialCodeType368, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['D', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on HazardousMaterialCodeType368' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType369(self, value):
        # Validate type YesOrNoResponseType369, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType369' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType366', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType366')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType366', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType366'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType366', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialHandlingCode>%s</%sSpecialHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SpecialHandlingCode), input_name='SpecialHandlingCode')), namespace_, eol_))
        if self.HazardousMaterialCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialCode>%s</%sHazardousMaterialCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialCode), input_name='HazardousMaterialCode')), namespace_, eol_))
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            SpecialHandlingCode_ = child_.text
            SpecialHandlingCode_ = self.gds_validate_string(SpecialHandlingCode_, node, 'SpecialHandlingCode')
            self.SpecialHandlingCode = SpecialHandlingCode_
            # validate type SpecialHandlingCodeType367
            self.validate_SpecialHandlingCodeType367(self.SpecialHandlingCode)
        elif nodeName_ == 'HazardousMaterialCode':
            HazardousMaterialCode_ = child_.text
            HazardousMaterialCode_ = self.gds_validate_string(HazardousMaterialCode_, node, 'HazardousMaterialCode')
            self.HazardousMaterialCode = HazardousMaterialCode_
            # validate type HazardousMaterialCodeType368
            self.validate_HazardousMaterialCodeType368(self.HazardousMaterialCode)
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType369
            self.validate_YesOrNoResponseType369(self.YesOrNoResponse)
# end class CarrierSpecialHandlingDetailType366


class CarrierInformationType370(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType371(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType372(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType373(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType374(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType375(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType376(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType377(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType378(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType370)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType370.subclass:
            return CarrierInformationType370.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType370(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType371(self, value):
        # Validate type StatusCodeType371, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType371' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType372(self, value):
        # Validate type CarrierTransMethodCodeType372, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType372' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType373(self, value):
        # Validate type EquipmentDescriptionCodeType373, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType373' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType374(self, value):
        # Validate type SealStatusCodeType374, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType374' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType375(self, value):
        # Validate type OwnershipCodeType375, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType375' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType376(self, value):
        # Validate type RoutingSequenceCodeType376, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType376' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType377(self, value):
        # Validate type TransitDirectionCodeType377, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType377' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType378(self, value):
        # Validate type TransitTimeQualType378, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType378' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType370', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType370')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType370', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType370'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType370', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType371
            self.validate_StatusCodeType371(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType372
            self.validate_CarrierTransMethodCodeType372(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType373
            self.validate_EquipmentDescriptionCodeType373(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType374
            self.validate_SealStatusCodeType374(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType375
            self.validate_OwnershipCodeType375(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType376
            self.validate_RoutingSequenceCodeType376(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType377
            self.validate_TransitDirectionCodeType377(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType378
            self.validate_TransitTimeQualType378(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType379.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType381.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType370


class ServiceLevelCodesType379(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType380(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType379)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType379.subclass:
            return ServiceLevelCodesType379.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType379(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType380(self, value):
        # Validate type ServiceLevelCodeType380, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType380' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType379', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType379')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType379', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType379'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType379', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType380
            self.validate_ServiceLevelCodeType380(self.ServiceLevelCode)
# end class ServiceLevelCodesType379


class AddressType381(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType382(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType383(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType381)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType381.subclass:
            return AddressType381.subclass(*args_, **kwargs_)
        else:
            return AddressType381(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType382(self, value):
        # Validate type AddressTypeCodeType382, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType382' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType383(self, value):
        # Validate type LocationCodeQualifierType383, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType383' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType381', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType381')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType381', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType381'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType381', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType382
            self.validate_AddressTypeCodeType382(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType383
            self.validate_LocationCodeQualifierType383(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType384.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType381


class DateType384(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type385(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType384)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType384.subclass:
            return DateType384.subclass(*args_, **kwargs_)
        else:
            return DateType384(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type385(self, value):
        # Validate type DateTimeQualifier1Type385, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type385' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType384', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType384')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType384', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType384'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType384', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type385
            self.validate_DateTimeQualifier1Type385(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType384


class MeasurementsType386(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.validate_MeasurementQualifierType387(self.MeasurementQualifier)
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.validate_CompositeUOMType388(self.CompositeUOM)
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.validate_MeasurementSignificanceCodeType389(self.MeasurementSignificanceCode)
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType386)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType386.subclass:
            return MeasurementsType386.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType386(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def validate_MeasurementQualifierType387(self, value):
        # Validate type MeasurementQualifierType387, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CRM', 'CVOL', 'CWHT', 'D9', 'DI', 'DIA', 'DP', 'HT', 'LN', 'PRS', 'PW', 'TC', 'THU', 'TT', 'VOL', 'WD', 'WT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementQualifierType387' % {"value" : value.encode("utf-8")} )
    def validate_CompositeUOMType388(self, value):
        # Validate type CompositeUOMType388, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CompositeUOMType388' % {"value" : value.encode("utf-8")} )
    def validate_MeasurementSignificanceCodeType389(self, value):
        # Validate type MeasurementSignificanceCodeType389, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementSignificanceCodeType389' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType386', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType386')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType386', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType386'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType386', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
            # validate type MeasurementQualifierType387
            self.validate_MeasurementQualifierType387(self.MeasurementQualifier)
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
            # validate type CompositeUOMType388
            self.validate_CompositeUOMType388(self.CompositeUOM)
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
            # validate type MeasurementSignificanceCodeType389
            self.validate_MeasurementSignificanceCodeType389(self.MeasurementSignificanceCode)
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType386


class PriceInformationType390(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.validate_ChangeReasonCodeType391(self.ChangeReasonCode)
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.validate_PriceTypeIDCodeType392(self.PriceTypeIDCode)
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.validate_UnitPriceBasisType393(self.UnitPriceBasis)
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.validate_PriceMultiplierQualType394(self.PriceMultiplierQual)
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.validate_QuantityUOMType395(self.QuantityUOM)
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.validate_ClassOfTradeCodeType396(self.ClassOfTradeCode)
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType390)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType390.subclass:
            return PriceInformationType390.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType390(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_ChangeReasonCodeType391(self, value):
        # Validate type ChangeReasonCodeType391, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AQ', 'EV', 'PS', 'QO', 'UP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ChangeReasonCodeType391' % {"value" : value.encode("utf-8")} )
    def validate_PriceTypeIDCodeType392(self, value):
        # Validate type PriceTypeIDCodeType392, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceTypeIDCodeType392' % {"value" : value.encode("utf-8")} )
    def validate_UnitPriceBasisType393(self, value):
        # Validate type UnitPriceBasisType393, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitPriceBasisType393' % {"value" : value.encode("utf-8")} )
    def validate_PriceMultiplierQualType394(self, value):
        # Validate type PriceMultiplierQualType394, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CSD', 'CSR', 'DIS', 'ILP', 'PSP', 'SEL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceMultiplierQualType394' % {"value" : value.encode("utf-8")} )
    def validate_QuantityUOMType395(self, value):
        # Validate type QuantityUOMType395, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QuantityUOMType395' % {"value" : value.encode("utf-8")} )
    def validate_ClassOfTradeCodeType396(self, value):
        # Validate type ClassOfTradeCodeType396, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RS', 'SA', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ClassOfTradeCodeType396' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType390', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType390')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType390', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType390'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType390', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
            # validate type ChangeReasonCodeType391
            self.validate_ChangeReasonCodeType391(self.ChangeReasonCode)
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
            # validate type PriceTypeIDCodeType392
            self.validate_PriceTypeIDCodeType392(self.PriceTypeIDCode)
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
            # validate type UnitPriceBasisType393
            self.validate_UnitPriceBasisType393(self.UnitPriceBasis)
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
            # validate type PriceMultiplierQualType394
            self.validate_PriceMultiplierQualType394(self.PriceMultiplierQual)
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
            # validate type QuantityUOMType395
            self.validate_QuantityUOMType395(self.QuantityUOM)
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
            # validate type ClassOfTradeCodeType396
            self.validate_ClassOfTradeCodeType396(self.ClassOfTradeCode)
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType390


class ProductOrItemDescriptionType397(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType398(self.ItemDescriptionType)
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType399(self.AgencyQualifierCode)
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType400(self.YesOrNoResponse)
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType397)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType397.subclass:
            return ProductOrItemDescriptionType397.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType397(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def validate_ItemDescriptionTypeType398(self, value):
        # Validate type ItemDescriptionTypeType398, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType398' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType399(self, value):
        # Validate type AgencyQualifierCodeType399, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType399' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType400(self, value):
        # Validate type YesOrNoResponseType400, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType400' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType397', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType397')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType397', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType397'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType397', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType398
            self.validate_ItemDescriptionTypeType398(self.ItemDescriptionType)
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType399
            self.validate_AgencyQualifierCodeType399(self.AgencyQualifierCode)
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType400
            self.validate_YesOrNoResponseType400(self.YesOrNoResponse)
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType397


class MasterItemAttributeType401(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        if ItemAttribute is None:
            self.ItemAttribute = []
        else:
            self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType401)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType401.subclass:
            return MasterItemAttributeType401.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType401(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def add_ItemAttribute(self, value): self.ItemAttribute.append(value)
    def insert_ItemAttribute_at(self, index, value): self.ItemAttribute.insert(index, value)
    def replace_ItemAttribute_at(self, index, value): self.ItemAttribute[index] = value
    def hasContent_(self):
        if (
            self.ItemAttribute
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType401', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType401')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType401', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType401'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType401', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemAttribute_ in self.ItemAttribute:
            ItemAttribute_.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType402.factory()
            obj_.build(child_)
            self.ItemAttribute.append(obj_)
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType401


class ItemAttributeType402(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.validate_ItemAttributeQualifierType403(self.ItemAttributeQualifier)
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.validate_ValueUOMType404(self.ValueUOM)
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType405(self.YesOrNoResponse)
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType402)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType402.subclass:
            return ItemAttributeType402.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType402(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def validate_ItemAttributeQualifierType403(self, value):
        # Validate type ItemAttributeQualifierType403, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ATH', 'BARC', 'BIND', 'BRN', 'CH', 'CI', 'COO', 'DESR', 'DF', 'DNC', 'DS', 'EDT', 'ESC', 'HE', 'ITS', 'LQD', 'MAK', 'MOD', 'MSD', 'MYE', 'PBL', 'REP', 'RI', 'RP', 'RTC', 'SET', 'SHL', 'SL', 'SN', 'SPC', 'SSZ', 'STG', 'SVC', 'SVD', 'SW', 'TEA', 'TIT', 'WAR', 'WOOD', 'WPF', 'WR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemAttributeQualifierType403' % {"value" : value.encode("utf-8")} )
    def validate_ValueUOMType404(self, value):
        # Validate type ValueUOMType404, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ValueUOMType404' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType405(self, value):
        # Validate type YesOrNoResponseType405, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType405' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType402', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType402')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType402', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType402'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType402', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemAttributeQualifier>%s</%sItemAttributeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemAttributeQualifier), input_name='ItemAttributeQualifier')), namespace_, eol_))
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
        if self.ValueUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueUOM>%s</%sValueUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ValueUOM), input_name='ValueUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            ItemAttributeQualifier_ = child_.text
            ItemAttributeQualifier_ = self.gds_validate_string(ItemAttributeQualifier_, node, 'ItemAttributeQualifier')
            self.ItemAttributeQualifier = ItemAttributeQualifier_
            # validate type ItemAttributeQualifierType403
            self.validate_ItemAttributeQualifierType403(self.ItemAttributeQualifier)
        elif nodeName_ == 'Value':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
        elif nodeName_ == 'ValueUOM':
            ValueUOM_ = child_.text
            ValueUOM_ = self.gds_validate_string(ValueUOM_, node, 'ValueUOM')
            self.ValueUOM = ValueUOM_
            # validate type ValueUOMType404
            self.validate_ValueUOMType404(self.ValueUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType405
            self.validate_YesOrNoResponseType405(self.YesOrNoResponse)
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType406.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType402


class MeasurementsType406(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.validate_MeasurementQualifierType407(self.MeasurementQualifier)
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.validate_CompositeUOMType408(self.CompositeUOM)
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.validate_MeasurementSignificanceCodeType409(self.MeasurementSignificanceCode)
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType406)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType406.subclass:
            return MeasurementsType406.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType406(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def validate_MeasurementQualifierType407(self, value):
        # Validate type MeasurementQualifierType407, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CRM', 'CVOL', 'CWHT', 'D9', 'DI', 'DIA', 'DP', 'HT', 'LN', 'PRS', 'PW', 'TC', 'THU', 'TT', 'VOL', 'WD', 'WT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementQualifierType407' % {"value" : value.encode("utf-8")} )
    def validate_CompositeUOMType408(self, value):
        # Validate type CompositeUOMType408, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CompositeUOMType408' % {"value" : value.encode("utf-8")} )
    def validate_MeasurementSignificanceCodeType409(self, value):
        # Validate type MeasurementSignificanceCodeType409, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementSignificanceCodeType409' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType406', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType406')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType406', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType406'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType406', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
            # validate type MeasurementQualifierType407
            self.validate_MeasurementQualifierType407(self.MeasurementQualifier)
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
            # validate type CompositeUOMType408
            self.validate_CompositeUOMType408(self.CompositeUOM)
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
            # validate type MeasurementSignificanceCodeType409
            self.validate_MeasurementSignificanceCodeType409(self.MeasurementSignificanceCode)
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType406


class DateType410(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type411(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType410)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType410.subclass:
            return DateType410.subclass(*args_, **kwargs_)
        else:
            return DateType410(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type411(self, value):
        # Validate type DateTimeQualifier1Type411, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type411' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType410', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType410')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType410', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType410'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType410', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type411
            self.validate_DateTimeQualifier1Type411(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType410


class ReferenceType412(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType413(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType412)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType412.subclass:
            return ReferenceType412.subclass(*args_, **kwargs_)
        else:
            return ReferenceType412(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType413(self, value):
        # Validate type ReferenceQualType413, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType413' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType412', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType412')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType412', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType412'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType412', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType413
            self.validate_ReferenceQualType413(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType414.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType412


class ReferenceIDsType414(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType415(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType414)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType414.subclass:
            return ReferenceIDsType414.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType414(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType415(self, value):
        # Validate type ReferenceQualType415, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType415' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType414', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType414')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType414', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType414'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType414', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType415
            self.validate_ReferenceQualType415(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType414


class NotesType416(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType417(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType416)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType416.subclass:
            return NotesType416.subclass(*args_, **kwargs_)
        else:
            return NotesType416(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType417(self, value):
        # Validate type NoteCodeType417, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType417' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType416', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType416')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType416', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType416'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType416', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType417
            self.validate_NoteCodeType417(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType416


class CommodityType418(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType419(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType418)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType418.subclass:
            return CommodityType418.subclass(*args_, **kwargs_)
        else:
            return CommodityType418(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType419(self, value):
        # Validate type CommodityCodeQualifierType419, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType419' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType418', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType418')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType418', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType418'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType418', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType419
            self.validate_CommodityCodeQualifierType419(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType418


class AddressType420(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType421(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType422(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType420)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType420.subclass:
            return AddressType420.subclass(*args_, **kwargs_)
        else:
            return AddressType420(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType421(self, value):
        # Validate type AddressTypeCodeType421, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType421' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType422(self, value):
        # Validate type LocationCodeQualifierType422, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType422' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType420', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType420')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType420', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType420'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType420', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType421
            self.validate_AddressTypeCodeType421(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType422
            self.validate_LocationCodeQualifierType422(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType423.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType427.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType431.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType420


class ReferenceType423(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType424(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType423)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType423.subclass:
            return ReferenceType423.subclass(*args_, **kwargs_)
        else:
            return ReferenceType423(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType424(self, value):
        # Validate type ReferenceQualType424, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType424' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType423', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType423')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType423', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType423'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType423', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType424
            self.validate_ReferenceQualType424(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType425.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType423


class ReferenceIDsType425(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType426(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType425)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType425.subclass:
            return ReferenceIDsType425.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType425(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType426(self, value):
        # Validate type ReferenceQualType426, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType426' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType425', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType425')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType425', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType425'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType425', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType426
            self.validate_ReferenceQualType426(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType425


class ContactType427(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType428(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType427)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType427.subclass:
            return ContactType427.subclass(*args_, **kwargs_)
        else:
            return ContactType427(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType428(self, value):
        # Validate type ContactTypeCodeType428, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType428' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType427', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType427')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType427', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType427'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType427', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType428
            self.validate_ContactTypeCodeType428(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType429.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType427


class AdditionalContactDetailsType429(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType430(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType429)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType429.subclass:
            return AdditionalContactDetailsType429.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType429(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType430(self, value):
        # Validate type ContactQualType430, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType430' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType429', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType429')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType429', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType429'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType429', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType430
            self.validate_ContactQualType430(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType429


class DateType431(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type432(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType431)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType431.subclass:
            return DateType431.subclass(*args_, **kwargs_)
        else:
            return DateType431(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type432(self, value):
        # Validate type DateTimeQualifier1Type432, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type432' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType431', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType431')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType431', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType431'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType431', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type432
            self.validate_DateTimeQualifier1Type432(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType431


class SublinesType433(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Subline=None):
        self.original_tagname_ = None
        if Subline is None:
            self.Subline = []
        else:
            self.Subline = Subline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublinesType433)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublinesType433.subclass:
            return SublinesType433.subclass(*args_, **kwargs_)
        else:
            return SublinesType433(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def add_Subline(self, value): self.Subline.append(value)
    def insert_Subline_at(self, index, value): self.Subline.insert(index, value)
    def replace_Subline_at(self, index, value): self.Subline[index] = value
    def hasContent_(self):
        if (
            self.Subline
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublinesType433', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublinesType433')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublinesType433', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublinesType433'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublinesType433', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Subline_ in self.Subline:
            Subline_.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Subline':
            obj_ = SublineType434.factory()
            obj_.build(child_)
            self.Subline.append(obj_)
            obj_.original_tagname_ = 'Subline'
# end class SublinesType433


class SublineType434(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, PriceInformation=None, ProductOrItemDescription=None, Commodity=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType434)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType434.subclass:
            return SublineType434.subclass(*args_, **kwargs_)
        else:
            return SublineType434(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.Commodity
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType434', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType434')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType434', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType434'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType434', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType435.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType442.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType449.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType453.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
# end class SublineType434


class SublineItemDetailType435(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.validate_QtyPerUOMType438(self.QtyPerUOM)
        self.PurchasePriceType = PurchasePriceType
        self.validate_PurchasePriceTypeType439(self.PurchasePriceType)
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.validate_PurchasePriceBasisType440(self.PurchasePriceBasis)
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType435)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType435.subclass:
            return SublineItemDetailType435.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType435(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def validate_QtyPerUOMType438(self, value):
        # Validate type QtyPerUOMType438, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QtyPerUOMType438' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceTypeType439(self, value):
        # Validate type PurchasePriceTypeType439, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceTypeType439' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceBasisType440(self, value):
        # Validate type PurchasePriceBasisType440, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceBasisType440' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType435', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType435')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType435', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType435'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType435', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.QtyPer is not None:
            self.QtyPer.export(outfile, level, namespace_, name_='QtyPer', pretty_print=pretty_print)
        if self.QtyPerUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQtyPerUOM>%s</%sQtyPerUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QtyPerUOM), input_name='QtyPerUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType436.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'QtyPer':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPer = obj_
            obj_.original_tagname_ = 'QtyPer'
        elif nodeName_ == 'QtyPerUOM':
            QtyPerUOM_ = child_.text
            QtyPerUOM_ = self.gds_validate_string(QtyPerUOM_, node, 'QtyPerUOM')
            self.QtyPerUOM = QtyPerUOM_
            # validate type QtyPerUOMType438
            self.validate_QtyPerUOMType438(self.QtyPerUOM)
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
            # validate type PurchasePriceTypeType439
            self.validate_PurchasePriceTypeType439(self.PurchasePriceType)
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
            # validate type PurchasePriceBasisType440
            self.validate_PurchasePriceBasisType440(self.PurchasePriceBasis)
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType441.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType435


class ProductIDType436(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.validate_PartNumberQualType437(self.PartNumberQual)
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType436)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType436.subclass:
            return ProductIDType436.subclass(*args_, **kwargs_)
        else:
            return ProductIDType436(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def validate_PartNumberQualType437(self, value):
        # Validate type PartNumberQualType437, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['B8', 'BO', 'CB', 'FU', 'IS', 'IT', 'IZ', 'MG', 'MN', 'N5', 'SK', 'SZ', 'VA', 'VC', 'VE', 'ZBP', 'ZVP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PartNumberQualType437' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType436', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType436')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType436', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType436'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType436', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
            # validate type PartNumberQualType437
            self.validate_PartNumberQualType437(self.PartNumberQual)
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType436


class NRFStandardColorAndSizeType441(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType441)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType441.subclass:
            return NRFStandardColorAndSizeType441.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType441(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType441', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType441')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType441', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType441'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType441', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType441


class PriceInformationType442(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.validate_ChangeReasonCodeType443(self.ChangeReasonCode)
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.validate_PriceTypeIDCodeType444(self.PriceTypeIDCode)
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.validate_UnitPriceBasisType445(self.UnitPriceBasis)
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.validate_PriceMultiplierQualType446(self.PriceMultiplierQual)
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.validate_QuantityUOMType447(self.QuantityUOM)
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.validate_ClassOfTradeCodeType448(self.ClassOfTradeCode)
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType442)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType442.subclass:
            return PriceInformationType442.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType442(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_ChangeReasonCodeType443(self, value):
        # Validate type ChangeReasonCodeType443, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AQ', 'EV', 'PS', 'QO', 'UP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ChangeReasonCodeType443' % {"value" : value.encode("utf-8")} )
    def validate_PriceTypeIDCodeType444(self, value):
        # Validate type PriceTypeIDCodeType444, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceTypeIDCodeType444' % {"value" : value.encode("utf-8")} )
    def validate_UnitPriceBasisType445(self, value):
        # Validate type UnitPriceBasisType445, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitPriceBasisType445' % {"value" : value.encode("utf-8")} )
    def validate_PriceMultiplierQualType446(self, value):
        # Validate type PriceMultiplierQualType446, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CSD', 'CSR', 'DIS', 'ILP', 'PSP', 'SEL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceMultiplierQualType446' % {"value" : value.encode("utf-8")} )
    def validate_QuantityUOMType447(self, value):
        # Validate type QuantityUOMType447, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QuantityUOMType447' % {"value" : value.encode("utf-8")} )
    def validate_ClassOfTradeCodeType448(self, value):
        # Validate type ClassOfTradeCodeType448, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RS', 'SA', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ClassOfTradeCodeType448' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType442', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType442')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType442', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType442'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType442', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
            # validate type ChangeReasonCodeType443
            self.validate_ChangeReasonCodeType443(self.ChangeReasonCode)
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
            # validate type PriceTypeIDCodeType444
            self.validate_PriceTypeIDCodeType444(self.PriceTypeIDCode)
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
            # validate type UnitPriceBasisType445
            self.validate_UnitPriceBasisType445(self.UnitPriceBasis)
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
            # validate type PriceMultiplierQualType446
            self.validate_PriceMultiplierQualType446(self.PriceMultiplierQual)
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
            # validate type QuantityUOMType447
            self.validate_QuantityUOMType447(self.QuantityUOM)
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
            # validate type ClassOfTradeCodeType448
            self.validate_ClassOfTradeCodeType448(self.ClassOfTradeCode)
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType442


class ProductOrItemDescriptionType449(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType450(self.ItemDescriptionType)
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType451(self.AgencyQualifierCode)
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType452(self.YesOrNoResponse)
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType449)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType449.subclass:
            return ProductOrItemDescriptionType449.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType449(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def validate_ItemDescriptionTypeType450(self, value):
        # Validate type ItemDescriptionTypeType450, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType450' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType451(self, value):
        # Validate type AgencyQualifierCodeType451, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType451' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType452(self, value):
        # Validate type YesOrNoResponseType452, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType452' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType449', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType449')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType449', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType449'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType449', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType450
            self.validate_ItemDescriptionTypeType450(self.ItemDescriptionType)
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType451
            self.validate_AgencyQualifierCodeType451(self.AgencyQualifierCode)
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType452
            self.validate_YesOrNoResponseType452(self.YesOrNoResponse)
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType449


class CommodityType453(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType454(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType453)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType453.subclass:
            return CommodityType453.subclass(*args_, **kwargs_)
        else:
            return CommodityType453(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType454(self, value):
        # Validate type CommodityCodeQualifierType454, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType454' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType453', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType453')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType453', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType453'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType453', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType454
            self.validate_CommodityCodeQualifierType454(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType453


class TaxType455(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType456(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType457(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType458(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType459(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType460(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType461(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType455)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType455.subclass:
            return TaxType455.subclass(*args_, **kwargs_)
        else:
            return TaxType455(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType456(self, value):
        # Validate type TaxTypeCodeType456, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType456' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType457(self, value):
        # Validate type TaxPercentQualType457, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType457' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType458(self, value):
        # Validate type JurisdictionQualType458, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType458' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType459(self, value):
        # Validate type TaxExemptCodeType459, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType459' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType460(self, value):
        # Validate type RelationshipCodeType460, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType460' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType461(self, value):
        # Validate type TaxHandlingCodeType461, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType461' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType455', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType455')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType455', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType455'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType455', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType456
            self.validate_TaxTypeCodeType456(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType457
            self.validate_TaxPercentQualType457(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType458
            self.validate_JurisdictionQualType458(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType459
            self.validate_TaxExemptCodeType459(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType460
            self.validate_RelationshipCodeType460(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType461
            self.validate_TaxHandlingCodeType461(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType455


class ChargesAllowancesType462(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType463(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType464(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType465(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType466(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType467(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType468(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType462)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType462.subclass:
            return ChargesAllowancesType462.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType462(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType463(self, value):
        # Validate type AllowChrgIndicatorType463, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType463' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType464(self, value):
        # Validate type AllowChrgCodeType464, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType464' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType465(self, value):
        # Validate type AllowChrgAgencyCodeType465, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType465' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType466(self, value):
        # Validate type AllowChrgPercentQualType466, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType466' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType467(self, value):
        # Validate type AllowChrgQtyUOMType467, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType467' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType468(self, value):
        # Validate type AllowChrgHandlingCodeType468, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType468' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType462', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType462')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType462', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType462'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType462', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType463
            self.validate_AllowChrgIndicatorType463(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType464
            self.validate_AllowChrgCodeType464(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType465
            self.validate_AllowChrgAgencyCodeType465(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType466
            self.validate_AllowChrgPercentQualType466(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType467
            self.validate_AllowChrgQtyUOMType467(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType468
            self.validate_AllowChrgHandlingCodeType468(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType469.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType462


class TaxType469(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType470(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType471(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType472(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType473(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType474(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType475(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType469)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType469.subclass:
            return TaxType469.subclass(*args_, **kwargs_)
        else:
            return TaxType469(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType470(self, value):
        # Validate type TaxTypeCodeType470, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType470' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType471(self, value):
        # Validate type TaxPercentQualType471, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType471' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType472(self, value):
        # Validate type JurisdictionQualType472, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType472' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType473(self, value):
        # Validate type TaxExemptCodeType473, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType473' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType474(self, value):
        # Validate type RelationshipCodeType474, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType474' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType475(self, value):
        # Validate type TaxHandlingCodeType475, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType475' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType469', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType469')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType469', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType469'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType469', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType470
            self.validate_TaxTypeCodeType470(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType471
            self.validate_TaxPercentQualType471(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType472
            self.validate_JurisdictionQualType472(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType473
            self.validate_TaxExemptCodeType473(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType474
            self.validate_RelationshipCodeType474(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType475
            self.validate_TaxHandlingCodeType475(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType469


class ItemLoadInfoType476(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemLoad=None, Reference=None, Notes=None):
        self.original_tagname_ = None
        self.ItemLoad = ItemLoad
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadInfoType476)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadInfoType476.subclass:
            return ItemLoadInfoType476.subclass(*args_, **kwargs_)
        else:
            return ItemLoadInfoType476(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemLoad(self): return self.ItemLoad
    def set_ItemLoad(self, ItemLoad): self.ItemLoad = ItemLoad
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def hasContent_(self):
        if (
            self.ItemLoad is not None or
            self.Reference or
            self.Notes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadInfoType476', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadInfoType476')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadInfoType476', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadInfoType476'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadInfoType476', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemLoad is not None:
            self.ItemLoad.export(outfile, level, namespace_, name_='ItemLoad', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemLoad':
            obj_ = ItemLoadType477.factory()
            obj_.build(child_)
            self.ItemLoad = obj_
            obj_.original_tagname_ = 'ItemLoad'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType481.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType485.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
# end class ItemLoadInfoType476


class ItemLoadType477(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfLoads=None, UnitsShipped=None, PackingMedium=None, PackingMaterial=None, LoadSize=None, LoadSizeUOM=None):
        self.original_tagname_ = None
        self.NumberOfLoads = NumberOfLoads
        self.UnitsShipped = UnitsShipped
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType478(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType479(self.PackingMaterial)
        self.LoadSize = LoadSize
        self.LoadSizeUOM = LoadSizeUOM
        self.validate_LoadSizeUOMType480(self.LoadSizeUOM)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadType477)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadType477.subclass:
            return ItemLoadType477.subclass(*args_, **kwargs_)
        else:
            return ItemLoadType477(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfLoads(self): return self.NumberOfLoads
    def set_NumberOfLoads(self, NumberOfLoads): self.NumberOfLoads = NumberOfLoads
    def get_UnitsShipped(self): return self.UnitsShipped
    def set_UnitsShipped(self, UnitsShipped): self.UnitsShipped = UnitsShipped
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LoadSize(self): return self.LoadSize
    def set_LoadSize(self, LoadSize): self.LoadSize = LoadSize
    def get_LoadSizeUOM(self): return self.LoadSizeUOM
    def set_LoadSizeUOM(self, LoadSizeUOM): self.LoadSizeUOM = LoadSizeUOM
    def validate_PackingMediumType478(self, value):
        # Validate type PackingMediumType478, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType478' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType479(self, value):
        # Validate type PackingMaterialType479, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType479' % {"value" : value.encode("utf-8")} )
    def validate_LoadSizeUOMType480(self, value):
        # Validate type LoadSizeUOMType480, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LoadSizeUOMType480' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NumberOfLoads is not None or
            self.UnitsShipped is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LoadSize is not None or
            self.LoadSizeUOM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadType477', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadType477')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadType477', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadType477'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadType477', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfLoads is not None:
            self.NumberOfLoads.export(outfile, level, namespace_, name_='NumberOfLoads', pretty_print=pretty_print)
        if self.UnitsShipped is not None:
            self.UnitsShipped.export(outfile, level, namespace_, name_='UnitsShipped', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.LoadSize is not None:
            self.LoadSize.export(outfile, level, namespace_, name_='LoadSize', pretty_print=pretty_print)
        if self.LoadSizeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLoadSizeUOM>%s</%sLoadSizeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LoadSizeUOM), input_name='LoadSizeUOM')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfLoads':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NumberOfLoads = obj_
            obj_.original_tagname_ = 'NumberOfLoads'
        elif nodeName_ == 'UnitsShipped':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitsShipped = obj_
            obj_.original_tagname_ = 'UnitsShipped'
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType478
            self.validate_PackingMediumType478(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType479
            self.validate_PackingMaterialType479(self.PackingMaterial)
        elif nodeName_ == 'LoadSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSize = obj_
            obj_.original_tagname_ = 'LoadSize'
        elif nodeName_ == 'LoadSizeUOM':
            LoadSizeUOM_ = child_.text
            LoadSizeUOM_ = self.gds_validate_string(LoadSizeUOM_, node, 'LoadSizeUOM')
            self.LoadSizeUOM = LoadSizeUOM_
            # validate type LoadSizeUOMType480
            self.validate_LoadSizeUOMType480(self.LoadSizeUOM)
# end class ItemLoadType477


class ReferenceType481(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType482(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType481)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType481.subclass:
            return ReferenceType481.subclass(*args_, **kwargs_)
        else:
            return ReferenceType481(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType482(self, value):
        # Validate type ReferenceQualType482, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType482' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType481', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType481')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType481', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType481'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType481', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType482
            self.validate_ReferenceQualType482(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType483.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType481


class ReferenceIDsType483(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType484(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType483)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType483.subclass:
            return ReferenceIDsType483.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType483(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType484(self, value):
        # Validate type ReferenceQualType484, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType484' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType483', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType483')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType483', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType483'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType483', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType484
            self.validate_ReferenceQualType484(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType483


class NotesType485(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType486(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType485)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType485.subclass:
            return NotesType485.subclass(*args_, **kwargs_)
        else:
            return NotesType485(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType486(self, value):
        # Validate type NoteCodeType486, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType486' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType485', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType485')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType485', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType485'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType485', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType486
            self.validate_NoteCodeType486(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType485


class ItemLevelType487(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentLine=None, PhysicalDetails=None, CarrierSpecialHandlingDetail=None, CarrierInformation=None, Measurements=None, PriceInformation=None, ProductOrItemDescription=None, MasterItemAttribute=None, Date=None, Reference=None, Notes=None, Commodity=None, Address=None, Sublines=None, Tax=None, ChargesAllowances=None, ItemLoadInfo=None, PackLevel=None):
        self.original_tagname_ = None
        self.ShipmentLine = ShipmentLine
        if PhysicalDetails is None:
            self.PhysicalDetails = []
        else:
            self.PhysicalDetails = PhysicalDetails
        if CarrierSpecialHandlingDetail is None:
            self.CarrierSpecialHandlingDetail = []
        else:
            self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if MasterItemAttribute is None:
            self.MasterItemAttribute = []
        else:
            self.MasterItemAttribute = MasterItemAttribute
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        self.Sublines = Sublines
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if ItemLoadInfo is None:
            self.ItemLoadInfo = []
        else:
            self.ItemLoadInfo = ItemLoadInfo
        if PackLevel is None:
            self.PackLevel = []
        else:
            self.PackLevel = PackLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLevelType487)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLevelType487.subclass:
            return ItemLevelType487.subclass(*args_, **kwargs_)
        else:
            return ItemLevelType487(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentLine(self): return self.ShipmentLine
    def set_ShipmentLine(self, ShipmentLine): self.ShipmentLine = ShipmentLine
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def add_PhysicalDetails(self, value): self.PhysicalDetails.append(value)
    def insert_PhysicalDetails_at(self, index, value): self.PhysicalDetails.insert(index, value)
    def replace_PhysicalDetails_at(self, index, value): self.PhysicalDetails[index] = value
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def add_CarrierSpecialHandlingDetail(self, value): self.CarrierSpecialHandlingDetail.append(value)
    def insert_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail.insert(index, value)
    def replace_CarrierSpecialHandlingDetail_at(self, index, value): self.CarrierSpecialHandlingDetail[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def add_MasterItemAttribute(self, value): self.MasterItemAttribute.append(value)
    def insert_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute.insert(index, value)
    def replace_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Sublines(self): return self.Sublines
    def set_Sublines(self, Sublines): self.Sublines = Sublines
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_ItemLoadInfo(self): return self.ItemLoadInfo
    def set_ItemLoadInfo(self, ItemLoadInfo): self.ItemLoadInfo = ItemLoadInfo
    def add_ItemLoadInfo(self, value): self.ItemLoadInfo.append(value)
    def insert_ItemLoadInfo_at(self, index, value): self.ItemLoadInfo.insert(index, value)
    def replace_ItemLoadInfo_at(self, index, value): self.ItemLoadInfo[index] = value
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def add_PackLevel(self, value): self.PackLevel.append(value)
    def insert_PackLevel_at(self, index, value): self.PackLevel.insert(index, value)
    def replace_PackLevel_at(self, index, value): self.PackLevel[index] = value
    def hasContent_(self):
        if (
            self.ShipmentLine is not None or
            self.PhysicalDetails or
            self.CarrierSpecialHandlingDetail or
            self.CarrierInformation or
            self.Measurements or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.MasterItemAttribute or
            self.Date or
            self.Reference or
            self.Notes or
            self.Commodity or
            self.Address or
            self.Sublines is not None or
            self.Tax or
            self.ChargesAllowances or
            self.ItemLoadInfo or
            self.PackLevel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLevelType487', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLevelType487')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLevelType487', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLevelType487'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLevelType487', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentLine is not None:
            self.ShipmentLine.export(outfile, level, namespace_, name_='ShipmentLine', pretty_print=pretty_print)
        for PhysicalDetails_ in self.PhysicalDetails:
            PhysicalDetails_.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        for CarrierSpecialHandlingDetail_ in self.CarrierSpecialHandlingDetail:
            CarrierSpecialHandlingDetail_.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for MasterItemAttribute_ in self.MasterItemAttribute:
            MasterItemAttribute_.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Sublines is not None:
            self.Sublines.export(outfile, level, namespace_, name_='Sublines', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for ItemLoadInfo_ in self.ItemLoadInfo:
            ItemLoadInfo_.export(outfile, level, namespace_, name_='ItemLoadInfo', pretty_print=pretty_print)
        for PackLevel_ in self.PackLevel:
            PackLevel_.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentLine':
            obj_ = ShipmentLineType488.factory()
            obj_.build(child_)
            self.ShipmentLine = obj_
            obj_.original_tagname_ = 'ShipmentLine'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType497.factory()
            obj_.build(child_)
            self.PhysicalDetails.append(obj_)
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType506.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail.append(obj_)
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType510.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType526.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType530.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType537.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType541.factory()
            obj_.build(child_)
            self.MasterItemAttribute.append(obj_)
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'Date':
            obj_ = DateType550.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType552.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType556.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType558.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Address':
            obj_ = AddressType560.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Sublines':
            obj_ = SublinesType573.factory()
            obj_.build(child_)
            self.Sublines = obj_
            obj_.original_tagname_ = 'Sublines'
        elif nodeName_ == 'Tax':
            obj_ = TaxType595.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType602.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'ItemLoadInfo':
            obj_ = ItemLoadInfoType616.factory()
            obj_.build(child_)
            self.ItemLoadInfo.append(obj_)
            obj_.original_tagname_ = 'ItemLoadInfo'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel.append(obj_)
            obj_.original_tagname_ = 'PackLevel'
# end class ItemLevelType487


class ShipmentLineType488(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, OrderQty=None, OrderQtyUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, ItemStatusCode=None, ShipQty=None, ShipQtyUOM=None, ShipDate=None, QtyLeftToReceive=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, SellerDateCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.OrderQty = OrderQty
        self.OrderQtyUOM = OrderQtyUOM
        self.validate_OrderQtyUOMType491(self.OrderQtyUOM)
        self.PurchasePriceType = PurchasePriceType
        self.validate_PurchasePriceTypeType492(self.PurchasePriceType)
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.validate_PurchasePriceBasisType493(self.PurchasePriceBasis)
        self.ItemStatusCode = ItemStatusCode
        self.validate_ItemStatusCodeType494(self.ItemStatusCode)
        self.ShipQty = ShipQty
        self.ShipQtyUOM = ShipQtyUOM
        self.validate_ShipQtyUOMType495(self.ShipQtyUOM)
        self.ShipDate = ShipDate
        self.QtyLeftToReceive = QtyLeftToReceive
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.SellerDateCode = SellerDateCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentLineType488)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentLineType488.subclass:
            return ShipmentLineType488.subclass(*args_, **kwargs_)
        else:
            return ShipmentLineType488(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_OrderQty(self): return self.OrderQty
    def set_OrderQty(self, OrderQty): self.OrderQty = OrderQty
    def get_OrderQtyUOM(self): return self.OrderQtyUOM
    def set_OrderQtyUOM(self, OrderQtyUOM): self.OrderQtyUOM = OrderQtyUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_ItemStatusCode(self): return self.ItemStatusCode
    def set_ItemStatusCode(self, ItemStatusCode): self.ItemStatusCode = ItemStatusCode
    def get_ShipQty(self): return self.ShipQty
    def set_ShipQty(self, ShipQty): self.ShipQty = ShipQty
    def get_ShipQtyUOM(self): return self.ShipQtyUOM
    def set_ShipQtyUOM(self, ShipQtyUOM): self.ShipQtyUOM = ShipQtyUOM
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_QtyLeftToReceive(self): return self.QtyLeftToReceive
    def set_QtyLeftToReceive(self, QtyLeftToReceive): self.QtyLeftToReceive = QtyLeftToReceive
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_SellerDateCode(self): return self.SellerDateCode
    def set_SellerDateCode(self, SellerDateCode): self.SellerDateCode = SellerDateCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def validate_OrderQtyUOMType491(self, value):
        # Validate type OrderQtyUOMType491, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OrderQtyUOMType491' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceTypeType492(self, value):
        # Validate type PurchasePriceTypeType492, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceTypeType492' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceBasisType493(self, value):
        # Validate type PurchasePriceBasisType493, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceBasisType493' % {"value" : value.encode("utf-8")} )
    def validate_ItemStatusCodeType494(self, value):
        # Validate type ItemStatusCodeType494, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'AR', 'BP', 'DR', 'IA', 'IB', 'IC', 'ID', 'IF', 'IH', 'IP', 'IQ', 'IR', 'IS', 'R1', 'R2', 'R4', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemStatusCodeType494' % {"value" : value.encode("utf-8")} )
    def validate_ShipQtyUOMType495(self, value):
        # Validate type ShipQtyUOMType495, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipQtyUOMType495' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.OrderQty is not None or
            self.OrderQtyUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.ItemStatusCode is not None or
            self.ShipQty is not None or
            self.ShipQtyUOM is not None or
            self.ShipDate is not None or
            self.QtyLeftToReceive is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.SellerDateCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentLineType488', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentLineType488')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentLineType488', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentLineType488'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentLineType488', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.OrderQty is not None:
            self.OrderQty.export(outfile, level, namespace_, name_='OrderQty', pretty_print=pretty_print)
        if self.OrderQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderQtyUOM>%s</%sOrderQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OrderQtyUOM), input_name='OrderQtyUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.ItemStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemStatusCode>%s</%sItemStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemStatusCode), input_name='ItemStatusCode')), namespace_, eol_))
        if self.ShipQty is not None:
            self.ShipQty.export(outfile, level, namespace_, name_='ShipQty', pretty_print=pretty_print)
        if self.ShipQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipQtyUOM>%s</%sShipQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ShipQtyUOM), input_name='ShipQtyUOM')), namespace_, eol_))
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.QtyLeftToReceive is not None:
            self.QtyLeftToReceive.export(outfile, level, namespace_, name_='QtyLeftToReceive', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Class is not None:
            self.Class.export(outfile, level, namespace_, name_='Class', pretty_print=pretty_print)
        if self.SellerDateCode is not None:
            self.SellerDateCode.export(outfile, level, namespace_, name_='SellerDateCode', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType489.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'OrderQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQty = obj_
            obj_.original_tagname_ = 'OrderQty'
        elif nodeName_ == 'OrderQtyUOM':
            OrderQtyUOM_ = child_.text
            OrderQtyUOM_ = self.gds_validate_string(OrderQtyUOM_, node, 'OrderQtyUOM')
            self.OrderQtyUOM = OrderQtyUOM_
            # validate type OrderQtyUOMType491
            self.validate_OrderQtyUOMType491(self.OrderQtyUOM)
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
            # validate type PurchasePriceTypeType492
            self.validate_PurchasePriceTypeType492(self.PurchasePriceType)
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
            # validate type PurchasePriceBasisType493
            self.validate_PurchasePriceBasisType493(self.PurchasePriceBasis)
        elif nodeName_ == 'ItemStatusCode':
            ItemStatusCode_ = child_.text
            ItemStatusCode_ = self.gds_validate_string(ItemStatusCode_, node, 'ItemStatusCode')
            self.ItemStatusCode = ItemStatusCode_
            # validate type ItemStatusCodeType494
            self.validate_ItemStatusCodeType494(self.ItemStatusCode)
        elif nodeName_ == 'ShipQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQty = obj_
            obj_.original_tagname_ = 'ShipQty'
        elif nodeName_ == 'ShipQtyUOM':
            ShipQtyUOM_ = child_.text
            ShipQtyUOM_ = self.gds_validate_string(ShipQtyUOM_, node, 'ShipQtyUOM')
            self.ShipQtyUOM = ShipQtyUOM_
            # validate type ShipQtyUOMType495
            self.validate_ShipQtyUOMType495(self.ShipQtyUOM)
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'QtyLeftToReceive':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyLeftToReceive = obj_
            obj_.original_tagname_ = 'QtyLeftToReceive'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Class':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Class = obj_
            obj_.original_tagname_ = 'Class'
        elif nodeName_ == 'SellerDateCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellerDateCode = obj_
            obj_.original_tagname_ = 'SellerDateCode'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType496.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class ShipmentLineType488


class ProductIDType489(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.validate_PartNumberQualType490(self.PartNumberQual)
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType489)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType489.subclass:
            return ProductIDType489.subclass(*args_, **kwargs_)
        else:
            return ProductIDType489(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def validate_PartNumberQualType490(self, value):
        # Validate type PartNumberQualType490, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['B8', 'BO', 'CB', 'FU', 'IS', 'IT', 'IZ', 'MG', 'MN', 'N5', 'SK', 'SZ', 'VA', 'VC', 'VE', 'ZBP', 'ZVP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PartNumberQualType490' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType489', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType489')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType489', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType489'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType489', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
            # validate type PartNumberQualType490
            self.validate_PartNumberQualType490(self.PartNumberQual)
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType489


class NRFStandardColorAndSizeType496(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType496)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType496.subclass:
            return NRFStandardColorAndSizeType496.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType496(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType496', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType496')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType496', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType496'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType496', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType496


class PhysicalDetailsType497(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.validate_PackQualifierType498(self.PackQualifier)
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.validate_PackUOMType499(self.PackUOM)
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType500(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType501(self.PackingMaterial)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType502(self.WeightQualifier)
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.validate_PackWeightUOMType503(self.PackWeightUOM)
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.validate_PackVolumeUOMType504(self.PackVolumeUOM)
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.validate_PackDimensionUOMType505(self.PackDimensionUOM)
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType497)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType497.subclass:
            return PhysicalDetailsType497.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType497(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def validate_PackQualifierType498(self, value):
        # Validate type PackQualifierType498, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackQualifierType498' % {"value" : value.encode("utf-8")} )
    def validate_PackUOMType499(self, value):
        # Validate type PackUOMType499, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackUOMType499' % {"value" : value.encode("utf-8")} )
    def validate_PackingMediumType500(self, value):
        # Validate type PackingMediumType500, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType500' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType501(self, value):
        # Validate type PackingMaterialType501, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType501' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType502(self, value):
        # Validate type WeightQualifierType502, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType502' % {"value" : value.encode("utf-8")} )
    def validate_PackWeightUOMType503(self, value):
        # Validate type PackWeightUOMType503, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackWeightUOMType503' % {"value" : value.encode("utf-8")} )
    def validate_PackVolumeUOMType504(self, value):
        # Validate type PackVolumeUOMType504, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackVolumeUOMType504' % {"value" : value.encode("utf-8")} )
    def validate_PackDimensionUOMType505(self, value):
        # Validate type PackDimensionUOMType505, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackDimensionUOMType505' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType497', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType497')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType497', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType497'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType497', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackQualifier>%s</%sPackQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackQualifier), input_name='PackQualifier')), namespace_, eol_))
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackUOM>%s</%sPackUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackUOM), input_name='PackUOM')), namespace_, eol_))
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeightUOM>%s</%sPackWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeightUOM), input_name='PackWeightUOM')), namespace_, eol_))
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolumeUOM>%s</%sPackVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolumeUOM), input_name='PackVolumeUOM')), namespace_, eol_))
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackDimensionUOM>%s</%sPackDimensionUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackDimensionUOM), input_name='PackDimensionUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            PackQualifier_ = child_.text
            PackQualifier_ = self.gds_validate_string(PackQualifier_, node, 'PackQualifier')
            self.PackQualifier = PackQualifier_
            # validate type PackQualifierType498
            self.validate_PackQualifierType498(self.PackQualifier)
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            PackUOM_ = child_.text
            PackUOM_ = self.gds_validate_string(PackUOM_, node, 'PackUOM')
            self.PackUOM = PackUOM_
            # validate type PackUOMType499
            self.validate_PackUOMType499(self.PackUOM)
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType500
            self.validate_PackingMediumType500(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType501
            self.validate_PackingMaterialType501(self.PackingMaterial)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType502
            self.validate_WeightQualifierType502(self.WeightQualifier)
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            PackWeightUOM_ = child_.text
            PackWeightUOM_ = self.gds_validate_string(PackWeightUOM_, node, 'PackWeightUOM')
            self.PackWeightUOM = PackWeightUOM_
            # validate type PackWeightUOMType503
            self.validate_PackWeightUOMType503(self.PackWeightUOM)
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            PackVolumeUOM_ = child_.text
            PackVolumeUOM_ = self.gds_validate_string(PackVolumeUOM_, node, 'PackVolumeUOM')
            self.PackVolumeUOM = PackVolumeUOM_
            # validate type PackVolumeUOMType504
            self.validate_PackVolumeUOMType504(self.PackVolumeUOM)
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            PackDimensionUOM_ = child_.text
            PackDimensionUOM_ = self.gds_validate_string(PackDimensionUOM_, node, 'PackDimensionUOM')
            self.PackDimensionUOM = PackDimensionUOM_
            # validate type PackDimensionUOMType505
            self.validate_PackDimensionUOMType505(self.PackDimensionUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType497


class CarrierSpecialHandlingDetailType506(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.validate_SpecialHandlingCodeType507(self.SpecialHandlingCode)
        self.HazardousMaterialCode = HazardousMaterialCode
        self.validate_HazardousMaterialCodeType508(self.HazardousMaterialCode)
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType509(self.YesOrNoResponse)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType506)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType506.subclass:
            return CarrierSpecialHandlingDetailType506.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType506(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def validate_SpecialHandlingCodeType507(self, value):
        # Validate type SpecialHandlingCodeType507, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AH', 'BKA', 'CO', 'DA', 'DNF', 'EL', 'EX', 'FL', 'FP', 'FR', 'HM', 'IC', 'KMD', 'MRF', 'NPR', 'NW', 'OPR', 'OSB', 'OTC', 'PFH', 'PG', 'PHR', 'RM', 'SUIP', 'UN', 'UNDF', 'VOC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SpecialHandlingCodeType507' % {"value" : value.encode("utf-8")} )
    def validate_HazardousMaterialCodeType508(self, value):
        # Validate type HazardousMaterialCodeType508, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['D', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on HazardousMaterialCodeType508' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType509(self, value):
        # Validate type YesOrNoResponseType509, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType509' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType506', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType506')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType506', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType506'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType506', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialHandlingCode>%s</%sSpecialHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SpecialHandlingCode), input_name='SpecialHandlingCode')), namespace_, eol_))
        if self.HazardousMaterialCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialCode>%s</%sHazardousMaterialCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialCode), input_name='HazardousMaterialCode')), namespace_, eol_))
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            SpecialHandlingCode_ = child_.text
            SpecialHandlingCode_ = self.gds_validate_string(SpecialHandlingCode_, node, 'SpecialHandlingCode')
            self.SpecialHandlingCode = SpecialHandlingCode_
            # validate type SpecialHandlingCodeType507
            self.validate_SpecialHandlingCodeType507(self.SpecialHandlingCode)
        elif nodeName_ == 'HazardousMaterialCode':
            HazardousMaterialCode_ = child_.text
            HazardousMaterialCode_ = self.gds_validate_string(HazardousMaterialCode_, node, 'HazardousMaterialCode')
            self.HazardousMaterialCode = HazardousMaterialCode_
            # validate type HazardousMaterialCodeType508
            self.validate_HazardousMaterialCodeType508(self.HazardousMaterialCode)
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType509
            self.validate_YesOrNoResponseType509(self.YesOrNoResponse)
# end class CarrierSpecialHandlingDetailType506


class CarrierInformationType510(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType511(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType512(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType513(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType514(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType515(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType516(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType517(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType518(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType510)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType510.subclass:
            return CarrierInformationType510.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType510(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType511(self, value):
        # Validate type StatusCodeType511, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType511' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType512(self, value):
        # Validate type CarrierTransMethodCodeType512, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType512' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType513(self, value):
        # Validate type EquipmentDescriptionCodeType513, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType513' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType514(self, value):
        # Validate type SealStatusCodeType514, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType514' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType515(self, value):
        # Validate type OwnershipCodeType515, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType515' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType516(self, value):
        # Validate type RoutingSequenceCodeType516, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType516' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType517(self, value):
        # Validate type TransitDirectionCodeType517, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType517' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType518(self, value):
        # Validate type TransitTimeQualType518, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType518' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType510', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType510')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType510', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType510'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType510', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType511
            self.validate_StatusCodeType511(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType512
            self.validate_CarrierTransMethodCodeType512(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType513
            self.validate_EquipmentDescriptionCodeType513(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType514
            self.validate_SealStatusCodeType514(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType515
            self.validate_OwnershipCodeType515(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType516
            self.validate_RoutingSequenceCodeType516(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType517
            self.validate_TransitDirectionCodeType517(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType518
            self.validate_TransitTimeQualType518(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType519.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType521.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType510


class ServiceLevelCodesType519(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType520(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType519)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType519.subclass:
            return ServiceLevelCodesType519.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType519(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType520(self, value):
        # Validate type ServiceLevelCodeType520, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType520' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType519', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType519')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType519', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType519'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType519', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType520
            self.validate_ServiceLevelCodeType520(self.ServiceLevelCode)
# end class ServiceLevelCodesType519


class AddressType521(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType522(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType523(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType521)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType521.subclass:
            return AddressType521.subclass(*args_, **kwargs_)
        else:
            return AddressType521(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType522(self, value):
        # Validate type AddressTypeCodeType522, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType522' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType523(self, value):
        # Validate type LocationCodeQualifierType523, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType523' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType521', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType521')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType521', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType521'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType521', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType522
            self.validate_AddressTypeCodeType522(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType523
            self.validate_LocationCodeQualifierType523(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType524.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType521


class DateType524(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type525(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType524)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType524.subclass:
            return DateType524.subclass(*args_, **kwargs_)
        else:
            return DateType524(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type525(self, value):
        # Validate type DateTimeQualifier1Type525, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type525' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType524', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType524')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType524', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType524'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType524', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type525
            self.validate_DateTimeQualifier1Type525(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType524


class MeasurementsType526(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.validate_MeasurementQualifierType527(self.MeasurementQualifier)
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.validate_CompositeUOMType528(self.CompositeUOM)
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.validate_MeasurementSignificanceCodeType529(self.MeasurementSignificanceCode)
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType526)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType526.subclass:
            return MeasurementsType526.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType526(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def validate_MeasurementQualifierType527(self, value):
        # Validate type MeasurementQualifierType527, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CRM', 'CVOL', 'CWHT', 'D9', 'DI', 'DIA', 'DP', 'HT', 'LN', 'PRS', 'PW', 'TC', 'THU', 'TT', 'VOL', 'WD', 'WT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementQualifierType527' % {"value" : value.encode("utf-8")} )
    def validate_CompositeUOMType528(self, value):
        # Validate type CompositeUOMType528, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CompositeUOMType528' % {"value" : value.encode("utf-8")} )
    def validate_MeasurementSignificanceCodeType529(self, value):
        # Validate type MeasurementSignificanceCodeType529, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementSignificanceCodeType529' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType526', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType526')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType526', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType526'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType526', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
            # validate type MeasurementQualifierType527
            self.validate_MeasurementQualifierType527(self.MeasurementQualifier)
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
            # validate type CompositeUOMType528
            self.validate_CompositeUOMType528(self.CompositeUOM)
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
            # validate type MeasurementSignificanceCodeType529
            self.validate_MeasurementSignificanceCodeType529(self.MeasurementSignificanceCode)
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType526


class PriceInformationType530(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.validate_ChangeReasonCodeType531(self.ChangeReasonCode)
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.validate_PriceTypeIDCodeType532(self.PriceTypeIDCode)
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.validate_UnitPriceBasisType533(self.UnitPriceBasis)
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.validate_PriceMultiplierQualType534(self.PriceMultiplierQual)
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.validate_QuantityUOMType535(self.QuantityUOM)
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.validate_ClassOfTradeCodeType536(self.ClassOfTradeCode)
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType530)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType530.subclass:
            return PriceInformationType530.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType530(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_ChangeReasonCodeType531(self, value):
        # Validate type ChangeReasonCodeType531, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AQ', 'EV', 'PS', 'QO', 'UP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ChangeReasonCodeType531' % {"value" : value.encode("utf-8")} )
    def validate_PriceTypeIDCodeType532(self, value):
        # Validate type PriceTypeIDCodeType532, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceTypeIDCodeType532' % {"value" : value.encode("utf-8")} )
    def validate_UnitPriceBasisType533(self, value):
        # Validate type UnitPriceBasisType533, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitPriceBasisType533' % {"value" : value.encode("utf-8")} )
    def validate_PriceMultiplierQualType534(self, value):
        # Validate type PriceMultiplierQualType534, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CSD', 'CSR', 'DIS', 'ILP', 'PSP', 'SEL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceMultiplierQualType534' % {"value" : value.encode("utf-8")} )
    def validate_QuantityUOMType535(self, value):
        # Validate type QuantityUOMType535, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QuantityUOMType535' % {"value" : value.encode("utf-8")} )
    def validate_ClassOfTradeCodeType536(self, value):
        # Validate type ClassOfTradeCodeType536, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RS', 'SA', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ClassOfTradeCodeType536' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType530', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType530')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType530', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType530'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType530', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
            # validate type ChangeReasonCodeType531
            self.validate_ChangeReasonCodeType531(self.ChangeReasonCode)
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
            # validate type PriceTypeIDCodeType532
            self.validate_PriceTypeIDCodeType532(self.PriceTypeIDCode)
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
            # validate type UnitPriceBasisType533
            self.validate_UnitPriceBasisType533(self.UnitPriceBasis)
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
            # validate type PriceMultiplierQualType534
            self.validate_PriceMultiplierQualType534(self.PriceMultiplierQual)
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
            # validate type QuantityUOMType535
            self.validate_QuantityUOMType535(self.QuantityUOM)
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
            # validate type ClassOfTradeCodeType536
            self.validate_ClassOfTradeCodeType536(self.ClassOfTradeCode)
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType530


class ProductOrItemDescriptionType537(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType538(self.ItemDescriptionType)
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType539(self.AgencyQualifierCode)
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType540(self.YesOrNoResponse)
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType537)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType537.subclass:
            return ProductOrItemDescriptionType537.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType537(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def validate_ItemDescriptionTypeType538(self, value):
        # Validate type ItemDescriptionTypeType538, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType538' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType539(self, value):
        # Validate type AgencyQualifierCodeType539, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType539' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType540(self, value):
        # Validate type YesOrNoResponseType540, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType540' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType537', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType537')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType537', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType537'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType537', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType538
            self.validate_ItemDescriptionTypeType538(self.ItemDescriptionType)
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType539
            self.validate_AgencyQualifierCodeType539(self.AgencyQualifierCode)
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType540
            self.validate_YesOrNoResponseType540(self.YesOrNoResponse)
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType537


class MasterItemAttributeType541(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        if ItemAttribute is None:
            self.ItemAttribute = []
        else:
            self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType541)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType541.subclass:
            return MasterItemAttributeType541.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType541(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def add_ItemAttribute(self, value): self.ItemAttribute.append(value)
    def insert_ItemAttribute_at(self, index, value): self.ItemAttribute.insert(index, value)
    def replace_ItemAttribute_at(self, index, value): self.ItemAttribute[index] = value
    def hasContent_(self):
        if (
            self.ItemAttribute
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType541', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType541')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType541', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType541'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType541', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemAttribute_ in self.ItemAttribute:
            ItemAttribute_.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType542.factory()
            obj_.build(child_)
            self.ItemAttribute.append(obj_)
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType541


class ItemAttributeType542(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.validate_ItemAttributeQualifierType543(self.ItemAttributeQualifier)
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.validate_ValueUOMType544(self.ValueUOM)
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType545(self.YesOrNoResponse)
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType542)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType542.subclass:
            return ItemAttributeType542.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType542(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def validate_ItemAttributeQualifierType543(self, value):
        # Validate type ItemAttributeQualifierType543, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ATH', 'BARC', 'BIND', 'BRN', 'CH', 'CI', 'COO', 'DESR', 'DF', 'DNC', 'DS', 'EDT', 'ESC', 'HE', 'ITS', 'LQD', 'MAK', 'MOD', 'MSD', 'MYE', 'PBL', 'REP', 'RI', 'RP', 'RTC', 'SET', 'SHL', 'SL', 'SN', 'SPC', 'SSZ', 'STG', 'SVC', 'SVD', 'SW', 'TEA', 'TIT', 'WAR', 'WOOD', 'WPF', 'WR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemAttributeQualifierType543' % {"value" : value.encode("utf-8")} )
    def validate_ValueUOMType544(self, value):
        # Validate type ValueUOMType544, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ValueUOMType544' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType545(self, value):
        # Validate type YesOrNoResponseType545, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType545' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType542', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType542')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType542', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType542'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType542', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemAttributeQualifier>%s</%sItemAttributeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemAttributeQualifier), input_name='ItemAttributeQualifier')), namespace_, eol_))
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
        if self.ValueUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueUOM>%s</%sValueUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ValueUOM), input_name='ValueUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            ItemAttributeQualifier_ = child_.text
            ItemAttributeQualifier_ = self.gds_validate_string(ItemAttributeQualifier_, node, 'ItemAttributeQualifier')
            self.ItemAttributeQualifier = ItemAttributeQualifier_
            # validate type ItemAttributeQualifierType543
            self.validate_ItemAttributeQualifierType543(self.ItemAttributeQualifier)
        elif nodeName_ == 'Value':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
        elif nodeName_ == 'ValueUOM':
            ValueUOM_ = child_.text
            ValueUOM_ = self.gds_validate_string(ValueUOM_, node, 'ValueUOM')
            self.ValueUOM = ValueUOM_
            # validate type ValueUOMType544
            self.validate_ValueUOMType544(self.ValueUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType545
            self.validate_YesOrNoResponseType545(self.YesOrNoResponse)
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType546.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType542


class MeasurementsType546(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.validate_MeasurementQualifierType547(self.MeasurementQualifier)
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.validate_CompositeUOMType548(self.CompositeUOM)
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.validate_MeasurementSignificanceCodeType549(self.MeasurementSignificanceCode)
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType546)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType546.subclass:
            return MeasurementsType546.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType546(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def validate_MeasurementQualifierType547(self, value):
        # Validate type MeasurementQualifierType547, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CRM', 'CVOL', 'CWHT', 'D9', 'DI', 'DIA', 'DP', 'HT', 'LN', 'PRS', 'PW', 'TC', 'THU', 'TT', 'VOL', 'WD', 'WT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementQualifierType547' % {"value" : value.encode("utf-8")} )
    def validate_CompositeUOMType548(self, value):
        # Validate type CompositeUOMType548, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CompositeUOMType548' % {"value" : value.encode("utf-8")} )
    def validate_MeasurementSignificanceCodeType549(self, value):
        # Validate type MeasurementSignificanceCodeType549, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementSignificanceCodeType549' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType546', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType546')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType546', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType546'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType546', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
            # validate type MeasurementQualifierType547
            self.validate_MeasurementQualifierType547(self.MeasurementQualifier)
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
            # validate type CompositeUOMType548
            self.validate_CompositeUOMType548(self.CompositeUOM)
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
            # validate type MeasurementSignificanceCodeType549
            self.validate_MeasurementSignificanceCodeType549(self.MeasurementSignificanceCode)
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType546


class DateType550(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type551(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType550)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType550.subclass:
            return DateType550.subclass(*args_, **kwargs_)
        else:
            return DateType550(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type551(self, value):
        # Validate type DateTimeQualifier1Type551, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type551' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType550', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType550')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType550', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType550'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType550', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type551
            self.validate_DateTimeQualifier1Type551(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType550


class ReferenceType552(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType553(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType552)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType552.subclass:
            return ReferenceType552.subclass(*args_, **kwargs_)
        else:
            return ReferenceType552(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType553(self, value):
        # Validate type ReferenceQualType553, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType553' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType552', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType552')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType552', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType552'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType552', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType553
            self.validate_ReferenceQualType553(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType554.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType552


class ReferenceIDsType554(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType555(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType554)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType554.subclass:
            return ReferenceIDsType554.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType554(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType555(self, value):
        # Validate type ReferenceQualType555, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType555' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType554', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType554')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType554', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType554'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType554', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType555
            self.validate_ReferenceQualType555(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType554


class NotesType556(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType557(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType556)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType556.subclass:
            return NotesType556.subclass(*args_, **kwargs_)
        else:
            return NotesType556(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType557(self, value):
        # Validate type NoteCodeType557, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType557' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType556', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType556')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType556', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType556'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType556', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType557
            self.validate_NoteCodeType557(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType556


class CommodityType558(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType559(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType558)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType558.subclass:
            return CommodityType558.subclass(*args_, **kwargs_)
        else:
            return CommodityType558(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType559(self, value):
        # Validate type CommodityCodeQualifierType559, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType559' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType558', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType558')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType558', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType558'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType558', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType559
            self.validate_CommodityCodeQualifierType559(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType558


class AddressType560(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType561(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType562(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType560)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType560.subclass:
            return AddressType560.subclass(*args_, **kwargs_)
        else:
            return AddressType560(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType561(self, value):
        # Validate type AddressTypeCodeType561, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType561' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType562(self, value):
        # Validate type LocationCodeQualifierType562, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType562' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType560', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType560')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType560', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType560'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType560', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType561
            self.validate_AddressTypeCodeType561(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType562
            self.validate_LocationCodeQualifierType562(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType563.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType567.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType571.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType560


class ReferenceType563(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType564(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType563)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType563.subclass:
            return ReferenceType563.subclass(*args_, **kwargs_)
        else:
            return ReferenceType563(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType564(self, value):
        # Validate type ReferenceQualType564, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType564' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType563', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType563')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType563', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType563'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType563', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType564
            self.validate_ReferenceQualType564(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType565.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType563


class ReferenceIDsType565(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType566(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType565)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType565.subclass:
            return ReferenceIDsType565.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType565(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType566(self, value):
        # Validate type ReferenceQualType566, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType566' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType565', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType565')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType565', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType565'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType565', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType566
            self.validate_ReferenceQualType566(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType565


class ContactType567(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType568(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType567)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType567.subclass:
            return ContactType567.subclass(*args_, **kwargs_)
        else:
            return ContactType567(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType568(self, value):
        # Validate type ContactTypeCodeType568, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType568' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType567', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType567')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType567', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType567'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType567', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType568
            self.validate_ContactTypeCodeType568(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType569.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType567


class AdditionalContactDetailsType569(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType570(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType569)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType569.subclass:
            return AdditionalContactDetailsType569.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType569(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType570(self, value):
        # Validate type ContactQualType570, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType570' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType569', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType569')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType569', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType569'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType569', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType570
            self.validate_ContactQualType570(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType569


class DateType571(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type572(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType571)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType571.subclass:
            return DateType571.subclass(*args_, **kwargs_)
        else:
            return DateType571(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type572(self, value):
        # Validate type DateTimeQualifier1Type572, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type572' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType571', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType571')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType571', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType571'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType571', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type572
            self.validate_DateTimeQualifier1Type572(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType571


class SublinesType573(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Subline=None):
        self.original_tagname_ = None
        if Subline is None:
            self.Subline = []
        else:
            self.Subline = Subline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublinesType573)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublinesType573.subclass:
            return SublinesType573.subclass(*args_, **kwargs_)
        else:
            return SublinesType573(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def add_Subline(self, value): self.Subline.append(value)
    def insert_Subline_at(self, index, value): self.Subline.insert(index, value)
    def replace_Subline_at(self, index, value): self.Subline[index] = value
    def hasContent_(self):
        if (
            self.Subline
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublinesType573', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublinesType573')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublinesType573', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublinesType573'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublinesType573', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Subline_ in self.Subline:
            Subline_.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Subline':
            obj_ = SublineType574.factory()
            obj_.build(child_)
            self.Subline.append(obj_)
            obj_.original_tagname_ = 'Subline'
# end class SublinesType573


class SublineType574(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, PriceInformation=None, ProductOrItemDescription=None, Commodity=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType574)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType574.subclass:
            return SublineType574.subclass(*args_, **kwargs_)
        else:
            return SublineType574(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.Commodity
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType574', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType574')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType574', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType574'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType574', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType575.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType582.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType589.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType593.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
# end class SublineType574


class SublineItemDetailType575(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.validate_QtyPerUOMType578(self.QtyPerUOM)
        self.PurchasePriceType = PurchasePriceType
        self.validate_PurchasePriceTypeType579(self.PurchasePriceType)
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.validate_PurchasePriceBasisType580(self.PurchasePriceBasis)
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType575)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType575.subclass:
            return SublineItemDetailType575.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType575(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def validate_QtyPerUOMType578(self, value):
        # Validate type QtyPerUOMType578, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QtyPerUOMType578' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceTypeType579(self, value):
        # Validate type PurchasePriceTypeType579, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceTypeType579' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceBasisType580(self, value):
        # Validate type PurchasePriceBasisType580, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceBasisType580' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType575', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType575')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType575', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType575'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType575', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.QtyPer is not None:
            self.QtyPer.export(outfile, level, namespace_, name_='QtyPer', pretty_print=pretty_print)
        if self.QtyPerUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQtyPerUOM>%s</%sQtyPerUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QtyPerUOM), input_name='QtyPerUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType576.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'QtyPer':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPer = obj_
            obj_.original_tagname_ = 'QtyPer'
        elif nodeName_ == 'QtyPerUOM':
            QtyPerUOM_ = child_.text
            QtyPerUOM_ = self.gds_validate_string(QtyPerUOM_, node, 'QtyPerUOM')
            self.QtyPerUOM = QtyPerUOM_
            # validate type QtyPerUOMType578
            self.validate_QtyPerUOMType578(self.QtyPerUOM)
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
            # validate type PurchasePriceTypeType579
            self.validate_PurchasePriceTypeType579(self.PurchasePriceType)
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
            # validate type PurchasePriceBasisType580
            self.validate_PurchasePriceBasisType580(self.PurchasePriceBasis)
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType581.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType575


class ProductIDType576(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.validate_PartNumberQualType577(self.PartNumberQual)
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType576)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType576.subclass:
            return ProductIDType576.subclass(*args_, **kwargs_)
        else:
            return ProductIDType576(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def validate_PartNumberQualType577(self, value):
        # Validate type PartNumberQualType577, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['B8', 'BO', 'CB', 'FU', 'IS', 'IT', 'IZ', 'MG', 'MN', 'N5', 'SK', 'SZ', 'VA', 'VC', 'VE', 'ZBP', 'ZVP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PartNumberQualType577' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType576', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType576')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType576', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType576'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType576', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
            # validate type PartNumberQualType577
            self.validate_PartNumberQualType577(self.PartNumberQual)
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType576


class NRFStandardColorAndSizeType581(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType581)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType581.subclass:
            return NRFStandardColorAndSizeType581.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType581(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType581', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType581')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType581', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType581'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType581', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType581


class PriceInformationType582(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.validate_ChangeReasonCodeType583(self.ChangeReasonCode)
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.validate_PriceTypeIDCodeType584(self.PriceTypeIDCode)
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.validate_UnitPriceBasisType585(self.UnitPriceBasis)
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.validate_PriceMultiplierQualType586(self.PriceMultiplierQual)
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.validate_QuantityUOMType587(self.QuantityUOM)
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.validate_ClassOfTradeCodeType588(self.ClassOfTradeCode)
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType582)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType582.subclass:
            return PriceInformationType582.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType582(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_ChangeReasonCodeType583(self, value):
        # Validate type ChangeReasonCodeType583, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AQ', 'EV', 'PS', 'QO', 'UP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ChangeReasonCodeType583' % {"value" : value.encode("utf-8")} )
    def validate_PriceTypeIDCodeType584(self, value):
        # Validate type PriceTypeIDCodeType584, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceTypeIDCodeType584' % {"value" : value.encode("utf-8")} )
    def validate_UnitPriceBasisType585(self, value):
        # Validate type UnitPriceBasisType585, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitPriceBasisType585' % {"value" : value.encode("utf-8")} )
    def validate_PriceMultiplierQualType586(self, value):
        # Validate type PriceMultiplierQualType586, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CSD', 'CSR', 'DIS', 'ILP', 'PSP', 'SEL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceMultiplierQualType586' % {"value" : value.encode("utf-8")} )
    def validate_QuantityUOMType587(self, value):
        # Validate type QuantityUOMType587, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QuantityUOMType587' % {"value" : value.encode("utf-8")} )
    def validate_ClassOfTradeCodeType588(self, value):
        # Validate type ClassOfTradeCodeType588, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RS', 'SA', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ClassOfTradeCodeType588' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType582', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType582')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType582', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType582'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType582', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
            # validate type ChangeReasonCodeType583
            self.validate_ChangeReasonCodeType583(self.ChangeReasonCode)
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
            # validate type PriceTypeIDCodeType584
            self.validate_PriceTypeIDCodeType584(self.PriceTypeIDCode)
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
            # validate type UnitPriceBasisType585
            self.validate_UnitPriceBasisType585(self.UnitPriceBasis)
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
            # validate type PriceMultiplierQualType586
            self.validate_PriceMultiplierQualType586(self.PriceMultiplierQual)
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
            # validate type QuantityUOMType587
            self.validate_QuantityUOMType587(self.QuantityUOM)
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
            # validate type ClassOfTradeCodeType588
            self.validate_ClassOfTradeCodeType588(self.ClassOfTradeCode)
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType582


class ProductOrItemDescriptionType589(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType590(self.ItemDescriptionType)
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType591(self.AgencyQualifierCode)
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType592(self.YesOrNoResponse)
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType589)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType589.subclass:
            return ProductOrItemDescriptionType589.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType589(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def validate_ItemDescriptionTypeType590(self, value):
        # Validate type ItemDescriptionTypeType590, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType590' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType591(self, value):
        # Validate type AgencyQualifierCodeType591, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType591' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType592(self, value):
        # Validate type YesOrNoResponseType592, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType592' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType589', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType589')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType589', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType589'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType589', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType590
            self.validate_ItemDescriptionTypeType590(self.ItemDescriptionType)
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType591
            self.validate_AgencyQualifierCodeType591(self.AgencyQualifierCode)
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType592
            self.validate_YesOrNoResponseType592(self.YesOrNoResponse)
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType589


class CommodityType593(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType594(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType593)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType593.subclass:
            return CommodityType593.subclass(*args_, **kwargs_)
        else:
            return CommodityType593(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType594(self, value):
        # Validate type CommodityCodeQualifierType594, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType594' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType593', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType593')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType593', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType593'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType593', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType594
            self.validate_CommodityCodeQualifierType594(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType593


class TaxType595(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType596(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType597(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType598(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType599(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType600(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType601(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType595)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType595.subclass:
            return TaxType595.subclass(*args_, **kwargs_)
        else:
            return TaxType595(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType596(self, value):
        # Validate type TaxTypeCodeType596, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType596' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType597(self, value):
        # Validate type TaxPercentQualType597, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType597' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType598(self, value):
        # Validate type JurisdictionQualType598, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType598' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType599(self, value):
        # Validate type TaxExemptCodeType599, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType599' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType600(self, value):
        # Validate type RelationshipCodeType600, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType600' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType601(self, value):
        # Validate type TaxHandlingCodeType601, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType601' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType595', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType595')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType595', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType595'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType595', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType596
            self.validate_TaxTypeCodeType596(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType597
            self.validate_TaxPercentQualType597(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType598
            self.validate_JurisdictionQualType598(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType599
            self.validate_TaxExemptCodeType599(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType600
            self.validate_RelationshipCodeType600(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType601
            self.validate_TaxHandlingCodeType601(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType595


class ChargesAllowancesType602(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType603(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType604(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType605(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType606(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType607(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType608(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType602)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType602.subclass:
            return ChargesAllowancesType602.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType602(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType603(self, value):
        # Validate type AllowChrgIndicatorType603, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType603' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType604(self, value):
        # Validate type AllowChrgCodeType604, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType604' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType605(self, value):
        # Validate type AllowChrgAgencyCodeType605, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType605' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType606(self, value):
        # Validate type AllowChrgPercentQualType606, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType606' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType607(self, value):
        # Validate type AllowChrgQtyUOMType607, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType607' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType608(self, value):
        # Validate type AllowChrgHandlingCodeType608, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType608' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType602', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType602')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType602', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType602'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType602', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType603
            self.validate_AllowChrgIndicatorType603(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType604
            self.validate_AllowChrgCodeType604(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType605
            self.validate_AllowChrgAgencyCodeType605(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType606
            self.validate_AllowChrgPercentQualType606(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType607
            self.validate_AllowChrgQtyUOMType607(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType608
            self.validate_AllowChrgHandlingCodeType608(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType609.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType602


class TaxType609(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType610(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType611(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType612(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType613(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType614(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType615(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType609)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType609.subclass:
            return TaxType609.subclass(*args_, **kwargs_)
        else:
            return TaxType609(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType610(self, value):
        # Validate type TaxTypeCodeType610, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType610' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType611(self, value):
        # Validate type TaxPercentQualType611, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType611' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType612(self, value):
        # Validate type JurisdictionQualType612, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType612' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType613(self, value):
        # Validate type TaxExemptCodeType613, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType613' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType614(self, value):
        # Validate type RelationshipCodeType614, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType614' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType615(self, value):
        # Validate type TaxHandlingCodeType615, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType615' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType609', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType609')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType609', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType609'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType609', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType610
            self.validate_TaxTypeCodeType610(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType611
            self.validate_TaxPercentQualType611(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType612
            self.validate_JurisdictionQualType612(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType613
            self.validate_TaxExemptCodeType613(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType614
            self.validate_RelationshipCodeType614(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType615
            self.validate_TaxHandlingCodeType615(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType609


class ItemLoadInfoType616(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemLoad=None, Reference=None, Notes=None):
        self.original_tagname_ = None
        self.ItemLoad = ItemLoad
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadInfoType616)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadInfoType616.subclass:
            return ItemLoadInfoType616.subclass(*args_, **kwargs_)
        else:
            return ItemLoadInfoType616(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemLoad(self): return self.ItemLoad
    def set_ItemLoad(self, ItemLoad): self.ItemLoad = ItemLoad
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def hasContent_(self):
        if (
            self.ItemLoad is not None or
            self.Reference or
            self.Notes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadInfoType616', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadInfoType616')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadInfoType616', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadInfoType616'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadInfoType616', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemLoad is not None:
            self.ItemLoad.export(outfile, level, namespace_, name_='ItemLoad', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemLoad':
            obj_ = ItemLoadType617.factory()
            obj_.build(child_)
            self.ItemLoad = obj_
            obj_.original_tagname_ = 'ItemLoad'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType621.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType625.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
# end class ItemLoadInfoType616


class ItemLoadType617(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfLoads=None, UnitsShipped=None, PackingMedium=None, PackingMaterial=None, LoadSize=None, LoadSizeUOM=None):
        self.original_tagname_ = None
        self.NumberOfLoads = NumberOfLoads
        self.UnitsShipped = UnitsShipped
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType618(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType619(self.PackingMaterial)
        self.LoadSize = LoadSize
        self.LoadSizeUOM = LoadSizeUOM
        self.validate_LoadSizeUOMType620(self.LoadSizeUOM)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadType617)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadType617.subclass:
            return ItemLoadType617.subclass(*args_, **kwargs_)
        else:
            return ItemLoadType617(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfLoads(self): return self.NumberOfLoads
    def set_NumberOfLoads(self, NumberOfLoads): self.NumberOfLoads = NumberOfLoads
    def get_UnitsShipped(self): return self.UnitsShipped
    def set_UnitsShipped(self, UnitsShipped): self.UnitsShipped = UnitsShipped
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LoadSize(self): return self.LoadSize
    def set_LoadSize(self, LoadSize): self.LoadSize = LoadSize
    def get_LoadSizeUOM(self): return self.LoadSizeUOM
    def set_LoadSizeUOM(self, LoadSizeUOM): self.LoadSizeUOM = LoadSizeUOM
    def validate_PackingMediumType618(self, value):
        # Validate type PackingMediumType618, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType618' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType619(self, value):
        # Validate type PackingMaterialType619, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType619' % {"value" : value.encode("utf-8")} )
    def validate_LoadSizeUOMType620(self, value):
        # Validate type LoadSizeUOMType620, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LoadSizeUOMType620' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NumberOfLoads is not None or
            self.UnitsShipped is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LoadSize is not None or
            self.LoadSizeUOM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadType617', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadType617')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadType617', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadType617'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadType617', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfLoads is not None:
            self.NumberOfLoads.export(outfile, level, namespace_, name_='NumberOfLoads', pretty_print=pretty_print)
        if self.UnitsShipped is not None:
            self.UnitsShipped.export(outfile, level, namespace_, name_='UnitsShipped', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.LoadSize is not None:
            self.LoadSize.export(outfile, level, namespace_, name_='LoadSize', pretty_print=pretty_print)
        if self.LoadSizeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLoadSizeUOM>%s</%sLoadSizeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LoadSizeUOM), input_name='LoadSizeUOM')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfLoads':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NumberOfLoads = obj_
            obj_.original_tagname_ = 'NumberOfLoads'
        elif nodeName_ == 'UnitsShipped':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitsShipped = obj_
            obj_.original_tagname_ = 'UnitsShipped'
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType618
            self.validate_PackingMediumType618(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType619
            self.validate_PackingMaterialType619(self.PackingMaterial)
        elif nodeName_ == 'LoadSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSize = obj_
            obj_.original_tagname_ = 'LoadSize'
        elif nodeName_ == 'LoadSizeUOM':
            LoadSizeUOM_ = child_.text
            LoadSizeUOM_ = self.gds_validate_string(LoadSizeUOM_, node, 'LoadSizeUOM')
            self.LoadSizeUOM = LoadSizeUOM_
            # validate type LoadSizeUOMType620
            self.validate_LoadSizeUOMType620(self.LoadSizeUOM)
# end class ItemLoadType617


class ReferenceType621(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType622(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType621)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType621.subclass:
            return ReferenceType621.subclass(*args_, **kwargs_)
        else:
            return ReferenceType621(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType622(self, value):
        # Validate type ReferenceQualType622, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType622' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType621', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType621')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType621', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType621'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType621', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType622
            self.validate_ReferenceQualType622(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType623.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType621


class ReferenceIDsType623(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType624(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType623)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType623.subclass:
            return ReferenceIDsType623.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType623(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType624(self, value):
        # Validate type ReferenceQualType624, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType624' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType623', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType623')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType623', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType623'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType623', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType624
            self.validate_ReferenceQualType624(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType623


class NotesType625(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType626(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType625)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType625.subclass:
            return NotesType625.subclass(*args_, **kwargs_)
        else:
            return NotesType625(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType626(self, value):
        # Validate type NoteCodeType626, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType626' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType625', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType625')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType625', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType625'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType625', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType626
            self.validate_NoteCodeType626(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType625


class SummaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TotalOrders=None, TotalLineItems=None, TotalQuantity=None, TotalWeight=None):
        self.original_tagname_ = None
        self.TotalOrders = TotalOrders
        self.TotalLineItems = TotalLineItems
        self.TotalQuantity = TotalQuantity
        self.TotalWeight = TotalWeight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SummaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SummaryType.subclass:
            return SummaryType.subclass(*args_, **kwargs_)
        else:
            return SummaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TotalOrders(self): return self.TotalOrders
    def set_TotalOrders(self, TotalOrders): self.TotalOrders = TotalOrders
    def get_TotalLineItems(self): return self.TotalLineItems
    def set_TotalLineItems(self, TotalLineItems): self.TotalLineItems = TotalLineItems
    def get_TotalQuantity(self): return self.TotalQuantity
    def set_TotalQuantity(self, TotalQuantity): self.TotalQuantity = TotalQuantity
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def hasContent_(self):
        if (
            self.TotalOrders is not None or
            self.TotalLineItems is not None or
            self.TotalQuantity is not None or
            self.TotalWeight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SummaryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SummaryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SummaryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SummaryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SummaryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TotalOrders is not None:
            self.TotalOrders.export(outfile, level, namespace_, name_='TotalOrders', pretty_print=pretty_print)
        if self.TotalLineItems is not None:
            self.TotalLineItems.export(outfile, level, namespace_, name_='TotalLineItems', pretty_print=pretty_print)
        if self.TotalQuantity is not None:
            self.TotalQuantity.export(outfile, level, namespace_, name_='TotalQuantity', pretty_print=pretty_print)
        if self.TotalWeight is not None:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TotalOrders':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalOrders = obj_
            obj_.original_tagname_ = 'TotalOrders'
        elif nodeName_ == 'TotalLineItems':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalLineItems = obj_
            obj_.original_tagname_ = 'TotalLineItems'
        elif nodeName_ == 'TotalQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalQuantity = obj_
            obj_.original_tagname_ = 'TotalQuantity'
        elif nodeName_ == 'TotalWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
# end class SummaryType


class ContainerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BillOfLadingNumber=None, CarrierProNumber=None):
        self.original_tagname_ = None
        self.BillOfLadingNumber = BillOfLadingNumber
        self.CarrierProNumber = CarrierProNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContainerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContainerType.subclass:
            return ContainerType.subclass(*args_, **kwargs_)
        else:
            return ContainerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillOfLadingNumber(self): return self.BillOfLadingNumber
    def set_BillOfLadingNumber(self, BillOfLadingNumber): self.BillOfLadingNumber = BillOfLadingNumber
    def get_CarrierProNumber(self): return self.CarrierProNumber
    def set_CarrierProNumber(self, CarrierProNumber): self.CarrierProNumber = CarrierProNumber
    def hasContent_(self):
        if (
            self.BillOfLadingNumber is not None or
            self.CarrierProNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContainerType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContainerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContainerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContainerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContainerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillOfLadingNumber is not None:
            self.BillOfLadingNumber.export(outfile, level, namespace_, name_='BillOfLadingNumber', pretty_print=pretty_print)
        if self.CarrierProNumber is not None:
            self.CarrierProNumber.export(outfile, level, namespace_, name_='CarrierProNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillOfLadingNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BillOfLadingNumber = obj_
            obj_.original_tagname_ = 'BillOfLadingNumber'
        elif nodeName_ == 'CarrierProNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierProNumber = obj_
            obj_.original_tagname_ = 'CarrierProNumber'
# end class ContainerType


class DateType627(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type628(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType627)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType627.subclass:
            return DateType627.subclass(*args_, **kwargs_)
        else:
            return DateType627(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type628(self, value):
        # Validate type DateTimeQualifier1Type628, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type628' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType627', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType627')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType627', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType627'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType627', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type628
            self.validate_DateTimeQualifier1Type628(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType627


class ReferenceType629(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType630(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType629)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType629.subclass:
            return ReferenceType629.subclass(*args_, **kwargs_)
        else:
            return ReferenceType629(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType630(self, value):
        # Validate type ReferenceQualType630, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType630' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType629', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType629')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType629', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType629'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType629', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType630
            self.validate_ReferenceQualType630(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType631.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType629


class ReferenceIDsType631(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType632(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType631)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType631.subclass:
            return ReferenceIDsType631.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType631(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType632(self, value):
        # Validate type ReferenceQualType632, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType632' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType631', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType631')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType631', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType631'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType631', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType632
            self.validate_ReferenceQualType632(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType631


class NotesType633(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType634(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType633)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType633.subclass:
            return NotesType633.subclass(*args_, **kwargs_)
        else:
            return NotesType633(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType634(self, value):
        # Validate type NoteCodeType634, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType634' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType633', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType633')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType633', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType633'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType633', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType634
            self.validate_NoteCodeType634(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType633


class QuantityAndWeightType635(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackingMedium=None, PackingMaterial=None, LadingQuantity=None, LadingDescription=None, WeightQualifier=None, Weight=None, WeightUOM=None, Volume=None, VolumeUOM=None, PalletExchangeCode=None):
        self.original_tagname_ = None
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType636(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType637(self.PackingMaterial)
        self.LadingQuantity = LadingQuantity
        self.LadingDescription = LadingDescription
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType638(self.WeightQualifier)
        self.Weight = Weight
        self.WeightUOM = WeightUOM
        self.validate_WeightUOMType639(self.WeightUOM)
        self.Volume = Volume
        self.VolumeUOM = VolumeUOM
        self.validate_VolumeUOMType640(self.VolumeUOM)
        self.PalletExchangeCode = PalletExchangeCode
        self.validate_PalletExchangeCodeType641(self.PalletExchangeCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityAndWeightType635)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityAndWeightType635.subclass:
            return QuantityAndWeightType635.subclass(*args_, **kwargs_)
        else:
            return QuantityAndWeightType635(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LadingQuantity(self): return self.LadingQuantity
    def set_LadingQuantity(self, LadingQuantity): self.LadingQuantity = LadingQuantity
    def get_LadingDescription(self): return self.LadingDescription
    def set_LadingDescription(self, LadingDescription): self.LadingDescription = LadingDescription
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_WeightUOM(self): return self.WeightUOM
    def set_WeightUOM(self, WeightUOM): self.WeightUOM = WeightUOM
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_VolumeUOM(self): return self.VolumeUOM
    def set_VolumeUOM(self, VolumeUOM): self.VolumeUOM = VolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def validate_PackingMediumType636(self, value):
        # Validate type PackingMediumType636, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType636' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType637(self, value):
        # Validate type PackingMaterialType637, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType637' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType638(self, value):
        # Validate type WeightQualifierType638, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType638' % {"value" : value.encode("utf-8")} )
    def validate_WeightUOMType639(self, value):
        # Validate type WeightUOMType639, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightUOMType639' % {"value" : value.encode("utf-8")} )
    def validate_VolumeUOMType640(self, value):
        # Validate type VolumeUOMType640, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on VolumeUOMType640' % {"value" : value.encode("utf-8")} )
    def validate_PalletExchangeCodeType641(self, value):
        # Validate type PalletExchangeCodeType641, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletExchangeCodeType641' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LadingQuantity is not None or
            self.LadingDescription is not None or
            self.WeightQualifier is not None or
            self.Weight is not None or
            self.WeightUOM is not None or
            self.Volume is not None or
            self.VolumeUOM is not None or
            self.PalletExchangeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityAndWeightType635', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityAndWeightType635')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityAndWeightType635', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityAndWeightType635'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityAndWeightType635', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.LadingQuantity is not None:
            self.LadingQuantity.export(outfile, level, namespace_, name_='LadingQuantity', pretty_print=pretty_print)
        if self.LadingDescription is not None:
            self.LadingDescription.export(outfile, level, namespace_, name_='LadingDescription', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.WeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightUOM>%s</%sWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightUOM), input_name='WeightUOM')), namespace_, eol_))
        if self.Volume is not None:
            self.Volume.export(outfile, level, namespace_, name_='Volume', pretty_print=pretty_print)
        if self.VolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeUOM>%s</%sVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VolumeUOM), input_name='VolumeUOM')), namespace_, eol_))
        if self.PalletExchangeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletExchangeCode>%s</%sPalletExchangeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletExchangeCode), input_name='PalletExchangeCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType636
            self.validate_PackingMediumType636(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType637
            self.validate_PackingMaterialType637(self.PackingMaterial)
        elif nodeName_ == 'LadingQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingQuantity = obj_
            obj_.original_tagname_ = 'LadingQuantity'
        elif nodeName_ == 'LadingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingDescription = obj_
            obj_.original_tagname_ = 'LadingDescription'
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType638
            self.validate_WeightQualifierType638(self.WeightQualifier)
        elif nodeName_ == 'Weight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'WeightUOM':
            WeightUOM_ = child_.text
            WeightUOM_ = self.gds_validate_string(WeightUOM_, node, 'WeightUOM')
            self.WeightUOM = WeightUOM_
            # validate type WeightUOMType639
            self.validate_WeightUOMType639(self.WeightUOM)
        elif nodeName_ == 'Volume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
        elif nodeName_ == 'VolumeUOM':
            VolumeUOM_ = child_.text
            VolumeUOM_ = self.gds_validate_string(VolumeUOM_, node, 'VolumeUOM')
            self.VolumeUOM = VolumeUOM_
            # validate type VolumeUOMType640
            self.validate_VolumeUOMType640(self.VolumeUOM)
        elif nodeName_ == 'PalletExchangeCode':
            PalletExchangeCode_ = child_.text
            PalletExchangeCode_ = self.gds_validate_string(PalletExchangeCode_, node, 'PalletExchangeCode')
            self.PalletExchangeCode = PalletExchangeCode_
            # validate type PalletExchangeCodeType641
            self.validate_PalletExchangeCodeType641(self.PalletExchangeCode)
# end class QuantityAndWeightType635


class CarrierInformationType642(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType643(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType644(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType645(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType646(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType647(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType648(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType649(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType650(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType642)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType642.subclass:
            return CarrierInformationType642.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType642(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType643(self, value):
        # Validate type StatusCodeType643, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType643' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType644(self, value):
        # Validate type CarrierTransMethodCodeType644, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType644' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType645(self, value):
        # Validate type EquipmentDescriptionCodeType645, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType645' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType646(self, value):
        # Validate type SealStatusCodeType646, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType646' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType647(self, value):
        # Validate type OwnershipCodeType647, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType647' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType648(self, value):
        # Validate type RoutingSequenceCodeType648, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType648' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType649(self, value):
        # Validate type TransitDirectionCodeType649, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType649' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType650(self, value):
        # Validate type TransitTimeQualType650, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType650' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType642', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType642')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType642', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType642'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType642', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType643
            self.validate_StatusCodeType643(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType644
            self.validate_CarrierTransMethodCodeType644(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType645
            self.validate_EquipmentDescriptionCodeType645(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType646
            self.validate_SealStatusCodeType646(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType647
            self.validate_OwnershipCodeType647(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType648
            self.validate_RoutingSequenceCodeType648(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType649
            self.validate_TransitDirectionCodeType649(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType650
            self.validate_TransitTimeQualType650(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType651.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType653.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType642


class ServiceLevelCodesType651(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType652(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType651)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType651.subclass:
            return ServiceLevelCodesType651.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType651(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType652(self, value):
        # Validate type ServiceLevelCodeType652, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType652' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType651', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType651')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType651', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType651'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType651', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType652
            self.validate_ServiceLevelCodeType652(self.ServiceLevelCode)
# end class ServiceLevelCodesType651


class AddressType653(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType654(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType655(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType653)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType653.subclass:
            return AddressType653.subclass(*args_, **kwargs_)
        else:
            return AddressType653(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType654(self, value):
        # Validate type AddressTypeCodeType654, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType654' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType655(self, value):
        # Validate type LocationCodeQualifierType655, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType655' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType653', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType653')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType653', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType653'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType653', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType654
            self.validate_AddressTypeCodeType654(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType655
            self.validate_LocationCodeQualifierType655(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType656.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType653


class DateType656(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type657(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType656)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType656.subclass:
            return DateType656.subclass(*args_, **kwargs_)
        else:
            return DateType656(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type657(self, value):
        # Validate type DateTimeQualifier1Type657, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type657' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType656', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType656')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType656', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType656'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType656', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type657
            self.validate_DateTimeQualifier1Type657(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType656


class AddressType658(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType659(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType660(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType658)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType658.subclass:
            return AddressType658.subclass(*args_, **kwargs_)
        else:
            return AddressType658(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType659(self, value):
        # Validate type AddressTypeCodeType659, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType659' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType660(self, value):
        # Validate type LocationCodeQualifierType660, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType660' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType658', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType658')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType658', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType658'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType658', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType659
            self.validate_AddressTypeCodeType659(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType660
            self.validate_LocationCodeQualifierType660(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType661.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType665.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType669.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType658


class ReferenceType661(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType662(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType661)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType661.subclass:
            return ReferenceType661.subclass(*args_, **kwargs_)
        else:
            return ReferenceType661(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType662(self, value):
        # Validate type ReferenceQualType662, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType662' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType661', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType661')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType661', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType661'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType661', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType662
            self.validate_ReferenceQualType662(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType663.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType661


class ReferenceIDsType663(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType664(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType663)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType663.subclass:
            return ReferenceIDsType663.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType663(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType664(self, value):
        # Validate type ReferenceQualType664, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType664' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType663', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType663')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType663', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType663'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType663', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType664
            self.validate_ReferenceQualType664(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType663


class ContactType665(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType666(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType665)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType665.subclass:
            return ContactType665.subclass(*args_, **kwargs_)
        else:
            return ContactType665(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType666(self, value):
        # Validate type ContactTypeCodeType666, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType666' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType665', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType665')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType665', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType665'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType665', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType666
            self.validate_ContactTypeCodeType666(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType667.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType665


class AdditionalContactDetailsType667(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType668(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType667)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType667.subclass:
            return AdditionalContactDetailsType667.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType667(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType668(self, value):
        # Validate type ContactQualType668, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType668' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType667', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType667')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType667', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType667'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType667', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType668
            self.validate_ContactQualType668(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType667


class DateType669(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type670(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType669)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType669.subclass:
            return DateType669.subclass(*args_, **kwargs_)
        else:
            return DateType669(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type670(self, value):
        # Validate type DateTimeQualifier1Type670, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type670' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType669', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType669')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType669', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType669'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType669', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type670
            self.validate_DateTimeQualifier1Type670(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType669


class OrderHeaderType671(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InternalOrderNumber=None, InternalOrderDate=None, InvoiceNumber=None, InvoiceDate=None, PurchaseOrderNumber=None, ReleaseNumber=None, PurchaseOrderDate=None, Department=None, DepartmentDescription=None, Vendor=None, JobNumber=None, Division=None, CustomerAccountNumber=None, CustomerOrderNumber=None, PromotionDealNumber=None, PromotionDealDescription=None, DeliveryDate=None, DeliveryTime=None):
        self.original_tagname_ = None
        self.InternalOrderNumber = InternalOrderNumber
        self.InternalOrderDate = InternalOrderDate
        self.InvoiceNumber = InvoiceNumber
        self.InvoiceDate = InvoiceDate
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.ReleaseNumber = ReleaseNumber
        self.PurchaseOrderDate = PurchaseOrderDate
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Vendor = Vendor
        self.JobNumber = JobNumber
        self.Division = Division
        self.CustomerAccountNumber = CustomerAccountNumber
        self.CustomerOrderNumber = CustomerOrderNumber
        self.PromotionDealNumber = PromotionDealNumber
        self.PromotionDealDescription = PromotionDealDescription
        self.DeliveryDate = DeliveryDate
        self.DeliveryTime = DeliveryTime
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderHeaderType671)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderHeaderType671.subclass:
            return OrderHeaderType671.subclass(*args_, **kwargs_)
        else:
            return OrderHeaderType671(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InternalOrderNumber(self): return self.InternalOrderNumber
    def set_InternalOrderNumber(self, InternalOrderNumber): self.InternalOrderNumber = InternalOrderNumber
    def get_InternalOrderDate(self): return self.InternalOrderDate
    def set_InternalOrderDate(self, InternalOrderDate): self.InternalOrderDate = InternalOrderDate
    def get_InvoiceNumber(self): return self.InvoiceNumber
    def set_InvoiceNumber(self, InvoiceNumber): self.InvoiceNumber = InvoiceNumber
    def get_InvoiceDate(self): return self.InvoiceDate
    def set_InvoiceDate(self, InvoiceDate): self.InvoiceDate = InvoiceDate
    def get_PurchaseOrderNumber(self): return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber): self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_ReleaseNumber(self): return self.ReleaseNumber
    def set_ReleaseNumber(self, ReleaseNumber): self.ReleaseNumber = ReleaseNumber
    def get_PurchaseOrderDate(self): return self.PurchaseOrderDate
    def set_PurchaseOrderDate(self, PurchaseOrderDate): self.PurchaseOrderDate = PurchaseOrderDate
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Vendor(self): return self.Vendor
    def set_Vendor(self, Vendor): self.Vendor = Vendor
    def get_JobNumber(self): return self.JobNumber
    def set_JobNumber(self, JobNumber): self.JobNumber = JobNumber
    def get_Division(self): return self.Division
    def set_Division(self, Division): self.Division = Division
    def get_CustomerAccountNumber(self): return self.CustomerAccountNumber
    def set_CustomerAccountNumber(self, CustomerAccountNumber): self.CustomerAccountNumber = CustomerAccountNumber
    def get_CustomerOrderNumber(self): return self.CustomerOrderNumber
    def set_CustomerOrderNumber(self, CustomerOrderNumber): self.CustomerOrderNumber = CustomerOrderNumber
    def get_PromotionDealNumber(self): return self.PromotionDealNumber
    def set_PromotionDealNumber(self, PromotionDealNumber): self.PromotionDealNumber = PromotionDealNumber
    def get_PromotionDealDescription(self): return self.PromotionDealDescription
    def set_PromotionDealDescription(self, PromotionDealDescription): self.PromotionDealDescription = PromotionDealDescription
    def get_DeliveryDate(self): return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate): self.DeliveryDate = DeliveryDate
    def get_DeliveryTime(self): return self.DeliveryTime
    def set_DeliveryTime(self, DeliveryTime): self.DeliveryTime = DeliveryTime
    def hasContent_(self):
        if (
            self.InternalOrderNumber is not None or
            self.InternalOrderDate is not None or
            self.InvoiceNumber is not None or
            self.InvoiceDate is not None or
            self.PurchaseOrderNumber is not None or
            self.ReleaseNumber is not None or
            self.PurchaseOrderDate is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Vendor is not None or
            self.JobNumber is not None or
            self.Division is not None or
            self.CustomerAccountNumber is not None or
            self.CustomerOrderNumber is not None or
            self.PromotionDealNumber is not None or
            self.PromotionDealDescription is not None or
            self.DeliveryDate is not None or
            self.DeliveryTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderHeaderType671', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderHeaderType671')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderHeaderType671', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderHeaderType671'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderHeaderType671', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InternalOrderNumber is not None:
            self.InternalOrderNumber.export(outfile, level, namespace_, name_='InternalOrderNumber', pretty_print=pretty_print)
        if self.InternalOrderDate is not None:
            self.InternalOrderDate.export(outfile, level, namespace_, name_='InternalOrderDate', pretty_print=pretty_print)
        if self.InvoiceNumber is not None:
            self.InvoiceNumber.export(outfile, level, namespace_, name_='InvoiceNumber', pretty_print=pretty_print)
        if self.InvoiceDate is not None:
            self.InvoiceDate.export(outfile, level, namespace_, name_='InvoiceDate', pretty_print=pretty_print)
        if self.PurchaseOrderNumber is not None:
            self.PurchaseOrderNumber.export(outfile, level, namespace_, name_='PurchaseOrderNumber', pretty_print=pretty_print)
        if self.ReleaseNumber is not None:
            self.ReleaseNumber.export(outfile, level, namespace_, name_='ReleaseNumber', pretty_print=pretty_print)
        if self.PurchaseOrderDate is not None:
            self.PurchaseOrderDate.export(outfile, level, namespace_, name_='PurchaseOrderDate', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Vendor is not None:
            self.Vendor.export(outfile, level, namespace_, name_='Vendor', pretty_print=pretty_print)
        if self.JobNumber is not None:
            self.JobNumber.export(outfile, level, namespace_, name_='JobNumber', pretty_print=pretty_print)
        if self.Division is not None:
            self.Division.export(outfile, level, namespace_, name_='Division', pretty_print=pretty_print)
        if self.CustomerAccountNumber is not None:
            self.CustomerAccountNumber.export(outfile, level, namespace_, name_='CustomerAccountNumber', pretty_print=pretty_print)
        if self.CustomerOrderNumber is not None:
            self.CustomerOrderNumber.export(outfile, level, namespace_, name_='CustomerOrderNumber', pretty_print=pretty_print)
        if self.PromotionDealNumber is not None:
            self.PromotionDealNumber.export(outfile, level, namespace_, name_='PromotionDealNumber', pretty_print=pretty_print)
        if self.PromotionDealDescription is not None:
            self.PromotionDealDescription.export(outfile, level, namespace_, name_='PromotionDealDescription', pretty_print=pretty_print)
        if self.DeliveryDate is not None:
            self.DeliveryDate.export(outfile, level, namespace_, name_='DeliveryDate', pretty_print=pretty_print)
        if self.DeliveryTime is not None:
            self.DeliveryTime.export(outfile, level, namespace_, name_='DeliveryTime', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InternalOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternalOrderNumber = obj_
            obj_.original_tagname_ = 'InternalOrderNumber'
        elif nodeName_ == 'InternalOrderDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternalOrderDate = obj_
            obj_.original_tagname_ = 'InternalOrderDate'
        elif nodeName_ == 'InvoiceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InvoiceNumber = obj_
            obj_.original_tagname_ = 'InvoiceNumber'
        elif nodeName_ == 'InvoiceDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InvoiceDate = obj_
            obj_.original_tagname_ = 'InvoiceDate'
        elif nodeName_ == 'PurchaseOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchaseOrderNumber = obj_
            obj_.original_tagname_ = 'PurchaseOrderNumber'
        elif nodeName_ == 'ReleaseNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReleaseNumber = obj_
            obj_.original_tagname_ = 'ReleaseNumber'
        elif nodeName_ == 'PurchaseOrderDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchaseOrderDate = obj_
            obj_.original_tagname_ = 'PurchaseOrderDate'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Vendor':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Vendor = obj_
            obj_.original_tagname_ = 'Vendor'
        elif nodeName_ == 'JobNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JobNumber = obj_
            obj_.original_tagname_ = 'JobNumber'
        elif nodeName_ == 'Division':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Division = obj_
            obj_.original_tagname_ = 'Division'
        elif nodeName_ == 'CustomerAccountNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CustomerAccountNumber = obj_
            obj_.original_tagname_ = 'CustomerAccountNumber'
        elif nodeName_ == 'CustomerOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CustomerOrderNumber = obj_
            obj_.original_tagname_ = 'CustomerOrderNumber'
        elif nodeName_ == 'PromotionDealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PromotionDealNumber = obj_
            obj_.original_tagname_ = 'PromotionDealNumber'
        elif nodeName_ == 'PromotionDealDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PromotionDealDescription = obj_
            obj_.original_tagname_ = 'PromotionDealDescription'
        elif nodeName_ == 'DeliveryDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DeliveryDate = obj_
            obj_.original_tagname_ = 'DeliveryDate'
        elif nodeName_ == 'DeliveryTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DeliveryTime = obj_
            obj_.original_tagname_ = 'DeliveryTime'
# end class OrderHeaderType671


class QuantityAndWeightType672(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackingMedium=None, PackingMaterial=None, LadingQuantity=None, LadingDescription=None, WeightQualifier=None, Weight=None, WeightUOM=None, Volume=None, VolumeUOM=None, PalletExchangeCode=None):
        self.original_tagname_ = None
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType673(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType674(self.PackingMaterial)
        self.LadingQuantity = LadingQuantity
        self.LadingDescription = LadingDescription
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType675(self.WeightQualifier)
        self.Weight = Weight
        self.WeightUOM = WeightUOM
        self.validate_WeightUOMType676(self.WeightUOM)
        self.Volume = Volume
        self.VolumeUOM = VolumeUOM
        self.validate_VolumeUOMType677(self.VolumeUOM)
        self.PalletExchangeCode = PalletExchangeCode
        self.validate_PalletExchangeCodeType678(self.PalletExchangeCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityAndWeightType672)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityAndWeightType672.subclass:
            return QuantityAndWeightType672.subclass(*args_, **kwargs_)
        else:
            return QuantityAndWeightType672(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LadingQuantity(self): return self.LadingQuantity
    def set_LadingQuantity(self, LadingQuantity): self.LadingQuantity = LadingQuantity
    def get_LadingDescription(self): return self.LadingDescription
    def set_LadingDescription(self, LadingDescription): self.LadingDescription = LadingDescription
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_WeightUOM(self): return self.WeightUOM
    def set_WeightUOM(self, WeightUOM): self.WeightUOM = WeightUOM
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_VolumeUOM(self): return self.VolumeUOM
    def set_VolumeUOM(self, VolumeUOM): self.VolumeUOM = VolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def validate_PackingMediumType673(self, value):
        # Validate type PackingMediumType673, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType673' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType674(self, value):
        # Validate type PackingMaterialType674, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType674' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType675(self, value):
        # Validate type WeightQualifierType675, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType675' % {"value" : value.encode("utf-8")} )
    def validate_WeightUOMType676(self, value):
        # Validate type WeightUOMType676, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightUOMType676' % {"value" : value.encode("utf-8")} )
    def validate_VolumeUOMType677(self, value):
        # Validate type VolumeUOMType677, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on VolumeUOMType677' % {"value" : value.encode("utf-8")} )
    def validate_PalletExchangeCodeType678(self, value):
        # Validate type PalletExchangeCodeType678, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletExchangeCodeType678' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LadingQuantity is not None or
            self.LadingDescription is not None or
            self.WeightQualifier is not None or
            self.Weight is not None or
            self.WeightUOM is not None or
            self.Volume is not None or
            self.VolumeUOM is not None or
            self.PalletExchangeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityAndWeightType672', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityAndWeightType672')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityAndWeightType672', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityAndWeightType672'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityAndWeightType672', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.LadingQuantity is not None:
            self.LadingQuantity.export(outfile, level, namespace_, name_='LadingQuantity', pretty_print=pretty_print)
        if self.LadingDescription is not None:
            self.LadingDescription.export(outfile, level, namespace_, name_='LadingDescription', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.WeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightUOM>%s</%sWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightUOM), input_name='WeightUOM')), namespace_, eol_))
        if self.Volume is not None:
            self.Volume.export(outfile, level, namespace_, name_='Volume', pretty_print=pretty_print)
        if self.VolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeUOM>%s</%sVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VolumeUOM), input_name='VolumeUOM')), namespace_, eol_))
        if self.PalletExchangeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletExchangeCode>%s</%sPalletExchangeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletExchangeCode), input_name='PalletExchangeCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType673
            self.validate_PackingMediumType673(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType674
            self.validate_PackingMaterialType674(self.PackingMaterial)
        elif nodeName_ == 'LadingQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingQuantity = obj_
            obj_.original_tagname_ = 'LadingQuantity'
        elif nodeName_ == 'LadingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingDescription = obj_
            obj_.original_tagname_ = 'LadingDescription'
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType675
            self.validate_WeightQualifierType675(self.WeightQualifier)
        elif nodeName_ == 'Weight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'WeightUOM':
            WeightUOM_ = child_.text
            WeightUOM_ = self.gds_validate_string(WeightUOM_, node, 'WeightUOM')
            self.WeightUOM = WeightUOM_
            # validate type WeightUOMType676
            self.validate_WeightUOMType676(self.WeightUOM)
        elif nodeName_ == 'Volume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
        elif nodeName_ == 'VolumeUOM':
            VolumeUOM_ = child_.text
            VolumeUOM_ = self.gds_validate_string(VolumeUOM_, node, 'VolumeUOM')
            self.VolumeUOM = VolumeUOM_
            # validate type VolumeUOMType677
            self.validate_VolumeUOMType677(self.VolumeUOM)
        elif nodeName_ == 'PalletExchangeCode':
            PalletExchangeCode_ = child_.text
            PalletExchangeCode_ = self.gds_validate_string(PalletExchangeCode_, node, 'PalletExchangeCode')
            self.PalletExchangeCode = PalletExchangeCode_
            # validate type PalletExchangeCodeType678
            self.validate_PalletExchangeCodeType678(self.PalletExchangeCode)
# end class QuantityAndWeightType672


class CarrierInformationType679(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType680(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType681(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType682(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType683(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType684(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType685(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType686(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType687(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType679)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType679.subclass:
            return CarrierInformationType679.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType679(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType680(self, value):
        # Validate type StatusCodeType680, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType680' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType681(self, value):
        # Validate type CarrierTransMethodCodeType681, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType681' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType682(self, value):
        # Validate type EquipmentDescriptionCodeType682, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType682' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType683(self, value):
        # Validate type SealStatusCodeType683, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType683' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType684(self, value):
        # Validate type OwnershipCodeType684, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType684' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType685(self, value):
        # Validate type RoutingSequenceCodeType685, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType685' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType686(self, value):
        # Validate type TransitDirectionCodeType686, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType686' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType687(self, value):
        # Validate type TransitTimeQualType687, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType687' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType679', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType679')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType679', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType679'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType679', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType680
            self.validate_StatusCodeType680(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType681
            self.validate_CarrierTransMethodCodeType681(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType682
            self.validate_EquipmentDescriptionCodeType682(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType683
            self.validate_SealStatusCodeType683(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType684
            self.validate_OwnershipCodeType684(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType685
            self.validate_RoutingSequenceCodeType685(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType686
            self.validate_TransitDirectionCodeType686(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType687
            self.validate_TransitTimeQualType687(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType688.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType690.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType679


class ServiceLevelCodesType688(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType689(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType688)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType688.subclass:
            return ServiceLevelCodesType688.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType688(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType689(self, value):
        # Validate type ServiceLevelCodeType689, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType689' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType688', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType688')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType688', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType688'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType688', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType689
            self.validate_ServiceLevelCodeType689(self.ServiceLevelCode)
# end class ServiceLevelCodesType688


class AddressType690(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType691(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType692(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType690)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType690.subclass:
            return AddressType690.subclass(*args_, **kwargs_)
        else:
            return AddressType690(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType691(self, value):
        # Validate type AddressTypeCodeType691, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType691' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType692(self, value):
        # Validate type LocationCodeQualifierType692, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType692' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType690', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType690')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType690', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType690'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType690', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType691
            self.validate_AddressTypeCodeType691(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType692
            self.validate_LocationCodeQualifierType692(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType693.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType690


class DateType693(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type694(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType693)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType693.subclass:
            return DateType693.subclass(*args_, **kwargs_)
        else:
            return DateType693(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type694(self, value):
        # Validate type DateTimeQualifier1Type694, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type694' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType693', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType693')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType693', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType693'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType693', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type694
            self.validate_DateTimeQualifier1Type694(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType693


class DateType695(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type696(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType695)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType695.subclass:
            return DateType695.subclass(*args_, **kwargs_)
        else:
            return DateType695(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type696(self, value):
        # Validate type DateTimeQualifier1Type696, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type696' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType695', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType695')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType695', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType695'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType695', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type696
            self.validate_DateTimeQualifier1Type696(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType695


class ReferenceType697(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType698(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType697)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType697.subclass:
            return ReferenceType697.subclass(*args_, **kwargs_)
        else:
            return ReferenceType697(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType698(self, value):
        # Validate type ReferenceQualType698, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType698' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType697', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType697')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType697', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType697'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType697', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType698
            self.validate_ReferenceQualType698(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType699.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType697


class ReferenceIDsType699(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType700(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType699)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType699.subclass:
            return ReferenceIDsType699.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType699(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType700(self, value):
        # Validate type ReferenceQualType700, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType700' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType699', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType699')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType699', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType699'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType699', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType700
            self.validate_ReferenceQualType700(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType699


class NotesType701(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType702(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType701)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType701.subclass:
            return NotesType701.subclass(*args_, **kwargs_)
        else:
            return NotesType701(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType702(self, value):
        # Validate type NoteCodeType702, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType702' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType701', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType701')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType701', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType701'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType701', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType702
            self.validate_NoteCodeType702(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType701


class AddressType703(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType704(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType705(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType703)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType703.subclass:
            return AddressType703.subclass(*args_, **kwargs_)
        else:
            return AddressType703(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType704(self, value):
        # Validate type AddressTypeCodeType704, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType704' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType705(self, value):
        # Validate type LocationCodeQualifierType705, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType705' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType703', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType703')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType703', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType703'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType703', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType704
            self.validate_AddressTypeCodeType704(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType705
            self.validate_LocationCodeQualifierType705(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType706.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType710.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType714.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType703


class ReferenceType706(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType707(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType706)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType706.subclass:
            return ReferenceType706.subclass(*args_, **kwargs_)
        else:
            return ReferenceType706(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType707(self, value):
        # Validate type ReferenceQualType707, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType707' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType706', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType706')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType706', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType706'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType706', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType707
            self.validate_ReferenceQualType707(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType708.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType706


class ReferenceIDsType708(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType709(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType708)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType708.subclass:
            return ReferenceIDsType708.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType708(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType709(self, value):
        # Validate type ReferenceQualType709, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType709' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType708', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType708')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType708', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType708'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType708', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType709
            self.validate_ReferenceQualType709(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType708


class ContactType710(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType711(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType710)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType710.subclass:
            return ContactType710.subclass(*args_, **kwargs_)
        else:
            return ContactType710(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType711(self, value):
        # Validate type ContactTypeCodeType711, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType711' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType710', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType710')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType710', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType710'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType710', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType711
            self.validate_ContactTypeCodeType711(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType712.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType710


class AdditionalContactDetailsType712(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType713(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType712)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType712.subclass:
            return AdditionalContactDetailsType712.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType712(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType713(self, value):
        # Validate type ContactQualType713, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType713' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType712', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType712')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType712', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType712'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType712', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType713
            self.validate_ContactQualType713(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType712


class DateType714(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type715(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType714)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType714.subclass:
            return DateType714.subclass(*args_, **kwargs_)
        else:
            return DateType714(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type715(self, value):
        # Validate type DateTimeQualifier1Type715, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type715' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType714', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType714')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType714', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType714'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType714', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type715
            self.validate_DateTimeQualifier1Type715(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType714


class TaxType716(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType717(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType718(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType719(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType720(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType721(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType722(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType716)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType716.subclass:
            return TaxType716.subclass(*args_, **kwargs_)
        else:
            return TaxType716(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType717(self, value):
        # Validate type TaxTypeCodeType717, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType717' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType718(self, value):
        # Validate type TaxPercentQualType718, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType718' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType719(self, value):
        # Validate type JurisdictionQualType719, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType719' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType720(self, value):
        # Validate type TaxExemptCodeType720, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType720' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType721(self, value):
        # Validate type RelationshipCodeType721, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType721' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType722(self, value):
        # Validate type TaxHandlingCodeType722, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType722' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType716', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType716')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType716', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType716'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType716', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType717
            self.validate_TaxTypeCodeType717(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType718
            self.validate_TaxPercentQualType718(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType719
            self.validate_JurisdictionQualType719(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType720
            self.validate_TaxExemptCodeType720(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType721
            self.validate_RelationshipCodeType721(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType722
            self.validate_TaxHandlingCodeType722(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType716


class ChargesAllowancesType723(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType724(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType725(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType726(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType727(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType728(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType729(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType723)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType723.subclass:
            return ChargesAllowancesType723.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType723(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType724(self, value):
        # Validate type AllowChrgIndicatorType724, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType724' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType725(self, value):
        # Validate type AllowChrgCodeType725, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType725' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType726(self, value):
        # Validate type AllowChrgAgencyCodeType726, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType726' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType727(self, value):
        # Validate type AllowChrgPercentQualType727, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType727' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType728(self, value):
        # Validate type AllowChrgQtyUOMType728, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType728' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType729(self, value):
        # Validate type AllowChrgHandlingCodeType729, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType729' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType723', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType723')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType723', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType723'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType723', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType724
            self.validate_AllowChrgIndicatorType724(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType725
            self.validate_AllowChrgCodeType725(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType726
            self.validate_AllowChrgAgencyCodeType726(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType727
            self.validate_AllowChrgPercentQualType727(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType728
            self.validate_AllowChrgQtyUOMType728(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType729
            self.validate_AllowChrgHandlingCodeType729(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType730.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType723


class TaxType730(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType731(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType732(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType733(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType734(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType735(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType736(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType730)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType730.subclass:
            return TaxType730.subclass(*args_, **kwargs_)
        else:
            return TaxType730(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType731(self, value):
        # Validate type TaxTypeCodeType731, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType731' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType732(self, value):
        # Validate type TaxPercentQualType732, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType732' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType733(self, value):
        # Validate type JurisdictionQualType733, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType733' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType734(self, value):
        # Validate type TaxExemptCodeType734, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType734' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType735(self, value):
        # Validate type RelationshipCodeType735, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType735' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType736(self, value):
        # Validate type TaxHandlingCodeType736, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType736' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType730', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType730')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType730', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType730'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType730', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType731
            self.validate_TaxTypeCodeType731(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType732
            self.validate_TaxPercentQualType732(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType733
            self.validate_JurisdictionQualType733(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType734
            self.validate_TaxExemptCodeType734(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType735
            self.validate_RelationshipCodeType735(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType736
            self.validate_TaxHandlingCodeType736(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType730


class CommodityType737(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType738(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType737)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType737.subclass:
            return CommodityType737.subclass(*args_, **kwargs_)
        else:
            return CommodityType737(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType738(self, value):
        # Validate type CommodityCodeQualifierType738, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType738' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType737', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType737')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType737', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType737'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType737', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType738
            self.validate_CommodityCodeQualifierType738(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType737


class PackType739(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackLevelType=None, ShippingSerialID=None, CarrierPackageID=None):
        self.original_tagname_ = None
        self.PackLevelType = PackLevelType
        self.validate_PackLevelTypeType740(self.PackLevelType)
        self.ShippingSerialID = ShippingSerialID
        self.CarrierPackageID = CarrierPackageID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackType739)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackType739.subclass:
            return PackType739.subclass(*args_, **kwargs_)
        else:
            return PackType739(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackLevelType(self): return self.PackLevelType
    def set_PackLevelType(self, PackLevelType): self.PackLevelType = PackLevelType
    def get_ShippingSerialID(self): return self.ShippingSerialID
    def set_ShippingSerialID(self, ShippingSerialID): self.ShippingSerialID = ShippingSerialID
    def get_CarrierPackageID(self): return self.CarrierPackageID
    def set_CarrierPackageID(self, CarrierPackageID): self.CarrierPackageID = CarrierPackageID
    def validate_PackLevelTypeType740(self, value):
        # Validate type PackLevelTypeType740, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['P', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackLevelTypeType740' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackLevelType is not None or
            self.ShippingSerialID is not None or
            self.CarrierPackageID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackType739', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackType739')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackType739', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackType739'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackType739', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackLevelType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackLevelType>%s</%sPackLevelType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackLevelType), input_name='PackLevelType')), namespace_, eol_))
        if self.ShippingSerialID is not None:
            self.ShippingSerialID.export(outfile, level, namespace_, name_='ShippingSerialID', pretty_print=pretty_print)
        if self.CarrierPackageID is not None:
            self.CarrierPackageID.export(outfile, level, namespace_, name_='CarrierPackageID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackLevelType':
            PackLevelType_ = child_.text
            PackLevelType_ = self.gds_validate_string(PackLevelType_, node, 'PackLevelType')
            self.PackLevelType = PackLevelType_
            # validate type PackLevelTypeType740
            self.validate_PackLevelTypeType740(self.PackLevelType)
        elif nodeName_ == 'ShippingSerialID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShippingSerialID = obj_
            obj_.original_tagname_ = 'ShippingSerialID'
        elif nodeName_ == 'CarrierPackageID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierPackageID = obj_
            obj_.original_tagname_ = 'CarrierPackageID'
# end class PackType739


class PhysicalDetailsType741(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.validate_PackQualifierType742(self.PackQualifier)
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.validate_PackUOMType743(self.PackUOM)
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType744(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType745(self.PackingMaterial)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType746(self.WeightQualifier)
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.validate_PackWeightUOMType747(self.PackWeightUOM)
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.validate_PackVolumeUOMType748(self.PackVolumeUOM)
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.validate_PackDimensionUOMType749(self.PackDimensionUOM)
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType741)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType741.subclass:
            return PhysicalDetailsType741.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType741(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def validate_PackQualifierType742(self, value):
        # Validate type PackQualifierType742, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackQualifierType742' % {"value" : value.encode("utf-8")} )
    def validate_PackUOMType743(self, value):
        # Validate type PackUOMType743, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackUOMType743' % {"value" : value.encode("utf-8")} )
    def validate_PackingMediumType744(self, value):
        # Validate type PackingMediumType744, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType744' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType745(self, value):
        # Validate type PackingMaterialType745, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType745' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType746(self, value):
        # Validate type WeightQualifierType746, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType746' % {"value" : value.encode("utf-8")} )
    def validate_PackWeightUOMType747(self, value):
        # Validate type PackWeightUOMType747, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackWeightUOMType747' % {"value" : value.encode("utf-8")} )
    def validate_PackVolumeUOMType748(self, value):
        # Validate type PackVolumeUOMType748, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackVolumeUOMType748' % {"value" : value.encode("utf-8")} )
    def validate_PackDimensionUOMType749(self, value):
        # Validate type PackDimensionUOMType749, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackDimensionUOMType749' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType741', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType741')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType741', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType741'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType741', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackQualifier>%s</%sPackQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackQualifier), input_name='PackQualifier')), namespace_, eol_))
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackUOM>%s</%sPackUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackUOM), input_name='PackUOM')), namespace_, eol_))
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeightUOM>%s</%sPackWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeightUOM), input_name='PackWeightUOM')), namespace_, eol_))
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolumeUOM>%s</%sPackVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolumeUOM), input_name='PackVolumeUOM')), namespace_, eol_))
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackDimensionUOM>%s</%sPackDimensionUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackDimensionUOM), input_name='PackDimensionUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            PackQualifier_ = child_.text
            PackQualifier_ = self.gds_validate_string(PackQualifier_, node, 'PackQualifier')
            self.PackQualifier = PackQualifier_
            # validate type PackQualifierType742
            self.validate_PackQualifierType742(self.PackQualifier)
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            PackUOM_ = child_.text
            PackUOM_ = self.gds_validate_string(PackUOM_, node, 'PackUOM')
            self.PackUOM = PackUOM_
            # validate type PackUOMType743
            self.validate_PackUOMType743(self.PackUOM)
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType744
            self.validate_PackingMediumType744(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType745
            self.validate_PackingMaterialType745(self.PackingMaterial)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType746
            self.validate_WeightQualifierType746(self.WeightQualifier)
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            PackWeightUOM_ = child_.text
            PackWeightUOM_ = self.gds_validate_string(PackWeightUOM_, node, 'PackWeightUOM')
            self.PackWeightUOM = PackWeightUOM_
            # validate type PackWeightUOMType747
            self.validate_PackWeightUOMType747(self.PackWeightUOM)
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            PackVolumeUOM_ = child_.text
            PackVolumeUOM_ = self.gds_validate_string(PackVolumeUOM_, node, 'PackVolumeUOM')
            self.PackVolumeUOM = PackVolumeUOM_
            # validate type PackVolumeUOMType748
            self.validate_PackVolumeUOMType748(self.PackVolumeUOM)
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            PackDimensionUOM_ = child_.text
            PackDimensionUOM_ = self.gds_validate_string(PackDimensionUOM_, node, 'PackDimensionUOM')
            self.PackDimensionUOM = PackDimensionUOM_
            # validate type PackDimensionUOMType749
            self.validate_PackDimensionUOMType749(self.PackDimensionUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType741


class MarksAndNumbersCollectionType750(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MarksAndNumbersQualifier1=None, MarksAndNumbers1=None):
        self.original_tagname_ = None
        self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
        self.validate_MarksAndNumbersQualifier1Type751(self.MarksAndNumbersQualifier1)
        self.MarksAndNumbers1 = MarksAndNumbers1
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarksAndNumbersCollectionType750)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarksAndNumbersCollectionType750.subclass:
            return MarksAndNumbersCollectionType750.subclass(*args_, **kwargs_)
        else:
            return MarksAndNumbersCollectionType750(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarksAndNumbersQualifier1(self): return self.MarksAndNumbersQualifier1
    def set_MarksAndNumbersQualifier1(self, MarksAndNumbersQualifier1): self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
    def get_MarksAndNumbers1(self): return self.MarksAndNumbers1
    def set_MarksAndNumbers1(self, MarksAndNumbers1): self.MarksAndNumbers1 = MarksAndNumbers1
    def validate_MarksAndNumbersQualifier1Type751(self, value):
        # Validate type MarksAndNumbersQualifier1Type751, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CA', 'SI', 'UC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MarksAndNumbersQualifier1Type751' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MarksAndNumbersQualifier1 is not None or
            self.MarksAndNumbers1 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType750', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MarksAndNumbersCollectionType750')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MarksAndNumbersCollectionType750', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MarksAndNumbersCollectionType750'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType750', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarksAndNumbersQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarksAndNumbersQualifier1>%s</%sMarksAndNumbersQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MarksAndNumbersQualifier1), input_name='MarksAndNumbersQualifier1')), namespace_, eol_))
        if self.MarksAndNumbers1 is not None:
            self.MarksAndNumbers1.export(outfile, level, namespace_, name_='MarksAndNumbers1', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarksAndNumbersQualifier1':
            MarksAndNumbersQualifier1_ = child_.text
            MarksAndNumbersQualifier1_ = self.gds_validate_string(MarksAndNumbersQualifier1_, node, 'MarksAndNumbersQualifier1')
            self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1_
            # validate type MarksAndNumbersQualifier1Type751
            self.validate_MarksAndNumbersQualifier1Type751(self.MarksAndNumbersQualifier1)
        elif nodeName_ == 'MarksAndNumbers1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MarksAndNumbers1 = obj_
            obj_.original_tagname_ = 'MarksAndNumbers1'
# end class MarksAndNumbersCollectionType750


class PalletInformationType752(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PalletQualifier=None, PalletValue=None, PalletTypeCode=None, PalletTiers=None, PalletBlocks=None, UnitWeight=None, UnitWeightUOM=None, Length=None, Width=None, Height=None, UnitOfMeasure=None, WeightQualifier=None, PalletWeight=None, PalletWeightUOM=None, PalletVolume=None, PalletVolumeUOM=None, PalletExchangeCode=None, PalletStructureCode=None):
        self.original_tagname_ = None
        self.PalletQualifier = PalletQualifier
        self.validate_PalletQualifierType753(self.PalletQualifier)
        self.PalletValue = PalletValue
        self.PalletTypeCode = PalletTypeCode
        self.validate_PalletTypeCodeType754(self.PalletTypeCode)
        self.PalletTiers = PalletTiers
        self.PalletBlocks = PalletBlocks
        self.UnitWeight = UnitWeight
        self.UnitWeightUOM = UnitWeightUOM
        self.validate_UnitWeightUOMType755(self.UnitWeightUOM)
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.UnitOfMeasure = UnitOfMeasure
        self.validate_UnitOfMeasureType756(self.UnitOfMeasure)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType757(self.WeightQualifier)
        self.PalletWeight = PalletWeight
        self.PalletWeightUOM = PalletWeightUOM
        self.validate_PalletWeightUOMType758(self.PalletWeightUOM)
        self.PalletVolume = PalletVolume
        self.PalletVolumeUOM = PalletVolumeUOM
        self.validate_PalletVolumeUOMType759(self.PalletVolumeUOM)
        self.PalletExchangeCode = PalletExchangeCode
        self.validate_PalletExchangeCodeType760(self.PalletExchangeCode)
        self.PalletStructureCode = PalletStructureCode
        self.validate_PalletStructureCodeType761(self.PalletStructureCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletInformationType752)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletInformationType752.subclass:
            return PalletInformationType752.subclass(*args_, **kwargs_)
        else:
            return PalletInformationType752(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletQualifier(self): return self.PalletQualifier
    def set_PalletQualifier(self, PalletQualifier): self.PalletQualifier = PalletQualifier
    def get_PalletValue(self): return self.PalletValue
    def set_PalletValue(self, PalletValue): self.PalletValue = PalletValue
    def get_PalletTypeCode(self): return self.PalletTypeCode
    def set_PalletTypeCode(self, PalletTypeCode): self.PalletTypeCode = PalletTypeCode
    def get_PalletTiers(self): return self.PalletTiers
    def set_PalletTiers(self, PalletTiers): self.PalletTiers = PalletTiers
    def get_PalletBlocks(self): return self.PalletBlocks
    def set_PalletBlocks(self, PalletBlocks): self.PalletBlocks = PalletBlocks
    def get_UnitWeight(self): return self.UnitWeight
    def set_UnitWeight(self, UnitWeight): self.UnitWeight = UnitWeight
    def get_UnitWeightUOM(self): return self.UnitWeightUOM
    def set_UnitWeightUOM(self, UnitWeightUOM): self.UnitWeightUOM = UnitWeightUOM
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PalletWeight(self): return self.PalletWeight
    def set_PalletWeight(self, PalletWeight): self.PalletWeight = PalletWeight
    def get_PalletWeightUOM(self): return self.PalletWeightUOM
    def set_PalletWeightUOM(self, PalletWeightUOM): self.PalletWeightUOM = PalletWeightUOM
    def get_PalletVolume(self): return self.PalletVolume
    def set_PalletVolume(self, PalletVolume): self.PalletVolume = PalletVolume
    def get_PalletVolumeUOM(self): return self.PalletVolumeUOM
    def set_PalletVolumeUOM(self, PalletVolumeUOM): self.PalletVolumeUOM = PalletVolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def get_PalletStructureCode(self): return self.PalletStructureCode
    def set_PalletStructureCode(self, PalletStructureCode): self.PalletStructureCode = PalletStructureCode
    def validate_PalletQualifierType753(self, value):
        # Validate type PalletQualifierType753, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletQualifierType753' % {"value" : value.encode("utf-8")} )
    def validate_PalletTypeCodeType754(self, value):
        # Validate type PalletTypeCodeType754, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '10', '11', '3', '4', '5', '6', '7', '8']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletTypeCodeType754' % {"value" : value.encode("utf-8")} )
    def validate_UnitWeightUOMType755(self, value):
        # Validate type UnitWeightUOMType755, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitWeightUOMType755' % {"value" : value.encode("utf-8")} )
    def validate_UnitOfMeasureType756(self, value):
        # Validate type UnitOfMeasureType756, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitOfMeasureType756' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType757(self, value):
        # Validate type WeightQualifierType757, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType757' % {"value" : value.encode("utf-8")} )
    def validate_PalletWeightUOMType758(self, value):
        # Validate type PalletWeightUOMType758, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletWeightUOMType758' % {"value" : value.encode("utf-8")} )
    def validate_PalletVolumeUOMType759(self, value):
        # Validate type PalletVolumeUOMType759, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletVolumeUOMType759' % {"value" : value.encode("utf-8")} )
    def validate_PalletExchangeCodeType760(self, value):
        # Validate type PalletExchangeCodeType760, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletExchangeCodeType760' % {"value" : value.encode("utf-8")} )
    def validate_PalletStructureCodeType761(self, value):
        # Validate type PalletStructureCodeType761, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'B', 'C', 'S']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PalletStructureCodeType761' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PalletQualifier is not None or
            self.PalletValue is not None or
            self.PalletTypeCode is not None or
            self.PalletTiers is not None or
            self.PalletBlocks is not None or
            self.UnitWeight is not None or
            self.UnitWeightUOM is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.UnitOfMeasure is not None or
            self.WeightQualifier is not None or
            self.PalletWeight is not None or
            self.PalletWeightUOM is not None or
            self.PalletVolume is not None or
            self.PalletVolumeUOM is not None or
            self.PalletExchangeCode is not None or
            self.PalletStructureCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PalletInformationType752', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletInformationType752')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PalletInformationType752', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PalletInformationType752'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PalletInformationType752', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletQualifier>%s</%sPalletQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletQualifier), input_name='PalletQualifier')), namespace_, eol_))
        if self.PalletValue is not None:
            self.PalletValue.export(outfile, level, namespace_, name_='PalletValue', pretty_print=pretty_print)
        if self.PalletTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletTypeCode>%s</%sPalletTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletTypeCode), input_name='PalletTypeCode')), namespace_, eol_))
        if self.PalletTiers is not None:
            self.PalletTiers.export(outfile, level, namespace_, name_='PalletTiers', pretty_print=pretty_print)
        if self.PalletBlocks is not None:
            self.PalletBlocks.export(outfile, level, namespace_, name_='PalletBlocks', pretty_print=pretty_print)
        if self.UnitWeight is not None:
            self.UnitWeight.export(outfile, level, namespace_, name_='UnitWeight', pretty_print=pretty_print)
        if self.UnitWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitWeightUOM>%s</%sUnitWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitWeightUOM), input_name='UnitWeightUOM')), namespace_, eol_))
        if self.Length is not None:
            self.Length.export(outfile, level, namespace_, name_='Length', pretty_print=pretty_print)
        if self.Width is not None:
            self.Width.export(outfile, level, namespace_, name_='Width', pretty_print=pretty_print)
        if self.Height is not None:
            self.Height.export(outfile, level, namespace_, name_='Height', pretty_print=pretty_print)
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitOfMeasure), input_name='UnitOfMeasure')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PalletWeight is not None:
            self.PalletWeight.export(outfile, level, namespace_, name_='PalletWeight', pretty_print=pretty_print)
        if self.PalletWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletWeightUOM>%s</%sPalletWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletWeightUOM), input_name='PalletWeightUOM')), namespace_, eol_))
        if self.PalletVolume is not None:
            self.PalletVolume.export(outfile, level, namespace_, name_='PalletVolume', pretty_print=pretty_print)
        if self.PalletVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletVolumeUOM>%s</%sPalletVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletVolumeUOM), input_name='PalletVolumeUOM')), namespace_, eol_))
        if self.PalletExchangeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletExchangeCode>%s</%sPalletExchangeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletExchangeCode), input_name='PalletExchangeCode')), namespace_, eol_))
        if self.PalletStructureCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletStructureCode>%s</%sPalletStructureCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletStructureCode), input_name='PalletStructureCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletQualifier':
            PalletQualifier_ = child_.text
            PalletQualifier_ = self.gds_validate_string(PalletQualifier_, node, 'PalletQualifier')
            self.PalletQualifier = PalletQualifier_
            # validate type PalletQualifierType753
            self.validate_PalletQualifierType753(self.PalletQualifier)
        elif nodeName_ == 'PalletValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletValue = obj_
            obj_.original_tagname_ = 'PalletValue'
        elif nodeName_ == 'PalletTypeCode':
            PalletTypeCode_ = child_.text
            PalletTypeCode_ = self.gds_validate_string(PalletTypeCode_, node, 'PalletTypeCode')
            self.PalletTypeCode = PalletTypeCode_
            # validate type PalletTypeCodeType754
            self.validate_PalletTypeCodeType754(self.PalletTypeCode)
        elif nodeName_ == 'PalletTiers':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTiers = obj_
            obj_.original_tagname_ = 'PalletTiers'
        elif nodeName_ == 'PalletBlocks':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletBlocks = obj_
            obj_.original_tagname_ = 'PalletBlocks'
        elif nodeName_ == 'UnitWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeight = obj_
            obj_.original_tagname_ = 'UnitWeight'
        elif nodeName_ == 'UnitWeightUOM':
            UnitWeightUOM_ = child_.text
            UnitWeightUOM_ = self.gds_validate_string(UnitWeightUOM_, node, 'UnitWeightUOM')
            self.UnitWeightUOM = UnitWeightUOM_
            # validate type UnitWeightUOMType755
            self.validate_UnitWeightUOMType755(self.UnitWeightUOM)
        elif nodeName_ == 'Length':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Length = obj_
            obj_.original_tagname_ = 'Length'
        elif nodeName_ == 'Width':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Width = obj_
            obj_.original_tagname_ = 'Width'
        elif nodeName_ == 'Height':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Height = obj_
            obj_.original_tagname_ = 'Height'
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
            # validate type UnitOfMeasureType756
            self.validate_UnitOfMeasureType756(self.UnitOfMeasure)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType757
            self.validate_WeightQualifierType757(self.WeightQualifier)
        elif nodeName_ == 'PalletWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeight = obj_
            obj_.original_tagname_ = 'PalletWeight'
        elif nodeName_ == 'PalletWeightUOM':
            PalletWeightUOM_ = child_.text
            PalletWeightUOM_ = self.gds_validate_string(PalletWeightUOM_, node, 'PalletWeightUOM')
            self.PalletWeightUOM = PalletWeightUOM_
            # validate type PalletWeightUOMType758
            self.validate_PalletWeightUOMType758(self.PalletWeightUOM)
        elif nodeName_ == 'PalletVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolume = obj_
            obj_.original_tagname_ = 'PalletVolume'
        elif nodeName_ == 'PalletVolumeUOM':
            PalletVolumeUOM_ = child_.text
            PalletVolumeUOM_ = self.gds_validate_string(PalletVolumeUOM_, node, 'PalletVolumeUOM')
            self.PalletVolumeUOM = PalletVolumeUOM_
            # validate type PalletVolumeUOMType759
            self.validate_PalletVolumeUOMType759(self.PalletVolumeUOM)
        elif nodeName_ == 'PalletExchangeCode':
            PalletExchangeCode_ = child_.text
            PalletExchangeCode_ = self.gds_validate_string(PalletExchangeCode_, node, 'PalletExchangeCode')
            self.PalletExchangeCode = PalletExchangeCode_
            # validate type PalletExchangeCodeType760
            self.validate_PalletExchangeCodeType760(self.PalletExchangeCode)
        elif nodeName_ == 'PalletStructureCode':
            PalletStructureCode_ = child_.text
            PalletStructureCode_ = self.gds_validate_string(PalletStructureCode_, node, 'PalletStructureCode')
            self.PalletStructureCode = PalletStructureCode_
            # validate type PalletStructureCodeType761
            self.validate_PalletStructureCodeType761(self.PalletStructureCode)
# end class PalletInformationType752


class DateType762(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type763(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType762)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType762.subclass:
            return DateType762.subclass(*args_, **kwargs_)
        else:
            return DateType762(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type763(self, value):
        # Validate type DateTimeQualifier1Type763, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type763' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType762', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType762')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType762', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType762'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType762', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type763
            self.validate_DateTimeQualifier1Type763(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType762


class ReferenceType764(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType765(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType764)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType764.subclass:
            return ReferenceType764.subclass(*args_, **kwargs_)
        else:
            return ReferenceType764(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType765(self, value):
        # Validate type ReferenceQualType765, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType765' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType764', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType764')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType764', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType764'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType764', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType765
            self.validate_ReferenceQualType765(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType766.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType764


class ReferenceIDsType766(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType767(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType766)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType766.subclass:
            return ReferenceIDsType766.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType766(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType767(self, value):
        # Validate type ReferenceQualType767, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType767' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType766', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType766')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType766', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType766'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType766', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType767
            self.validate_ReferenceQualType767(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType766


class NotesType768(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType769(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType768)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType768.subclass:
            return NotesType768.subclass(*args_, **kwargs_)
        else:
            return NotesType768(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType769(self, value):
        # Validate type NoteCodeType769, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType769' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType768', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType768')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType768', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType768'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType768', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType769
            self.validate_NoteCodeType769(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType768


class AddressType770(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType771(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType772(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType770)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType770.subclass:
            return AddressType770.subclass(*args_, **kwargs_)
        else:
            return AddressType770(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType771(self, value):
        # Validate type AddressTypeCodeType771, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType771' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType772(self, value):
        # Validate type LocationCodeQualifierType772, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType772' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType770', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType770')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType770', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType770'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType770', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType771
            self.validate_AddressTypeCodeType771(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType772
            self.validate_LocationCodeQualifierType772(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType773.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType777.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType781.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType770


class ReferenceType773(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType774(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType773)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType773.subclass:
            return ReferenceType773.subclass(*args_, **kwargs_)
        else:
            return ReferenceType773(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType774(self, value):
        # Validate type ReferenceQualType774, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType774' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType773', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType773')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType773', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType773'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType773', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType774
            self.validate_ReferenceQualType774(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType775.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType773


class ReferenceIDsType775(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType776(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType775)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType775.subclass:
            return ReferenceIDsType775.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType775(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType776(self, value):
        # Validate type ReferenceQualType776, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType776' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType775', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType775')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType775', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType775'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType775', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType776
            self.validate_ReferenceQualType776(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType775


class ContactType777(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType778(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType777)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType777.subclass:
            return ContactType777.subclass(*args_, **kwargs_)
        else:
            return ContactType777(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType778(self, value):
        # Validate type ContactTypeCodeType778, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType778' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType777', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType777')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType777', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType777'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType777', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType778
            self.validate_ContactTypeCodeType778(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType779.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType777


class AdditionalContactDetailsType779(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType780(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType779)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType779.subclass:
            return AdditionalContactDetailsType779.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType779(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType780(self, value):
        # Validate type ContactQualType780, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType780' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType779', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType779')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType779', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType779'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType779', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType780
            self.validate_ContactQualType780(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType779


class DateType781(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type782(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType781)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType781.subclass:
            return DateType781.subclass(*args_, **kwargs_)
        else:
            return DateType781(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type782(self, value):
        # Validate type DateTimeQualifier1Type782, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type782' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType781', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType781')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType781', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType781'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType781', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type782
            self.validate_DateTimeQualifier1Type782(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType781


class TaxType783(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType784(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType785(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType786(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType787(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType788(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType789(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType783)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType783.subclass:
            return TaxType783.subclass(*args_, **kwargs_)
        else:
            return TaxType783(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType784(self, value):
        # Validate type TaxTypeCodeType784, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType784' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType785(self, value):
        # Validate type TaxPercentQualType785, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType785' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType786(self, value):
        # Validate type JurisdictionQualType786, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType786' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType787(self, value):
        # Validate type TaxExemptCodeType787, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType787' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType788(self, value):
        # Validate type RelationshipCodeType788, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType788' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType789(self, value):
        # Validate type TaxHandlingCodeType789, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType789' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType783', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType783')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType783', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType783'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType783', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType784
            self.validate_TaxTypeCodeType784(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType785
            self.validate_TaxPercentQualType785(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType786
            self.validate_JurisdictionQualType786(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType787
            self.validate_TaxExemptCodeType787(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType788
            self.validate_RelationshipCodeType788(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType789
            self.validate_TaxHandlingCodeType789(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType783


class ChargesAllowancesType790(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType791(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType792(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType793(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType794(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType795(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType796(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType790)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType790.subclass:
            return ChargesAllowancesType790.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType790(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType791(self, value):
        # Validate type AllowChrgIndicatorType791, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType791' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType792(self, value):
        # Validate type AllowChrgCodeType792, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType792' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType793(self, value):
        # Validate type AllowChrgAgencyCodeType793, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType793' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType794(self, value):
        # Validate type AllowChrgPercentQualType794, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType794' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType795(self, value):
        # Validate type AllowChrgQtyUOMType795, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType795' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType796(self, value):
        # Validate type AllowChrgHandlingCodeType796, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType796' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType790', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType790')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType790', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType790'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType790', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType791
            self.validate_AllowChrgIndicatorType791(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType792
            self.validate_AllowChrgCodeType792(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType793
            self.validate_AllowChrgAgencyCodeType793(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType794
            self.validate_AllowChrgPercentQualType794(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType795
            self.validate_AllowChrgQtyUOMType795(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType796
            self.validate_AllowChrgHandlingCodeType796(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType797.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType790


class TaxType797(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType798(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType799(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType800(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType801(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType802(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType803(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType797)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType797.subclass:
            return TaxType797.subclass(*args_, **kwargs_)
        else:
            return TaxType797(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType798(self, value):
        # Validate type TaxTypeCodeType798, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType798' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType799(self, value):
        # Validate type TaxPercentQualType799, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType799' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType800(self, value):
        # Validate type JurisdictionQualType800, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType800' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType801(self, value):
        # Validate type TaxExemptCodeType801, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType801' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType802(self, value):
        # Validate type RelationshipCodeType802, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType802' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType803(self, value):
        # Validate type TaxHandlingCodeType803, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType803' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType797', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType797')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType797', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType797'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType797', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType798
            self.validate_TaxTypeCodeType798(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType799
            self.validate_TaxPercentQualType799(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType800
            self.validate_JurisdictionQualType800(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType801
            self.validate_TaxExemptCodeType801(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType802
            self.validate_RelationshipCodeType802(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType803
            self.validate_TaxHandlingCodeType803(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType797


class CarrierInformationType804(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType805(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType806(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType807(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType808(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType809(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType810(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType811(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType812(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType804)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType804.subclass:
            return CarrierInformationType804.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType804(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType805(self, value):
        # Validate type StatusCodeType805, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType805' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType806(self, value):
        # Validate type CarrierTransMethodCodeType806, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType806' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType807(self, value):
        # Validate type EquipmentDescriptionCodeType807, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType807' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType808(self, value):
        # Validate type SealStatusCodeType808, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType808' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType809(self, value):
        # Validate type OwnershipCodeType809, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType809' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType810(self, value):
        # Validate type RoutingSequenceCodeType810, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType810' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType811(self, value):
        # Validate type TransitDirectionCodeType811, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType811' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType812(self, value):
        # Validate type TransitTimeQualType812, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType812' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType804', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType804')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType804', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType804'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType804', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType805
            self.validate_StatusCodeType805(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType806
            self.validate_CarrierTransMethodCodeType806(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType807
            self.validate_EquipmentDescriptionCodeType807(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType808
            self.validate_SealStatusCodeType808(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType809
            self.validate_OwnershipCodeType809(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType810
            self.validate_RoutingSequenceCodeType810(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType811
            self.validate_TransitDirectionCodeType811(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType812
            self.validate_TransitTimeQualType812(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType813.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType815.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType804


class ServiceLevelCodesType813(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType814(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType813)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType813.subclass:
            return ServiceLevelCodesType813.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType813(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType814(self, value):
        # Validate type ServiceLevelCodeType814, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType814' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType813', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType813')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType813', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType813'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType813', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType814
            self.validate_ServiceLevelCodeType814(self.ServiceLevelCode)
# end class ServiceLevelCodesType813


class AddressType815(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType816(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType817(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType815)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType815.subclass:
            return AddressType815.subclass(*args_, **kwargs_)
        else:
            return AddressType815(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType816(self, value):
        # Validate type AddressTypeCodeType816, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType816' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType817(self, value):
        # Validate type LocationCodeQualifierType817, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType817' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType815', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType815')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType815', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType815'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType815', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType816
            self.validate_AddressTypeCodeType816(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType817
            self.validate_LocationCodeQualifierType817(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType818.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType815


class DateType818(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type819(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType818)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType818.subclass:
            return DateType818.subclass(*args_, **kwargs_)
        else:
            return DateType818(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type819(self, value):
        # Validate type DateTimeQualifier1Type819, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type819' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType818', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType818')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType818', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType818'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType818', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type819
            self.validate_DateTimeQualifier1Type819(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType818


class PackagingType820(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, PackagingCharacteristicCode=None, AgencyQualifierCode=None, PackagingDescriptionCode=None, PackagingDescription=None, UnitLoadOptionCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType821(self.ItemDescriptionType)
        self.PackagingCharacteristicCode = PackagingCharacteristicCode
        self.validate_PackagingCharacteristicCodeType822(self.PackagingCharacteristicCode)
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType823(self.AgencyQualifierCode)
        self.PackagingDescriptionCode = PackagingDescriptionCode
        self.PackagingDescription = PackagingDescription
        self.UnitLoadOptionCode = UnitLoadOptionCode
        self.validate_UnitLoadOptionCodeType824(self.UnitLoadOptionCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingType820)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingType820.subclass:
            return PackagingType820.subclass(*args_, **kwargs_)
        else:
            return PackagingType820(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_PackagingCharacteristicCode(self): return self.PackagingCharacteristicCode
    def set_PackagingCharacteristicCode(self, PackagingCharacteristicCode): self.PackagingCharacteristicCode = PackagingCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_PackagingDescriptionCode(self): return self.PackagingDescriptionCode
    def set_PackagingDescriptionCode(self, PackagingDescriptionCode): self.PackagingDescriptionCode = PackagingDescriptionCode
    def get_PackagingDescription(self): return self.PackagingDescription
    def set_PackagingDescription(self, PackagingDescription): self.PackagingDescription = PackagingDescription
    def get_UnitLoadOptionCode(self): return self.UnitLoadOptionCode
    def set_UnitLoadOptionCode(self, UnitLoadOptionCode): self.UnitLoadOptionCode = UnitLoadOptionCode
    def validate_ItemDescriptionTypeType821(self, value):
        # Validate type ItemDescriptionTypeType821, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType821' % {"value" : value.encode("utf-8")} )
    def validate_PackagingCharacteristicCodeType822(self, value):
        # Validate type PackagingCharacteristicCodeType822, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['10', '34', '35', '36', 'HZ', 'PK']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackagingCharacteristicCodeType822' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType823(self, value):
        # Validate type AgencyQualifierCodeType823, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType823' % {"value" : value.encode("utf-8")} )
    def validate_UnitLoadOptionCodeType824(self, value):
        # Validate type UnitLoadOptionCodeType824, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitLoadOptionCodeType824' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.PackagingCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.PackagingDescriptionCode is not None or
            self.PackagingDescription is not None or
            self.UnitLoadOptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackagingType820', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackagingType820')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackagingType820', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackagingType820'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackagingType820', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.PackagingCharacteristicCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingCharacteristicCode>%s</%sPackagingCharacteristicCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackagingCharacteristicCode), input_name='PackagingCharacteristicCode')), namespace_, eol_))
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.PackagingDescriptionCode is not None:
            self.PackagingDescriptionCode.export(outfile, level, namespace_, name_='PackagingDescriptionCode', pretty_print=pretty_print)
        if self.PackagingDescription is not None:
            self.PackagingDescription.export(outfile, level, namespace_, name_='PackagingDescription', pretty_print=pretty_print)
        if self.UnitLoadOptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitLoadOptionCode>%s</%sUnitLoadOptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitLoadOptionCode), input_name='UnitLoadOptionCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType821
            self.validate_ItemDescriptionTypeType821(self.ItemDescriptionType)
        elif nodeName_ == 'PackagingCharacteristicCode':
            PackagingCharacteristicCode_ = child_.text
            PackagingCharacteristicCode_ = self.gds_validate_string(PackagingCharacteristicCode_, node, 'PackagingCharacteristicCode')
            self.PackagingCharacteristicCode = PackagingCharacteristicCode_
            # validate type PackagingCharacteristicCodeType822
            self.validate_PackagingCharacteristicCodeType822(self.PackagingCharacteristicCode)
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType823
            self.validate_AgencyQualifierCodeType823(self.AgencyQualifierCode)
        elif nodeName_ == 'PackagingDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescriptionCode = obj_
            obj_.original_tagname_ = 'PackagingDescriptionCode'
        elif nodeName_ == 'PackagingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescription = obj_
            obj_.original_tagname_ = 'PackagingDescription'
        elif nodeName_ == 'UnitLoadOptionCode':
            UnitLoadOptionCode_ = child_.text
            UnitLoadOptionCode_ = self.gds_validate_string(UnitLoadOptionCode_, node, 'UnitLoadOptionCode')
            self.UnitLoadOptionCode = UnitLoadOptionCode_
            # validate type UnitLoadOptionCodeType824
            self.validate_UnitLoadOptionCodeType824(self.UnitLoadOptionCode)
# end class PackagingType820


class ShipmentLineType825(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, OrderQty=None, OrderQtyUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, ItemStatusCode=None, ShipQty=None, ShipQtyUOM=None, ShipDate=None, QtyLeftToReceive=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, SellerDateCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.OrderQty = OrderQty
        self.OrderQtyUOM = OrderQtyUOM
        self.validate_OrderQtyUOMType828(self.OrderQtyUOM)
        self.PurchasePriceType = PurchasePriceType
        self.validate_PurchasePriceTypeType829(self.PurchasePriceType)
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.validate_PurchasePriceBasisType830(self.PurchasePriceBasis)
        self.ItemStatusCode = ItemStatusCode
        self.validate_ItemStatusCodeType831(self.ItemStatusCode)
        self.ShipQty = ShipQty
        self.ShipQtyUOM = ShipQtyUOM
        self.validate_ShipQtyUOMType832(self.ShipQtyUOM)
        self.ShipDate = ShipDate
        self.QtyLeftToReceive = QtyLeftToReceive
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.SellerDateCode = SellerDateCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentLineType825)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentLineType825.subclass:
            return ShipmentLineType825.subclass(*args_, **kwargs_)
        else:
            return ShipmentLineType825(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_OrderQty(self): return self.OrderQty
    def set_OrderQty(self, OrderQty): self.OrderQty = OrderQty
    def get_OrderQtyUOM(self): return self.OrderQtyUOM
    def set_OrderQtyUOM(self, OrderQtyUOM): self.OrderQtyUOM = OrderQtyUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_ItemStatusCode(self): return self.ItemStatusCode
    def set_ItemStatusCode(self, ItemStatusCode): self.ItemStatusCode = ItemStatusCode
    def get_ShipQty(self): return self.ShipQty
    def set_ShipQty(self, ShipQty): self.ShipQty = ShipQty
    def get_ShipQtyUOM(self): return self.ShipQtyUOM
    def set_ShipQtyUOM(self, ShipQtyUOM): self.ShipQtyUOM = ShipQtyUOM
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_QtyLeftToReceive(self): return self.QtyLeftToReceive
    def set_QtyLeftToReceive(self, QtyLeftToReceive): self.QtyLeftToReceive = QtyLeftToReceive
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_SellerDateCode(self): return self.SellerDateCode
    def set_SellerDateCode(self, SellerDateCode): self.SellerDateCode = SellerDateCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def validate_OrderQtyUOMType828(self, value):
        # Validate type OrderQtyUOMType828, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OrderQtyUOMType828' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceTypeType829(self, value):
        # Validate type PurchasePriceTypeType829, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceTypeType829' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceBasisType830(self, value):
        # Validate type PurchasePriceBasisType830, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceBasisType830' % {"value" : value.encode("utf-8")} )
    def validate_ItemStatusCodeType831(self, value):
        # Validate type ItemStatusCodeType831, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'AR', 'BP', 'DR', 'IA', 'IB', 'IC', 'ID', 'IF', 'IH', 'IP', 'IQ', 'IR', 'IS', 'R1', 'R2', 'R4', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemStatusCodeType831' % {"value" : value.encode("utf-8")} )
    def validate_ShipQtyUOMType832(self, value):
        # Validate type ShipQtyUOMType832, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipQtyUOMType832' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.OrderQty is not None or
            self.OrderQtyUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.ItemStatusCode is not None or
            self.ShipQty is not None or
            self.ShipQtyUOM is not None or
            self.ShipDate is not None or
            self.QtyLeftToReceive is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.SellerDateCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentLineType825', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentLineType825')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentLineType825', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentLineType825'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentLineType825', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.OrderQty is not None:
            self.OrderQty.export(outfile, level, namespace_, name_='OrderQty', pretty_print=pretty_print)
        if self.OrderQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderQtyUOM>%s</%sOrderQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OrderQtyUOM), input_name='OrderQtyUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.ItemStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemStatusCode>%s</%sItemStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemStatusCode), input_name='ItemStatusCode')), namespace_, eol_))
        if self.ShipQty is not None:
            self.ShipQty.export(outfile, level, namespace_, name_='ShipQty', pretty_print=pretty_print)
        if self.ShipQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipQtyUOM>%s</%sShipQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ShipQtyUOM), input_name='ShipQtyUOM')), namespace_, eol_))
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.QtyLeftToReceive is not None:
            self.QtyLeftToReceive.export(outfile, level, namespace_, name_='QtyLeftToReceive', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Class is not None:
            self.Class.export(outfile, level, namespace_, name_='Class', pretty_print=pretty_print)
        if self.SellerDateCode is not None:
            self.SellerDateCode.export(outfile, level, namespace_, name_='SellerDateCode', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType826.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'OrderQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQty = obj_
            obj_.original_tagname_ = 'OrderQty'
        elif nodeName_ == 'OrderQtyUOM':
            OrderQtyUOM_ = child_.text
            OrderQtyUOM_ = self.gds_validate_string(OrderQtyUOM_, node, 'OrderQtyUOM')
            self.OrderQtyUOM = OrderQtyUOM_
            # validate type OrderQtyUOMType828
            self.validate_OrderQtyUOMType828(self.OrderQtyUOM)
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
            # validate type PurchasePriceTypeType829
            self.validate_PurchasePriceTypeType829(self.PurchasePriceType)
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
            # validate type PurchasePriceBasisType830
            self.validate_PurchasePriceBasisType830(self.PurchasePriceBasis)
        elif nodeName_ == 'ItemStatusCode':
            ItemStatusCode_ = child_.text
            ItemStatusCode_ = self.gds_validate_string(ItemStatusCode_, node, 'ItemStatusCode')
            self.ItemStatusCode = ItemStatusCode_
            # validate type ItemStatusCodeType831
            self.validate_ItemStatusCodeType831(self.ItemStatusCode)
        elif nodeName_ == 'ShipQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQty = obj_
            obj_.original_tagname_ = 'ShipQty'
        elif nodeName_ == 'ShipQtyUOM':
            ShipQtyUOM_ = child_.text
            ShipQtyUOM_ = self.gds_validate_string(ShipQtyUOM_, node, 'ShipQtyUOM')
            self.ShipQtyUOM = ShipQtyUOM_
            # validate type ShipQtyUOMType832
            self.validate_ShipQtyUOMType832(self.ShipQtyUOM)
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'QtyLeftToReceive':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyLeftToReceive = obj_
            obj_.original_tagname_ = 'QtyLeftToReceive'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Class':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Class = obj_
            obj_.original_tagname_ = 'Class'
        elif nodeName_ == 'SellerDateCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellerDateCode = obj_
            obj_.original_tagname_ = 'SellerDateCode'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType833.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class ShipmentLineType825


class ProductIDType826(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.validate_PartNumberQualType827(self.PartNumberQual)
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType826)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType826.subclass:
            return ProductIDType826.subclass(*args_, **kwargs_)
        else:
            return ProductIDType826(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def validate_PartNumberQualType827(self, value):
        # Validate type PartNumberQualType827, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['B8', 'BO', 'CB', 'FU', 'IS', 'IT', 'IZ', 'MG', 'MN', 'N5', 'SK', 'SZ', 'VA', 'VC', 'VE', 'ZBP', 'ZVP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PartNumberQualType827' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType826', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType826')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType826', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType826'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType826', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
            # validate type PartNumberQualType827
            self.validate_PartNumberQualType827(self.PartNumberQual)
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType826


class NRFStandardColorAndSizeType833(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType833)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType833.subclass:
            return NRFStandardColorAndSizeType833.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType833(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType833', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType833')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType833', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType833'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType833', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType833


class PhysicalDetailsType834(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.validate_PackQualifierType835(self.PackQualifier)
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.validate_PackUOMType836(self.PackUOM)
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType837(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType838(self.PackingMaterial)
        self.WeightQualifier = WeightQualifier
        self.validate_WeightQualifierType839(self.WeightQualifier)
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.validate_PackWeightUOMType840(self.PackWeightUOM)
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.validate_PackVolumeUOMType841(self.PackVolumeUOM)
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.validate_PackDimensionUOMType842(self.PackDimensionUOM)
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType834)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType834.subclass:
            return PhysicalDetailsType834.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType834(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def validate_PackQualifierType835(self, value):
        # Validate type PackQualifierType835, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackQualifierType835' % {"value" : value.encode("utf-8")} )
    def validate_PackUOMType836(self, value):
        # Validate type PackUOMType836, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackUOMType836' % {"value" : value.encode("utf-8")} )
    def validate_PackingMediumType837(self, value):
        # Validate type PackingMediumType837, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType837' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType838(self, value):
        # Validate type PackingMaterialType838, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType838' % {"value" : value.encode("utf-8")} )
    def validate_WeightQualifierType839(self, value):
        # Validate type WeightQualifierType839, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['G', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightQualifierType839' % {"value" : value.encode("utf-8")} )
    def validate_PackWeightUOMType840(self, value):
        # Validate type PackWeightUOMType840, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackWeightUOMType840' % {"value" : value.encode("utf-8")} )
    def validate_PackVolumeUOMType841(self, value):
        # Validate type PackVolumeUOMType841, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackVolumeUOMType841' % {"value" : value.encode("utf-8")} )
    def validate_PackDimensionUOMType842(self, value):
        # Validate type PackDimensionUOMType842, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackDimensionUOMType842' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType834', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType834')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType834', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType834'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType834', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackQualifier>%s</%sPackQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackQualifier), input_name='PackQualifier')), namespace_, eol_))
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackUOM>%s</%sPackUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackUOM), input_name='PackUOM')), namespace_, eol_))
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeightUOM>%s</%sPackWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeightUOM), input_name='PackWeightUOM')), namespace_, eol_))
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolumeUOM>%s</%sPackVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolumeUOM), input_name='PackVolumeUOM')), namespace_, eol_))
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackDimensionUOM>%s</%sPackDimensionUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackDimensionUOM), input_name='PackDimensionUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            PackQualifier_ = child_.text
            PackQualifier_ = self.gds_validate_string(PackQualifier_, node, 'PackQualifier')
            self.PackQualifier = PackQualifier_
            # validate type PackQualifierType835
            self.validate_PackQualifierType835(self.PackQualifier)
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            PackUOM_ = child_.text
            PackUOM_ = self.gds_validate_string(PackUOM_, node, 'PackUOM')
            self.PackUOM = PackUOM_
            # validate type PackUOMType836
            self.validate_PackUOMType836(self.PackUOM)
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType837
            self.validate_PackingMediumType837(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType838
            self.validate_PackingMaterialType838(self.PackingMaterial)
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
            # validate type WeightQualifierType839
            self.validate_WeightQualifierType839(self.WeightQualifier)
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            PackWeightUOM_ = child_.text
            PackWeightUOM_ = self.gds_validate_string(PackWeightUOM_, node, 'PackWeightUOM')
            self.PackWeightUOM = PackWeightUOM_
            # validate type PackWeightUOMType840
            self.validate_PackWeightUOMType840(self.PackWeightUOM)
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            PackVolumeUOM_ = child_.text
            PackVolumeUOM_ = self.gds_validate_string(PackVolumeUOM_, node, 'PackVolumeUOM')
            self.PackVolumeUOM = PackVolumeUOM_
            # validate type PackVolumeUOMType841
            self.validate_PackVolumeUOMType841(self.PackVolumeUOM)
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            PackDimensionUOM_ = child_.text
            PackDimensionUOM_ = self.gds_validate_string(PackDimensionUOM_, node, 'PackDimensionUOM')
            self.PackDimensionUOM = PackDimensionUOM_
            # validate type PackDimensionUOMType842
            self.validate_PackDimensionUOMType842(self.PackDimensionUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType834


class CarrierSpecialHandlingDetailType843(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.validate_SpecialHandlingCodeType844(self.SpecialHandlingCode)
        self.HazardousMaterialCode = HazardousMaterialCode
        self.validate_HazardousMaterialCodeType845(self.HazardousMaterialCode)
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType846(self.YesOrNoResponse)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType843)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType843.subclass:
            return CarrierSpecialHandlingDetailType843.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType843(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def validate_SpecialHandlingCodeType844(self, value):
        # Validate type SpecialHandlingCodeType844, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AH', 'BKA', 'CO', 'DA', 'DNF', 'EL', 'EX', 'FL', 'FP', 'FR', 'HM', 'IC', 'KMD', 'MRF', 'NPR', 'NW', 'OPR', 'OSB', 'OTC', 'PFH', 'PG', 'PHR', 'RM', 'SUIP', 'UN', 'UNDF', 'VOC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SpecialHandlingCodeType844' % {"value" : value.encode("utf-8")} )
    def validate_HazardousMaterialCodeType845(self, value):
        # Validate type HazardousMaterialCodeType845, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['D', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on HazardousMaterialCodeType845' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType846(self, value):
        # Validate type YesOrNoResponseType846, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType846' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType843', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType843')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType843', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType843'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType843', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialHandlingCode>%s</%sSpecialHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SpecialHandlingCode), input_name='SpecialHandlingCode')), namespace_, eol_))
        if self.HazardousMaterialCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialCode>%s</%sHazardousMaterialCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialCode), input_name='HazardousMaterialCode')), namespace_, eol_))
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            SpecialHandlingCode_ = child_.text
            SpecialHandlingCode_ = self.gds_validate_string(SpecialHandlingCode_, node, 'SpecialHandlingCode')
            self.SpecialHandlingCode = SpecialHandlingCode_
            # validate type SpecialHandlingCodeType844
            self.validate_SpecialHandlingCodeType844(self.SpecialHandlingCode)
        elif nodeName_ == 'HazardousMaterialCode':
            HazardousMaterialCode_ = child_.text
            HazardousMaterialCode_ = self.gds_validate_string(HazardousMaterialCode_, node, 'HazardousMaterialCode')
            self.HazardousMaterialCode = HazardousMaterialCode_
            # validate type HazardousMaterialCodeType845
            self.validate_HazardousMaterialCodeType845(self.HazardousMaterialCode)
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType846
            self.validate_YesOrNoResponseType846(self.YesOrNoResponse)
# end class CarrierSpecialHandlingDetailType843


class CarrierInformationType847(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.validate_StatusCodeType848(self.StatusCode)
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.validate_CarrierTransMethodCodeType849(self.CarrierTransMethodCode)
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.validate_EquipmentDescriptionCodeType850(self.EquipmentDescriptionCode)
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.validate_SealStatusCodeType851(self.SealStatusCode)
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.validate_OwnershipCodeType852(self.OwnershipCode)
        self.RoutingSequenceCode = RoutingSequenceCode
        self.validate_RoutingSequenceCodeType853(self.RoutingSequenceCode)
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType854(self.TransitDirectionCode)
        self.TransitTimeQual = TransitTimeQual
        self.validate_TransitTimeQualType855(self.TransitTimeQual)
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType847)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType847.subclass:
            return CarrierInformationType847.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType847(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def validate_StatusCodeType848(self, value):
        # Validate type StatusCodeType848, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CL', 'PR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StatusCodeType848' % {"value" : value.encode("utf-8")} )
    def validate_CarrierTransMethodCodeType849(self, value):
        # Validate type CarrierTransMethodCodeType849, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['6', '7', 'A', 'AR', 'B', 'BP', 'BU', 'C', 'DW', 'E', 'F', 'GG', 'H', 'HH', 'I', 'K', 'L', 'LA', 'LD', 'LT', 'M', 'N', 'O', 'P', 'R', 'RC', 'SB', 'SD', 'SE', 'SF', 'SR', 'SS', 'ST', 'T', 'TA', 'TC', 'TT', 'VE', 'VL', 'W', 'WP', 'X']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierTransMethodCodeType849' % {"value" : value.encode("utf-8")} )
    def validate_EquipmentDescriptionCodeType850(self, value):
        # Validate type EquipmentDescriptionCodeType850, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['2B', '4B', '5B', 'AC', 'AF', 'BX', 'CN', 'CQ', 'CV', 'FT', 'HC', 'HV', 'RR', 'RT', 'TA', 'TL', 'TN', 'TV']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EquipmentDescriptionCodeType850' % {"value" : value.encode("utf-8")} )
    def validate_SealStatusCodeType851(self, value):
        # Validate type SealStatusCodeType851, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SealStatusCodeType851' % {"value" : value.encode("utf-8")} )
    def validate_OwnershipCodeType852(self, value):
        # Validate type OwnershipCodeType852, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['L', 'N', 'R', 'S', 'T']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OwnershipCodeType852' % {"value" : value.encode("utf-8")} )
    def validate_RoutingSequenceCodeType853(self, value):
        # Validate type RoutingSequenceCodeType853, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'BO', 'DP', 'DT', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RoutingSequenceCodeType853' % {"value" : value.encode("utf-8")} )
    def validate_TransitDirectionCodeType854(self, value):
        # Validate type TransitDirectionCodeType854, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BS', 'SB', 'SC', 'SD', 'SF', 'SS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitDirectionCodeType854' % {"value" : value.encode("utf-8")} )
    def validate_TransitTimeQualType855(self, value):
        # Validate type TransitTimeQualType855, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CD', 'HO', 'WD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TransitTimeQualType855' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType847', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType847')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType847', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType847'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType847', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
            # validate type StatusCodeType848
            self.validate_StatusCodeType848(self.StatusCode)
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
            # validate type CarrierTransMethodCodeType849
            self.validate_CarrierTransMethodCodeType849(self.CarrierTransMethodCode)
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
            # validate type EquipmentDescriptionCodeType850
            self.validate_EquipmentDescriptionCodeType850(self.EquipmentDescriptionCode)
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
            # validate type SealStatusCodeType851
            self.validate_SealStatusCodeType851(self.SealStatusCode)
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
            # validate type OwnershipCodeType852
            self.validate_OwnershipCodeType852(self.OwnershipCode)
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
            # validate type RoutingSequenceCodeType853
            self.validate_RoutingSequenceCodeType853(self.RoutingSequenceCode)
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
            # validate type TransitDirectionCodeType854
            self.validate_TransitDirectionCodeType854(self.TransitDirectionCode)
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
            # validate type TransitTimeQualType855
            self.validate_TransitTimeQualType855(self.TransitTimeQual)
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType856.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType858.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType847


class ServiceLevelCodesType856(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
        self.validate_ServiceLevelCodeType857(self.ServiceLevelCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType856)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType856.subclass:
            return ServiceLevelCodesType856.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType856(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def validate_ServiceLevelCodeType857(self, value):
        # Validate type ServiceLevelCodeType857, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3D', 'AM', 'CG', 'CX', 'DC', 'DS', 'ET', 'FC', 'G2', 'IE', 'IS', 'IX', 'ME', 'ND', 'NH', 'ON', 'PA', 'PB', 'PC', 'PI', 'PM', 'PO', 'PR', 'PS', 'PX', 'SA', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceLevelCodeType857' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType856', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType856')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType856', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType856'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType856', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
            # validate type ServiceLevelCodeType857
            self.validate_ServiceLevelCodeType857(self.ServiceLevelCode)
# end class ServiceLevelCodesType856


class AddressType858(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType859(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType860(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType858)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType858.subclass:
            return AddressType858.subclass(*args_, **kwargs_)
        else:
            return AddressType858(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType859(self, value):
        # Validate type AddressTypeCodeType859, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType859' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType860(self, value):
        # Validate type LocationCodeQualifierType860, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType860' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType858', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType858')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType858', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType858'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType858', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType859
            self.validate_AddressTypeCodeType859(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType860
            self.validate_LocationCodeQualifierType860(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType861.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType858


class DateType861(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type862(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType861)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType861.subclass:
            return DateType861.subclass(*args_, **kwargs_)
        else:
            return DateType861(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type862(self, value):
        # Validate type DateTimeQualifier1Type862, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type862' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType861', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType861')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType861', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType861'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType861', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type862
            self.validate_DateTimeQualifier1Type862(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType861


class MeasurementsType863(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.validate_MeasurementQualifierType864(self.MeasurementQualifier)
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.validate_CompositeUOMType865(self.CompositeUOM)
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.validate_MeasurementSignificanceCodeType866(self.MeasurementSignificanceCode)
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType863)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType863.subclass:
            return MeasurementsType863.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType863(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def validate_MeasurementQualifierType864(self, value):
        # Validate type MeasurementQualifierType864, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CRM', 'CVOL', 'CWHT', 'D9', 'DI', 'DIA', 'DP', 'HT', 'LN', 'PRS', 'PW', 'TC', 'THU', 'TT', 'VOL', 'WD', 'WT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementQualifierType864' % {"value" : value.encode("utf-8")} )
    def validate_CompositeUOMType865(self, value):
        # Validate type CompositeUOMType865, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CompositeUOMType865' % {"value" : value.encode("utf-8")} )
    def validate_MeasurementSignificanceCodeType866(self, value):
        # Validate type MeasurementSignificanceCodeType866, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementSignificanceCodeType866' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType863', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType863')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType863', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType863'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType863', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
            # validate type MeasurementQualifierType864
            self.validate_MeasurementQualifierType864(self.MeasurementQualifier)
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
            # validate type CompositeUOMType865
            self.validate_CompositeUOMType865(self.CompositeUOM)
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
            # validate type MeasurementSignificanceCodeType866
            self.validate_MeasurementSignificanceCodeType866(self.MeasurementSignificanceCode)
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType863


class PriceInformationType867(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.validate_ChangeReasonCodeType868(self.ChangeReasonCode)
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.validate_PriceTypeIDCodeType869(self.PriceTypeIDCode)
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.validate_UnitPriceBasisType870(self.UnitPriceBasis)
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.validate_PriceMultiplierQualType871(self.PriceMultiplierQual)
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.validate_QuantityUOMType872(self.QuantityUOM)
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.validate_ClassOfTradeCodeType873(self.ClassOfTradeCode)
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType867)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType867.subclass:
            return PriceInformationType867.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType867(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_ChangeReasonCodeType868(self, value):
        # Validate type ChangeReasonCodeType868, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AQ', 'EV', 'PS', 'QO', 'UP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ChangeReasonCodeType868' % {"value" : value.encode("utf-8")} )
    def validate_PriceTypeIDCodeType869(self, value):
        # Validate type PriceTypeIDCodeType869, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceTypeIDCodeType869' % {"value" : value.encode("utf-8")} )
    def validate_UnitPriceBasisType870(self, value):
        # Validate type UnitPriceBasisType870, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitPriceBasisType870' % {"value" : value.encode("utf-8")} )
    def validate_PriceMultiplierQualType871(self, value):
        # Validate type PriceMultiplierQualType871, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CSD', 'CSR', 'DIS', 'ILP', 'PSP', 'SEL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceMultiplierQualType871' % {"value" : value.encode("utf-8")} )
    def validate_QuantityUOMType872(self, value):
        # Validate type QuantityUOMType872, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QuantityUOMType872' % {"value" : value.encode("utf-8")} )
    def validate_ClassOfTradeCodeType873(self, value):
        # Validate type ClassOfTradeCodeType873, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RS', 'SA', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ClassOfTradeCodeType873' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType867', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType867')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType867', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType867'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType867', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
            # validate type ChangeReasonCodeType868
            self.validate_ChangeReasonCodeType868(self.ChangeReasonCode)
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
            # validate type PriceTypeIDCodeType869
            self.validate_PriceTypeIDCodeType869(self.PriceTypeIDCode)
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
            # validate type UnitPriceBasisType870
            self.validate_UnitPriceBasisType870(self.UnitPriceBasis)
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
            # validate type PriceMultiplierQualType871
            self.validate_PriceMultiplierQualType871(self.PriceMultiplierQual)
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
            # validate type QuantityUOMType872
            self.validate_QuantityUOMType872(self.QuantityUOM)
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
            # validate type ClassOfTradeCodeType873
            self.validate_ClassOfTradeCodeType873(self.ClassOfTradeCode)
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType867


class ProductOrItemDescriptionType874(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType875(self.ItemDescriptionType)
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType876(self.AgencyQualifierCode)
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType877(self.YesOrNoResponse)
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType874)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType874.subclass:
            return ProductOrItemDescriptionType874.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType874(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def validate_ItemDescriptionTypeType875(self, value):
        # Validate type ItemDescriptionTypeType875, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType875' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType876(self, value):
        # Validate type AgencyQualifierCodeType876, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType876' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType877(self, value):
        # Validate type YesOrNoResponseType877, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType877' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType874', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType874')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType874', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType874'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType874', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType875
            self.validate_ItemDescriptionTypeType875(self.ItemDescriptionType)
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType876
            self.validate_AgencyQualifierCodeType876(self.AgencyQualifierCode)
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType877
            self.validate_YesOrNoResponseType877(self.YesOrNoResponse)
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType874


class MasterItemAttributeType878(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        if ItemAttribute is None:
            self.ItemAttribute = []
        else:
            self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType878)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType878.subclass:
            return MasterItemAttributeType878.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType878(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def add_ItemAttribute(self, value): self.ItemAttribute.append(value)
    def insert_ItemAttribute_at(self, index, value): self.ItemAttribute.insert(index, value)
    def replace_ItemAttribute_at(self, index, value): self.ItemAttribute[index] = value
    def hasContent_(self):
        if (
            self.ItemAttribute
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType878', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType878')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType878', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType878'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType878', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemAttribute_ in self.ItemAttribute:
            ItemAttribute_.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType879.factory()
            obj_.build(child_)
            self.ItemAttribute.append(obj_)
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType878


class ItemAttributeType879(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.validate_ItemAttributeQualifierType880(self.ItemAttributeQualifier)
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.validate_ValueUOMType881(self.ValueUOM)
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType882(self.YesOrNoResponse)
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType879)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType879.subclass:
            return ItemAttributeType879.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType879(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def validate_ItemAttributeQualifierType880(self, value):
        # Validate type ItemAttributeQualifierType880, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ATH', 'BARC', 'BIND', 'BRN', 'CH', 'CI', 'COO', 'DESR', 'DF', 'DNC', 'DS', 'EDT', 'ESC', 'HE', 'ITS', 'LQD', 'MAK', 'MOD', 'MSD', 'MYE', 'PBL', 'REP', 'RI', 'RP', 'RTC', 'SET', 'SHL', 'SL', 'SN', 'SPC', 'SSZ', 'STG', 'SVC', 'SVD', 'SW', 'TEA', 'TIT', 'WAR', 'WOOD', 'WPF', 'WR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemAttributeQualifierType880' % {"value" : value.encode("utf-8")} )
    def validate_ValueUOMType881(self, value):
        # Validate type ValueUOMType881, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ValueUOMType881' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType882(self, value):
        # Validate type YesOrNoResponseType882, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType882' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType879', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType879')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType879', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType879'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType879', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemAttributeQualifier>%s</%sItemAttributeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemAttributeQualifier), input_name='ItemAttributeQualifier')), namespace_, eol_))
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
        if self.ValueUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueUOM>%s</%sValueUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ValueUOM), input_name='ValueUOM')), namespace_, eol_))
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            ItemAttributeQualifier_ = child_.text
            ItemAttributeQualifier_ = self.gds_validate_string(ItemAttributeQualifier_, node, 'ItemAttributeQualifier')
            self.ItemAttributeQualifier = ItemAttributeQualifier_
            # validate type ItemAttributeQualifierType880
            self.validate_ItemAttributeQualifierType880(self.ItemAttributeQualifier)
        elif nodeName_ == 'Value':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
        elif nodeName_ == 'ValueUOM':
            ValueUOM_ = child_.text
            ValueUOM_ = self.gds_validate_string(ValueUOM_, node, 'ValueUOM')
            self.ValueUOM = ValueUOM_
            # validate type ValueUOMType881
            self.validate_ValueUOMType881(self.ValueUOM)
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType882
            self.validate_YesOrNoResponseType882(self.YesOrNoResponse)
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType883.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType879


class MeasurementsType883(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.validate_MeasurementQualifierType884(self.MeasurementQualifier)
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.validate_CompositeUOMType885(self.CompositeUOM)
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.validate_MeasurementSignificanceCodeType886(self.MeasurementSignificanceCode)
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType883)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType883.subclass:
            return MeasurementsType883.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType883(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def validate_MeasurementQualifierType884(self, value):
        # Validate type MeasurementQualifierType884, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CRM', 'CVOL', 'CWHT', 'D9', 'DI', 'DIA', 'DP', 'HT', 'LN', 'PRS', 'PW', 'TC', 'THU', 'TT', 'VOL', 'WD', 'WT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementQualifierType884' % {"value" : value.encode("utf-8")} )
    def validate_CompositeUOMType885(self, value):
        # Validate type CompositeUOMType885, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CompositeUOMType885' % {"value" : value.encode("utf-8")} )
    def validate_MeasurementSignificanceCodeType886(self, value):
        # Validate type MeasurementSignificanceCodeType886, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IN', 'OU']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MeasurementSignificanceCodeType886' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType883', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType883')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType883', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType883'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType883', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
            # validate type MeasurementQualifierType884
            self.validate_MeasurementQualifierType884(self.MeasurementQualifier)
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
            # validate type CompositeUOMType885
            self.validate_CompositeUOMType885(self.CompositeUOM)
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
            # validate type MeasurementSignificanceCodeType886
            self.validate_MeasurementSignificanceCodeType886(self.MeasurementSignificanceCode)
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType883


class DateType887(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type888(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType887)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType887.subclass:
            return DateType887.subclass(*args_, **kwargs_)
        else:
            return DateType887(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type888(self, value):
        # Validate type DateTimeQualifier1Type888, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type888' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType887', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType887')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType887', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType887'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType887', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type888
            self.validate_DateTimeQualifier1Type888(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType887


class ReferenceType889(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType890(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType889)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType889.subclass:
            return ReferenceType889.subclass(*args_, **kwargs_)
        else:
            return ReferenceType889(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType890(self, value):
        # Validate type ReferenceQualType890, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType890' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType889', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType889')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType889', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType889'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType889', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType890
            self.validate_ReferenceQualType890(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType891.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType889


class ReferenceIDsType891(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType892(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType891)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType891.subclass:
            return ReferenceIDsType891.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType891(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType892(self, value):
        # Validate type ReferenceQualType892, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType892' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType891', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType891')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType891', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType891'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType891', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType892
            self.validate_ReferenceQualType892(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType891


class NotesType893(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType894(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType893)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType893.subclass:
            return NotesType893.subclass(*args_, **kwargs_)
        else:
            return NotesType893(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType894(self, value):
        # Validate type NoteCodeType894, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType894' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType893', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType893')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType893', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType893'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType893', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType894
            self.validate_NoteCodeType894(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType893


class CommodityType895(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType896(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType895)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType895.subclass:
            return CommodityType895.subclass(*args_, **kwargs_)
        else:
            return CommodityType895(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType896(self, value):
        # Validate type CommodityCodeQualifierType896, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType896' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType895', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType895')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType895', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType895'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType895', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType896
            self.validate_CommodityCodeQualifierType896(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType895


class AddressType897(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.validate_AddressTypeCodeType898(self.AddressTypeCode)
        self.LocationCodeQualifier = LocationCodeQualifier
        self.validate_LocationCodeQualifierType899(self.LocationCodeQualifier)
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType897)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType897.subclass:
            return AddressType897.subclass(*args_, **kwargs_)
        else:
            return AddressType897(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def validate_AddressTypeCodeType898(self, value):
        # Validate type AddressTypeCodeType898, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['9C', 'AG', 'BE', 'BK', 'BO', 'BT', 'CB', 'CN', 'CS', 'CT', 'DA', 'DE', 'DS', 'DV', 'FR', 'FW', 'MF', 'NES', 'OB', 'PF', 'PLCO', 'POAR', 'PODI', 'POEN', 'POOR', 'RI', 'RL', 'RT', 'SF', 'SO', 'ST', 'TO', 'TP', 'TS', 'VN', 'WH', 'Z7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AddressTypeCodeType898' % {"value" : value.encode("utf-8")} )
    def validate_LocationCodeQualifierType899(self, value):
        # Validate type LocationCodeQualifierType899, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '11', '15', '21', '6', '9', '91', '92', 'TPL', 'UL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationCodeQualifierType899' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType897', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType897')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType897', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType897'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType897', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
            # validate type AddressTypeCodeType898
            self.validate_AddressTypeCodeType898(self.AddressTypeCode)
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
            # validate type LocationCodeQualifierType899
            self.validate_LocationCodeQualifierType899(self.LocationCodeQualifier)
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType900.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType904.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType908.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType897


class ReferenceType900(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType901(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType900)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType900.subclass:
            return ReferenceType900.subclass(*args_, **kwargs_)
        else:
            return ReferenceType900(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType901(self, value):
        # Validate type ReferenceQualType901, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType901' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType900', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType900')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType900', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType900'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType900', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType901
            self.validate_ReferenceQualType901(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType902.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType900


class ReferenceIDsType902(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType903(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType902)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType902.subclass:
            return ReferenceIDsType902.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType902(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType903(self, value):
        # Validate type ReferenceQualType903, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType903' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType902', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType902')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType902', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType902'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType902', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType903
            self.validate_ReferenceQualType903(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType902


class ContactType904(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.validate_ContactTypeCodeType905(self.ContactTypeCode)
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType904)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType904.subclass:
            return ContactType904.subclass(*args_, **kwargs_)
        else:
            return ContactType904(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def validate_ContactTypeCodeType905(self, value):
        # Validate type ContactTypeCodeType905, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AL', 'BD', 'BI', 'CH', 'CR', 'IC', 'OC', 'RE', 'SR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactTypeCodeType905' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType904', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType904')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType904', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType904'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType904', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
            # validate type ContactTypeCodeType905
            self.validate_ContactTypeCodeType905(self.ContactTypeCode)
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType906.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType904


class AdditionalContactDetailsType906(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.validate_ContactQualType907(self.ContactQual)
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType906)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType906.subclass:
            return AdditionalContactDetailsType906.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType906(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def validate_ContactQualType907(self, value):
        # Validate type ContactQualType907, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CP', 'HP', 'NP', 'WP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ContactQualType907' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType906', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType906')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType906', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType906'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType906', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
            # validate type ContactQualType907
            self.validate_ContactQualType907(self.ContactQual)
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType906


class DateType908(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.validate_DateTimeQualifier1Type909(self.DateTimeQualifier1)
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType908)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType908.subclass:
            return DateType908.subclass(*args_, **kwargs_)
        else:
            return DateType908(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def validate_DateTimeQualifier1Type909(self, value):
        # Validate type DateTimeQualifier1Type909, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '006', '007', '010', '011', '012', '013', '015', '016', '017', '018', '019', '020', '035', '036', '037', '038', '043', '050', '057', '060', '063', '064', '067', '068', '069', '071', '074', '077', '079', '086', '097', '118', '145', '146', '168', '171', '191', '196', '197', '201', '220', '291', '328', '370', '372', '405', '511', '598', '619', '807', '809', '815', '945', '995', 'AA1', 'AA2', 'AAH', 'AAL', 'BBD', 'CSD', 'DND', 'EDC', 'FCS', 'ORS', 'SOL', 'TPD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DateTimeQualifier1Type909' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType908', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType908')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType908', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType908'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType908', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
            # validate type DateTimeQualifier1Type909
            self.validate_DateTimeQualifier1Type909(self.DateTimeQualifier1)
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType908


class SublinesType910(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Subline=None):
        self.original_tagname_ = None
        if Subline is None:
            self.Subline = []
        else:
            self.Subline = Subline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublinesType910)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublinesType910.subclass:
            return SublinesType910.subclass(*args_, **kwargs_)
        else:
            return SublinesType910(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def add_Subline(self, value): self.Subline.append(value)
    def insert_Subline_at(self, index, value): self.Subline.insert(index, value)
    def replace_Subline_at(self, index, value): self.Subline[index] = value
    def hasContent_(self):
        if (
            self.Subline
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublinesType910', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublinesType910')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublinesType910', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublinesType910'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublinesType910', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Subline_ in self.Subline:
            Subline_.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Subline':
            obj_ = SublineType911.factory()
            obj_.build(child_)
            self.Subline.append(obj_)
            obj_.original_tagname_ = 'Subline'
# end class SublinesType910


class SublineType911(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, PriceInformation=None, ProductOrItemDescription=None, Commodity=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType911)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType911.subclass:
            return SublineType911.subclass(*args_, **kwargs_)
        else:
            return SublineType911(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.Commodity
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType911', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType911')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType911', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType911'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType911', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType912.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType919.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType926.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType930.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
# end class SublineType911


class SublineItemDetailType912(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.validate_QtyPerUOMType915(self.QtyPerUOM)
        self.PurchasePriceType = PurchasePriceType
        self.validate_PurchasePriceTypeType916(self.PurchasePriceType)
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.validate_PurchasePriceBasisType917(self.PurchasePriceBasis)
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType912)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType912.subclass:
            return SublineItemDetailType912.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType912(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def validate_QtyPerUOMType915(self, value):
        # Validate type QtyPerUOMType915, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QtyPerUOMType915' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceTypeType916(self, value):
        # Validate type PurchasePriceTypeType916, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceTypeType916' % {"value" : value.encode("utf-8")} )
    def validate_PurchasePriceBasisType917(self, value):
        # Validate type PurchasePriceBasisType917, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PurchasePriceBasisType917' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType912', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType912')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType912', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType912'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType912', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.QtyPer is not None:
            self.QtyPer.export(outfile, level, namespace_, name_='QtyPer', pretty_print=pretty_print)
        if self.QtyPerUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQtyPerUOM>%s</%sQtyPerUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QtyPerUOM), input_name='QtyPerUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType913.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'QtyPer':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPer = obj_
            obj_.original_tagname_ = 'QtyPer'
        elif nodeName_ == 'QtyPerUOM':
            QtyPerUOM_ = child_.text
            QtyPerUOM_ = self.gds_validate_string(QtyPerUOM_, node, 'QtyPerUOM')
            self.QtyPerUOM = QtyPerUOM_
            # validate type QtyPerUOMType915
            self.validate_QtyPerUOMType915(self.QtyPerUOM)
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
            # validate type PurchasePriceTypeType916
            self.validate_PurchasePriceTypeType916(self.PurchasePriceType)
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
            # validate type PurchasePriceBasisType917
            self.validate_PurchasePriceBasisType917(self.PurchasePriceBasis)
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType918.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType912


class ProductIDType913(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.validate_PartNumberQualType914(self.PartNumberQual)
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType913)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType913.subclass:
            return ProductIDType913.subclass(*args_, **kwargs_)
        else:
            return ProductIDType913(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def validate_PartNumberQualType914(self, value):
        # Validate type PartNumberQualType914, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['B8', 'BO', 'CB', 'FU', 'IS', 'IT', 'IZ', 'MG', 'MN', 'N5', 'SK', 'SZ', 'VA', 'VC', 'VE', 'ZBP', 'ZVP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PartNumberQualType914' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType913', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType913')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType913', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType913'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType913', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
            # validate type PartNumberQualType914
            self.validate_PartNumberQualType914(self.PartNumberQual)
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType913


class NRFStandardColorAndSizeType918(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType918)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType918.subclass:
            return NRFStandardColorAndSizeType918.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType918(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType918', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType918')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType918', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType918'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType918', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType918


class PriceInformationType919(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.validate_ChangeReasonCodeType920(self.ChangeReasonCode)
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.validate_PriceTypeIDCodeType921(self.PriceTypeIDCode)
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.validate_UnitPriceBasisType922(self.UnitPriceBasis)
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.validate_PriceMultiplierQualType923(self.PriceMultiplierQual)
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.validate_QuantityUOMType924(self.QuantityUOM)
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.validate_ClassOfTradeCodeType925(self.ClassOfTradeCode)
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType919)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType919.subclass:
            return PriceInformationType919.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType919(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_ChangeReasonCodeType920(self, value):
        # Validate type ChangeReasonCodeType920, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AQ', 'EV', 'PS', 'QO', 'UP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ChangeReasonCodeType920' % {"value" : value.encode("utf-8")} )
    def validate_PriceTypeIDCodeType921(self, value):
        # Validate type PriceTypeIDCodeType921, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AAA', 'AAB', 'BLP', 'CAT', 'CON', 'DIS', 'ELC', 'EST', 'FCP', 'MSR', 'PRP', 'QTE', 'RPC', 'RTL', 'TIP', 'UCP', 'VPC', 'WHL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceTypeIDCodeType921' % {"value" : value.encode("utf-8")} )
    def validate_UnitPriceBasisType922(self, value):
        # Validate type UnitPriceBasisType922, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HP', 'HT', 'HTH', 'PD', 'PE', 'PF', 'PG', 'PK', 'PN', 'PO', 'PP', 'TT', 'UM']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UnitPriceBasisType922' % {"value" : value.encode("utf-8")} )
    def validate_PriceMultiplierQualType923(self, value):
        # Validate type PriceMultiplierQualType923, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CSD', 'CSR', 'DIS', 'ILP', 'PSP', 'SEL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriceMultiplierQualType923' % {"value" : value.encode("utf-8")} )
    def validate_QuantityUOMType924(self, value):
        # Validate type QuantityUOMType924, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on QuantityUOMType924' % {"value" : value.encode("utf-8")} )
    def validate_ClassOfTradeCodeType925(self, value):
        # Validate type ClassOfTradeCodeType925, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RS', 'SA', 'WH']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ClassOfTradeCodeType925' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType919', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType919')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType919', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType919'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType919', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
            # validate type ChangeReasonCodeType920
            self.validate_ChangeReasonCodeType920(self.ChangeReasonCode)
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
            # validate type PriceTypeIDCodeType921
            self.validate_PriceTypeIDCodeType921(self.PriceTypeIDCode)
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
            # validate type UnitPriceBasisType922
            self.validate_UnitPriceBasisType922(self.UnitPriceBasis)
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
            # validate type PriceMultiplierQualType923
            self.validate_PriceMultiplierQualType923(self.PriceMultiplierQual)
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
            # validate type QuantityUOMType924
            self.validate_QuantityUOMType924(self.QuantityUOM)
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
            # validate type ClassOfTradeCodeType925
            self.validate_ClassOfTradeCodeType925(self.ClassOfTradeCode)
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType919


class ProductOrItemDescriptionType926(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.validate_ItemDescriptionTypeType927(self.ItemDescriptionType)
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.validate_AgencyQualifierCodeType928(self.AgencyQualifierCode)
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.validate_YesOrNoResponseType929(self.YesOrNoResponse)
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType926)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType926.subclass:
            return ProductOrItemDescriptionType926.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType926(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def validate_ItemDescriptionTypeType927(self, value):
        # Validate type ItemDescriptionTypeType927, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['08', '38', '39', '40', '73', '74', '76', '92', 'AE', 'RE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ItemDescriptionTypeType927' % {"value" : value.encode("utf-8")} )
    def validate_AgencyQualifierCodeType928(self, value):
        # Validate type AgencyQualifierCodeType928, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AgencyQualifierCodeType928' % {"value" : value.encode("utf-8")} )
    def validate_YesOrNoResponseType929(self, value):
        # Validate type YesOrNoResponseType929, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'Y']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesOrNoResponseType929' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType926', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType926')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType926', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType926'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType926', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
            # validate type ItemDescriptionTypeType927
            self.validate_ItemDescriptionTypeType927(self.ItemDescriptionType)
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
            # validate type AgencyQualifierCodeType928
            self.validate_AgencyQualifierCodeType928(self.AgencyQualifierCode)
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
            # validate type YesOrNoResponseType929
            self.validate_YesOrNoResponseType929(self.YesOrNoResponse)
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType926


class CommodityType930(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.validate_CommodityCodeQualifierType931(self.CommodityCodeQualifier)
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType930)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType930.subclass:
            return CommodityType930.subclass(*args_, **kwargs_)
        else:
            return CommodityType930(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def validate_CommodityCodeQualifierType931(self, value):
        # Validate type CommodityCodeQualifierType931, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'I', 'J', 'N', 'Q', 'S', 'T', 'U', 'V']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityCodeQualifierType931' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType930', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType930')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType930', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType930'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType930', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
            # validate type CommodityCodeQualifierType931
            self.validate_CommodityCodeQualifierType931(self.CommodityCodeQualifier)
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType930


class TaxType932(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType933(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType934(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType935(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType936(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType937(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType938(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType932)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType932.subclass:
            return TaxType932.subclass(*args_, **kwargs_)
        else:
            return TaxType932(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType933(self, value):
        # Validate type TaxTypeCodeType933, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType933' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType934(self, value):
        # Validate type TaxPercentQualType934, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType934' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType935(self, value):
        # Validate type JurisdictionQualType935, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType935' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType936(self, value):
        # Validate type TaxExemptCodeType936, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType936' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType937(self, value):
        # Validate type RelationshipCodeType937, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType937' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType938(self, value):
        # Validate type TaxHandlingCodeType938, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType938' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType932', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType932')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType932', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType932'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType932', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType933
            self.validate_TaxTypeCodeType933(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType934
            self.validate_TaxPercentQualType934(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType935
            self.validate_JurisdictionQualType935(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType936
            self.validate_TaxExemptCodeType936(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType937
            self.validate_RelationshipCodeType937(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType938
            self.validate_TaxHandlingCodeType938(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType932


class ChargesAllowancesType939(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.validate_AllowChrgIndicatorType940(self.AllowChrgIndicator)
        self.AllowChrgCode = AllowChrgCode
        self.validate_AllowChrgCodeType941(self.AllowChrgCode)
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.validate_AllowChrgAgencyCodeType942(self.AllowChrgAgencyCode)
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.validate_AllowChrgPercentQualType943(self.AllowChrgPercentQual)
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.validate_AllowChrgQtyUOMType944(self.AllowChrgQtyUOM)
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.validate_AllowChrgHandlingCodeType945(self.AllowChrgHandlingCode)
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType939)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType939.subclass:
            return ChargesAllowancesType939.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType939(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def validate_AllowChrgIndicatorType940(self, value):
        # Validate type AllowChrgIndicatorType940, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'C', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgIndicatorType940' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgCodeType941(self, value):
        # Validate type AllowChrgCodeType941, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A010', 'A170', 'A260', 'A320', 'A470', 'A480', 'A485', 'A650', 'A720', 'A721', 'B000', 'B090', 'B190', 'B270', 'B310', 'B320', 'B560', 'B570', 'B660', 'B720', 'B750', 'B770', 'B800', 'B870', 'B940', 'B950', 'C000', 'C030', 'C040', 'C080', 'C110', 'C190', 'C300', 'C310', 'C320', 'C350', 'C490', 'C510', 'C530', 'C540', 'C550', 'C560', 'C660', 'C680', 'C850', 'C940', 'CA00', 'COUR', 'D170', 'D230', 'D240', 'D250', 'D260', 'D270', 'D340', 'D500', 'D530', 'D540', 'D550', 'D870', 'D920', 'D940', 'D980', 'E170', 'E210', 'E350', 'E380', 'E720', 'E730', 'E740', 'E770', 'F110', 'F170', 'F180', 'F190', 'F280', 'F330', 'F340', 'F460', 'F580', 'F670', 'F730', 'F760', 'F800', 'F970', 'G170', 'G290', 'G360', 'G400', 'G450', 'G470', 'G530', 'G580', 'G590', 'G660', 'G740', 'G821', 'G830', 'G860', 'G870', 'G890', 'GWRP', 'H060', 'H070', 'H090', 'H110', 'H400', 'H420', 'H540', 'H550', 'H560', 'H806', 'H920', 'I060', 'I110', 'I131', 'I160', 'I170', 'I310', 'I410', 'I530', 'I570', 'I590', 'IDCT', 'PERN', 'RUOR', 'SUIP', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgCodeType941' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgAgencyCodeType942(self, value):
        # Validate type AllowChrgAgencyCodeType942, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['13', 'AX', 'FA', 'FC', 'ST', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgAgencyCodeType942' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgPercentQualType943(self, value):
        # Validate type AllowChrgPercentQualType943, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgPercentQualType943' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgQtyUOMType944(self, value):
        # Validate type AllowChrgQtyUOMType944, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgQtyUOMType944' % {"value" : value.encode("utf-8")} )
    def validate_AllowChrgHandlingCodeType945(self, value):
        # Validate type AllowChrgHandlingCodeType945, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AllowChrgHandlingCodeType945' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType939', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType939')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType939', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType939'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType939', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
            # validate type AllowChrgIndicatorType940
            self.validate_AllowChrgIndicatorType940(self.AllowChrgIndicator)
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
            # validate type AllowChrgCodeType941
            self.validate_AllowChrgCodeType941(self.AllowChrgCode)
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
            # validate type AllowChrgAgencyCodeType942
            self.validate_AllowChrgAgencyCodeType942(self.AllowChrgAgencyCode)
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
            # validate type AllowChrgPercentQualType943
            self.validate_AllowChrgPercentQualType943(self.AllowChrgPercentQual)
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
            # validate type AllowChrgQtyUOMType944
            self.validate_AllowChrgQtyUOMType944(self.AllowChrgQtyUOM)
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
            # validate type AllowChrgHandlingCodeType945
            self.validate_AllowChrgHandlingCodeType945(self.AllowChrgHandlingCode)
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType946.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType939


class TaxType946(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.validate_TaxTypeCodeType947(self.TaxTypeCode)
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.validate_TaxPercentQualType948(self.TaxPercentQual)
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.validate_JurisdictionQualType949(self.JurisdictionQual)
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.validate_TaxExemptCodeType950(self.TaxExemptCode)
        self.RelationshipCode = RelationshipCode
        self.validate_RelationshipCodeType951(self.RelationshipCode)
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.validate_TaxHandlingCodeType952(self.TaxHandlingCode)
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType946)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType946.subclass:
            return TaxType946.subclass(*args_, **kwargs_)
        else:
            return TaxType946(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TaxTypeCodeType947(self, value):
        # Validate type TaxTypeCodeType947, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'AF', 'ALDU', 'AVT', 'AX', 'BB', 'BE', 'CA', 'CE', 'CG', 'CP', 'CS', 'CV', 'EV', 'FD', 'FT', 'GR', 'GS', 'H', 'H215', 'H535', 'H625', 'H640', 'H650', 'H670', 'H720', 'H760', 'H780', 'HZ', 'I431', 'L', 'LO', 'LS', 'LT', 'PG', 'PS', 'QST', 'S', 'SBSD', 'SE', 'SL', 'SP', 'SQ', 'ST', 'SU', 'SUIP', 'TX', 'UNDF', 'VA', 'Z']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxTypeCodeType947' % {"value" : value.encode("utf-8")} )
    def validate_TaxPercentQualType948(self, value):
        # Validate type TaxPercentQualType948, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxPercentQualType948' % {"value" : value.encode("utf-8")} )
    def validate_JurisdictionQualType949(self, value):
        # Validate type JurisdictionQualType949, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CC', 'MB', 'SP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on JurisdictionQualType949' % {"value" : value.encode("utf-8")} )
    def validate_TaxExemptCodeType950(self, value):
        # Validate type TaxExemptCodeType950, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxExemptCodeType950' % {"value" : value.encode("utf-8")} )
    def validate_RelationshipCodeType951(self, value):
        # Validate type RelationshipCodeType951, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'O']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RelationshipCodeType951' % {"value" : value.encode("utf-8")} )
    def validate_TaxHandlingCodeType952(self, value):
        # Validate type TaxHandlingCodeType952, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '13', '15']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TaxHandlingCodeType952' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType946', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType946')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType946', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType946'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType946', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
            # validate type TaxTypeCodeType947
            self.validate_TaxTypeCodeType947(self.TaxTypeCode)
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
            # validate type TaxPercentQualType948
            self.validate_TaxPercentQualType948(self.TaxPercentQual)
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
            # validate type JurisdictionQualType949
            self.validate_JurisdictionQualType949(self.JurisdictionQual)
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
            # validate type TaxExemptCodeType950
            self.validate_TaxExemptCodeType950(self.TaxExemptCode)
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
            # validate type RelationshipCodeType951
            self.validate_RelationshipCodeType951(self.RelationshipCode)
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
            # validate type TaxHandlingCodeType952
            self.validate_TaxHandlingCodeType952(self.TaxHandlingCode)
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType946


class ItemLoadInfoType953(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemLoad=None, Reference=None, Notes=None):
        self.original_tagname_ = None
        self.ItemLoad = ItemLoad
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadInfoType953)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadInfoType953.subclass:
            return ItemLoadInfoType953.subclass(*args_, **kwargs_)
        else:
            return ItemLoadInfoType953(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemLoad(self): return self.ItemLoad
    def set_ItemLoad(self, ItemLoad): self.ItemLoad = ItemLoad
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def hasContent_(self):
        if (
            self.ItemLoad is not None or
            self.Reference or
            self.Notes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadInfoType953', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadInfoType953')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadInfoType953', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadInfoType953'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadInfoType953', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemLoad is not None:
            self.ItemLoad.export(outfile, level, namespace_, name_='ItemLoad', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemLoad':
            obj_ = ItemLoadType954.factory()
            obj_.build(child_)
            self.ItemLoad = obj_
            obj_.original_tagname_ = 'ItemLoad'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType958.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType962.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
# end class ItemLoadInfoType953


class ItemLoadType954(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfLoads=None, UnitsShipped=None, PackingMedium=None, PackingMaterial=None, LoadSize=None, LoadSizeUOM=None):
        self.original_tagname_ = None
        self.NumberOfLoads = NumberOfLoads
        self.UnitsShipped = UnitsShipped
        self.PackingMedium = PackingMedium
        self.validate_PackingMediumType955(self.PackingMedium)
        self.PackingMaterial = PackingMaterial
        self.validate_PackingMaterialType956(self.PackingMaterial)
        self.LoadSize = LoadSize
        self.LoadSizeUOM = LoadSizeUOM
        self.validate_LoadSizeUOMType957(self.LoadSizeUOM)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadType954)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadType954.subclass:
            return ItemLoadType954.subclass(*args_, **kwargs_)
        else:
            return ItemLoadType954(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfLoads(self): return self.NumberOfLoads
    def set_NumberOfLoads(self, NumberOfLoads): self.NumberOfLoads = NumberOfLoads
    def get_UnitsShipped(self): return self.UnitsShipped
    def set_UnitsShipped(self, UnitsShipped): self.UnitsShipped = UnitsShipped
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LoadSize(self): return self.LoadSize
    def set_LoadSize(self, LoadSize): self.LoadSize = LoadSize
    def get_LoadSizeUOM(self): return self.LoadSizeUOM
    def set_LoadSizeUOM(self, LoadSizeUOM): self.LoadSizeUOM = LoadSizeUOM
    def validate_PackingMediumType955(self, value):
        # Validate type PackingMediumType955, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BAL', 'BBL', 'BDL', 'BLK', 'BOT', 'BOX', 'BXI', 'CAN', 'CAS', 'COL', 'CRT', 'CTN', 'DRM', 'HRB', 'JAR', 'KEG', 'KIT', 'LIF', 'LNR', 'LSE', 'PAL', 'PCK', 'PCS', 'PLT', 'REL', 'ROL', 'SKD', 'SLP', 'SPL', 'SRW', 'TBE', 'TNK', 'TRY', 'WRP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMediumType955' % {"value" : value.encode("utf-8")} )
    def validate_PackingMaterialType956(self, value):
        # Validate type PackingMaterialType956, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '05', '25', '31', '43', '58', '67', '72', '76', '79', '90', '91', '94', 'UNDF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackingMaterialType956' % {"value" : value.encode("utf-8")} )
    def validate_LoadSizeUOMType957(self, value):
        # Validate type LoadSizeUOMType957, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '03', '12', '15', '1N', '26', '2P', '2W', '31', '3T', '4E', '4F', '4G', '50', '5I', '68', '8C', 'AA', 'AD', 'AF', 'AS', 'AV', 'AY', 'BA', 'BB', 'BC', 'BD', 'BF', 'BG', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BR', 'BT', 'BTU', 'BU', 'BX', 'C3', 'C4', 'C8', 'CA', 'CA1', 'CA2', 'CB', 'CC', 'CD', 'CE', 'CF', 'CFM', 'CG', 'CH', 'CI', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CW', 'CX', 'CY', 'DA', 'DD', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DO', 'DP', 'DR', 'DS', 'DW', 'DZ', 'EA', 'EP', 'EV', 'FA', 'FO', 'FT', 'GA', 'GB', 'GH', 'GHZ', 'GL', 'GR', 'GS', 'H1', 'H3', 'HA', 'HC', 'HD', 'HF', 'HK', 'HL', 'HR', 'HS', 'HU', 'HY', 'HZ', 'I', 'IN', 'JA', 'JR', 'JU', 'K6', 'KC', 'KE', 'KG', 'KT', 'LB', 'LF', 'LG', 'LK', 'LM', 'LN', 'LO', 'LR', 'LT', 'LY', 'MB', 'MC', 'ME', 'MHZ', 'ML', 'MM', 'MO', 'MP', 'MR', 'NG', 'NS', 'NX', 'OP', 'OZ', 'P', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'PA', 'PC', 'PD', 'PF', 'PH', 'PK', 'PL', 'PO', 'PP', 'PR', 'PSI', 'PT', 'PV', 'PXL', 'PY', 'Q4', 'Q5', 'Q6', 'Q7', 'QS', 'QT', 'RA', 'RE', 'RL', 'RM', 'SF', 'SH', 'SI', 'SJ', 'SL', 'SM', 'SO', 'SP', 'SQ', 'ST', 'SV', 'SY', 'TB', 'TC', 'TE', 'TH', 'TI', 'TK', 'TL', 'TM', 'TO', 'TP', 'TR', 'TS', 'TY', 'U2', 'U5', 'UN', 'UZ', 'VC', 'VI', 'VO', 'WA', 'WD', 'WR', 'X8', 'Y4', 'YD', 'YR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LoadSizeUOMType957' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NumberOfLoads is not None or
            self.UnitsShipped is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LoadSize is not None or
            self.LoadSizeUOM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadType954', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadType954')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadType954', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadType954'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadType954', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfLoads is not None:
            self.NumberOfLoads.export(outfile, level, namespace_, name_='NumberOfLoads', pretty_print=pretty_print)
        if self.UnitsShipped is not None:
            self.UnitsShipped.export(outfile, level, namespace_, name_='UnitsShipped', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.LoadSize is not None:
            self.LoadSize.export(outfile, level, namespace_, name_='LoadSize', pretty_print=pretty_print)
        if self.LoadSizeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLoadSizeUOM>%s</%sLoadSizeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LoadSizeUOM), input_name='LoadSizeUOM')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfLoads':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NumberOfLoads = obj_
            obj_.original_tagname_ = 'NumberOfLoads'
        elif nodeName_ == 'UnitsShipped':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitsShipped = obj_
            obj_.original_tagname_ = 'UnitsShipped'
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
            # validate type PackingMediumType955
            self.validate_PackingMediumType955(self.PackingMedium)
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
            # validate type PackingMaterialType956
            self.validate_PackingMaterialType956(self.PackingMaterial)
        elif nodeName_ == 'LoadSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSize = obj_
            obj_.original_tagname_ = 'LoadSize'
        elif nodeName_ == 'LoadSizeUOM':
            LoadSizeUOM_ = child_.text
            LoadSizeUOM_ = self.gds_validate_string(LoadSizeUOM_, node, 'LoadSizeUOM')
            self.LoadSizeUOM = LoadSizeUOM_
            # validate type LoadSizeUOMType957
            self.validate_LoadSizeUOMType957(self.LoadSizeUOM)
# end class ItemLoadType954


class ReferenceType958(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType959(self.ReferenceQual)
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType958)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType958.subclass:
            return ReferenceType958.subclass(*args_, **kwargs_)
        else:
            return ReferenceType958(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def validate_ReferenceQualType959(self, value):
        # Validate type ReferenceQualType959, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType959' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType958', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType958')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType958', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType958'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType958', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType959
            self.validate_ReferenceQualType959(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType960.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType958


class ReferenceIDsType960(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.validate_ReferenceQualType961(self.ReferenceQual)
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType960)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType960.subclass:
            return ReferenceIDsType960.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType960(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def validate_ReferenceQualType961(self, value):
        # Validate type ReferenceQualType961, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['06', '12', '19', '2I', '2P', 'AAK', 'AGL', 'AH', 'AI', 'AN', 'AO', 'AUED', 'AWB', 'AY', 'BAF', 'BB', 'BL', 'BM', 'BT', 'BY', 'CA', 'CB', 'CI', 'CN', 'CRM', 'CT', 'CUDN', 'DJ', 'DK', 'DNN', 'DO', 'DRRN', 'EF', 'ENGC', 'FR', 'FW', 'GD', 'GK', 'GRN', 'GS', 'GT', 'HC', 'IS', 'IT', 'IV', 'JD', 'KW', 'L1', 'LT', 'LV', 'MB', 'MC', 'MK', 'MR', 'MS', 'OB', 'OC', 'OD', 'PHC', 'PJ', 'PK', 'PL', 'PPGP', 'PS', 'PU', 'Q1', 'QC', 'RU', 'SDR', 'SDV', 'SE', 'SI', 'SL', 'SLI', 'TAN', 'TC', 'TJ', 'TN', 'TPF', 'TPP', 'URL', 'USED', 'V3', 'V6', 'VF', 'VN', 'VV', 'VWD', 'VY', 'WH', 'WLT', 'WS', 'WU', 'XF', 'YD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReferenceQualType961' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType960', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType960')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType960', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType960'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType960', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
            # validate type ReferenceQualType961
            self.validate_ReferenceQualType961(self.ReferenceQual)
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType960


class NotesType962(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.validate_NoteCodeType963(self.NoteCode)
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType962)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType962.subclass:
            return NotesType962.subclass(*args_, **kwargs_)
        else:
            return NotesType962(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def validate_NoteCodeType963(self, value):
        # Validate type NoteCodeType963, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CAFA0', 'CAFA1', 'CAFA2', 'CAFA3', 'CAFA4', 'CCG', 'CE', 'CPSC', 'CPSFA', 'CPSIA', 'CSA', 'DOLFL', 'DSCSA', 'EPAES', 'EUEHS', 'FTCFP', 'FTCTF', 'FTCWA', 'FTR', 'GEN', 'GFT', 'HECC', 'MKG', 'MSDSR', 'NAFTA', 'NOCSAE', 'OGC', 'PCK', 'PRN', 'RTN', 'SHP', 'SPE', 'STAEV', 'VOORC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NoteCodeType963' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType962', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType962')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType962', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType962'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType962', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
            # validate type NoteCodeType963
            self.validate_NoteCodeType963(self.NoteCode)
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType962


GDSClassesMapping = {
    'AdditionalContactDetails': AdditionalContactDetailsType906,
    'Address': AddressType858,
    'Address1': attributes_string,
    'Address2': attributes_string,
    'Address3': attributes_string,
    'Address4': attributes_string,
    'AddressAlternateName': attributes_string,
    'AddressAlternateName2': attributes_string,
    'AddressLocationNumber': attributes_string,
    'AddressName': attributes_string,
    'AddressTaxExemptNumber': attributes_string,
    'AddressTaxIdNumber': attributes_string,
    'AllowChrgAgency': attributes_string,
    'AllowChrgAmt': attributes_string,
    'AllowChrgHandlingDescription': attributes_string,
    'AllowChrgPercent': attributes_string,
    'AllowChrgQty': attributes_string,
    'AllowChrgQty2': attributes_string,
    'AllowChrgRate': attributes_string,
    'ApplicationId': attributes_string,
    'AppointmentNumber': attributes_string,
    'AssignedID': attributes_string,
    'BatchID': attributes_string,
    'BatchPart': attributes_string,
    'BatchTotal': attributes_string,
    'BillOfLadingNumber': attributes_string,
    'BuyerPartNumber': attributes_string,
    'BuyersCurrency': attributes_string,
    'CarrierAlphaCode': attributes_string,
    'CarrierEquipmentInitial': attributes_string,
    'CarrierEquipmentNumber': attributes_string,
    'CarrierInformation': CarrierInformationType510,
    'CarrierPackageID': attributes_string,
    'CarrierProNumber': attributes_string,
    'CarrierRouting': attributes_string,
    'CarrierSpecialHandlingDetail': CarrierSpecialHandlingDetailType506,
    'ChargesAllowances': ChargesAllowancesType602,
    'City': attributes_string,
    'Class': attributes_string,
    'ColorCategoryName': attributes_string,
    'ColorPrimaryDescription': attributes_string,
    'Comments': attributes_string,
    'Commodity': CommodityType930,
    'CommodityCode': attributes_string,
    'ConditionValue': attributes_string,
    'ConsumerPackageCode': attributes_string,
    'Contact': ContactType904,
    'ContactID': attributes_string,
    'ContactName': attributes_string,
    'ContactReference': attributes_string,
    'Container': ContainerType,
    'Country': attributes_string,
    'CountrySubDivision': attributes_string,
    'Currency': attributes_string,
    'CurrentScheduledDeliveryDate': attributes_string,
    'CurrentScheduledDeliveryTime': attributes_string,
    'CurrentScheduledShipDate': attributes_string,
    'CurrentScheduledShipTime': attributes_string,
    'CustomerAccountNumber': attributes_string,
    'CustomerOrderNumber': attributes_string,
    'Date': DateType908,
    'Date1': attributes_string,
    'DateTimePeriod': attributes_string,
    'DeliveryDate': attributes_string,
    'DeliveryTime': attributes_string,
    'Department': attributes_string,
    'DepartmentDescription': attributes_string,
    'DepositorOrderNumber': attributes_string,
    'Description': attributes_string,
    'Division': attributes_string,
    'DocumentControlIdentifier': attributes_string,
    'DocumentControlNumber': attributes_string,
    'DocumentRevision': attributes_string,
    'DocumentVersion': attributes_string,
    'EAN': attributes_string,
    'EffectiveDate': attributes_string,
    'EquipmentType': attributes_string,
    'ExceptionNumber': attributes_string,
    'ExchangeRate': attributes_string,
    'FOBLocationDescription': attributes_string,
    'FOBRelatedInstruction': FOBRelatedInstructionType,
    'FOBTitlePassageLocation': attributes_string,
    'GTIN': attributes_string,
    'GroupControlIdentifier': attributes_string,
    'GroupControlNumber': attributes_string,
    'GroupReceiverID': attributes_string,
    'GroupSenderID': attributes_string,
    'HazardousMaterialClass': attributes_string,
    'Header': HeaderType,
    'Height': attributes_string,
    'IndustryCode': attributes_string,
    'IndustryCodeQualifier': attributes_string,
    'InterchangeControlNumber': attributes_string,
    'InterchangeReceiverID': attributes_string,
    'InterchangeSenderID': attributes_string,
    'InternalOrderDate': attributes_string,
    'InternalOrderNumber': attributes_string,
    'InternationalStandardBookNumber': attributes_string,
    'InvoiceDate': attributes_string,
    'InvoiceNumber': attributes_string,
    'IsDropShip': attributes_string,
    'ItemAttribute': ItemAttributeType879,
    'ItemLevel': ItemLevelType347,
    'ItemLoad': ItemLoadType954,
    'ItemLoadInfo': ItemLoadInfoType616,
    'JobNumber': attributes_string,
    'JurisdictionCode': attributes_string,
    'LadingDescription': attributes_string,
    'LadingQuantity': attributes_string,
    'LanguageCode': attributes_string,
    'Length': attributes_string,
    'LineSequenceNumber': attributes_string,
    'LoadSize': attributes_string,
    'LocationID': attributes_string,
    'MarksAndNumbers1': attributes_string,
    'MarksAndNumbersCollection': MarksAndNumbersCollectionType272,
    'MasterItemAttribute': MasterItemAttributeType541,
    'MeasurementAttributeCode': attributes_string,
    'MeasurementRefIDCode': attributes_string,
    'MeasurementValue': attributes_string,
    'Measurements': MeasurementsType883,
    'Meta': MetaType,
    'MultiplePriceQuantity': attributes_string,
    'NRFColorCode': attributes_string,
    'NRFSizeCode': attributes_string,
    'NRFStandardColorAndSize': NRFStandardColorAndSizeType918,
    'NatlDrugCode': attributes_string,
    'NoteFormatCode': attributes_string,
    'NoteFunctionCode': attributes_string,
    'NoteInformationField': attributes_string,
    'Notes': NotesType962,
    'NumberOfLoads': attributes_string,
    'OptionNumber': attributes_string,
    'OrderHeader': OrderHeaderType,
    'OrderLevel': OrderLevelType,
    'OrderQty': attributes_string,
    'Pack': PackType261,
    'PackHeight': attributes_string,
    'PackLength': attributes_string,
    'PackLevel': PackLevelType260,
    'PackSize': attributes_string,
    'PackValue': attributes_string,
    'PackVolume': attributes_string,
    'PackWeight': attributes_string,
    'PackWidth': attributes_string,
    'Packaging': PackagingType342,
    'PackagingDescription': attributes_string,
    'PackagingDescriptionCode': attributes_string,
    'PalletBlocks': attributes_string,
    'PalletInformation': PalletInformationType274,
    'PalletTiers': attributes_string,
    'PalletValue': attributes_string,
    'PalletVolume': attributes_string,
    'PalletWeight': attributes_string,
    'PartNumber': attributes_string,
    'PctDollarBasis': attributes_string,
    'PercentDollarBasis': attributes_string,
    'PhysicalDetails': PhysicalDetailsType497,
    'PickupNumber': attributes_string,
    'PostalCode': attributes_string,
    'PriceInformation': PriceInformationType919,
    'PriceMultiplier': attributes_string,
    'PrimaryEmail': attributes_string,
    'PrimaryFax': attributes_string,
    'PrimaryPhone': attributes_string,
    'ProductCharacteristicCode': attributes_string,
    'ProductColorCode': attributes_string,
    'ProductColorDescription': attributes_string,
    'ProductDescription': attributes_string,
    'ProductDescriptionCode': attributes_string,
    'ProductID': ProductIDType913,
    'ProductMaterialCode': attributes_string,
    'ProductMaterialDescription': attributes_string,
    'ProductOrItemDescription': ProductOrItemDescriptionType926,
    'ProductProcessCode': attributes_string,
    'ProductProcessDescription': attributes_string,
    'ProductSizeCode': attributes_string,
    'ProductSizeDescription': attributes_string,
    'PromotionDealDescription': attributes_string,
    'PromotionDealNumber': attributes_string,
    'PurchaseOrderDate': attributes_string,
    'PurchaseOrderNumber': attributes_string,
    'PurchasePrice': attributes_string,
    'QtyLeftToReceive': attributes_string,
    'QtyPer': attributes_string,
    'Quantity': attributes_string,
    'QuantityAndWeight': QuantityAndWeightType24,
    'RangeMaximum': attributes_string,
    'RangeMinimum': attributes_string,
    'RebateAmount': attributes_string,
    'ReceiverCompanyName': attributes_string,
    'ReceiverUniqueID': attributes_string,
    'Reference': ReferenceType958,
    'ReferenceID': attributes_string,
    'ReferenceIDs': ReferenceIDsType960,
    'ReferenceIdentification': attributes_string,
    'ReleaseNumber': attributes_string,
    'RequestedPickupDate': attributes_string,
    'RequestedPickupTime': attributes_string,
    'ScheduledShipDate': attributes_string,
    'ScheduledShipTime': attributes_string,
    'SealNumber': attributes_string,
    'SellerDateCode': attributes_string,
    'SellersCurrency': attributes_string,
    'SenderCompanyName': attributes_string,
    'SenderUniqueID': attributes_string,
    'ServiceLevelCodes': ServiceLevelCodesType856,
    'ShipDate': attributes_string,
    'ShipNoticeDate': attributes_string,
    'ShipNoticeTime': attributes_string,
    'ShipQty': attributes_string,
    'ShipmentHeader': ShipmentHeaderType,
    'ShipmentIdentification': attributes_string,
    'ShipmentLine': ShipmentLineType488,
    'ShipmentTime': attributes_string,
    'ShippingSerialID': attributes_string,
    'SizeCategoryName': attributes_string,
    'SizeHeading1': attributes_string,
    'SizeHeading2': attributes_string,
    'SizeHeading3': attributes_string,
    'SizeHeading4': attributes_string,
    'SizePrimaryDescription': attributes_string,
    'SizeSecondaryDescription': attributes_string,
    'SizeTableName': attributes_string,
    'SourceSubqualifier': attributes_string,
    'State': attributes_string,
    'StatusReasonCode': attributes_string,
    'Subline': SublineType911,
    'SublineItemDetail': SublineItemDetailType912,
    'Sublines': SublinesType573,
    'Summary': SummaryType,
    'SurfaceLayerPositionCode': attributes_string,
    'Tax': TaxType946,
    'TaxAmount': attributes_string,
    'TaxID': attributes_string,
    'TaxPercent': attributes_string,
    'Time1': attributes_string,
    'TotalLineItems': attributes_string,
    'TotalOrders': attributes_string,
    'TotalQuantity': attributes_string,
    'TotalWeight': attributes_string,
    'TransitTime': attributes_string,
    'TransportationTermsCode': attributes_string,
    'TsetTypeCode': attributes_string,
    'UPCCaseCode': attributes_string,
    'UnitPrice': attributes_string,
    'UnitWeight': attributes_string,
    'UnitsShipped': attributes_string,
    'Validation': attributes_string,
    'Value': attributes_string,
    'Vendor': attributes_string,
    'VendorPartNumber': attributes_string,
    'Version': attributes_string,
    'Volume': attributes_string,
    'Weight': attributes_string,
    'Width': attributes_string,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Shipments'
        rootClass = Shipments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Shipments'
        rootClass = Shipments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Shipments'
        rootClass = Shipments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Shipments'
        rootClass = Shipments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from schemasLayout import *\n\n')
        sys.stdout.write('import schemasLayout as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AdditionalContactDetailsType",
    "AdditionalContactDetailsType112",
    "AdditionalContactDetailsType209",
    "AdditionalContactDetailsType301",
    "AdditionalContactDetailsType429",
    "AdditionalContactDetailsType569",
    "AdditionalContactDetailsType64",
    "AdditionalContactDetailsType667",
    "AdditionalContactDetailsType712",
    "AdditionalContactDetailsType779",
    "AdditionalContactDetailsType8",
    "AdditionalContactDetailsType906",
    "AddressType",
    "AddressType103",
    "AddressType12",
    "AddressType148",
    "AddressType177",
    "AddressType200",
    "AddressType292",
    "AddressType337",
    "AddressType381",
    "AddressType42",
    "AddressType420",
    "AddressType521",
    "AddressType55",
    "AddressType560",
    "AddressType653",
    "AddressType658",
    "AddressType690",
    "AddressType703",
    "AddressType770",
    "AddressType815",
    "AddressType858",
    "AddressType897",
    "CarrierInformationType",
    "CarrierInformationType137",
    "CarrierInformationType166",
    "CarrierInformationType31",
    "CarrierInformationType326",
    "CarrierInformationType370",
    "CarrierInformationType510",
    "CarrierInformationType642",
    "CarrierInformationType679",
    "CarrierInformationType804",
    "CarrierInformationType847",
    "CarrierSpecialHandlingDetailType",
    "CarrierSpecialHandlingDetailType162",
    "CarrierSpecialHandlingDetailType366",
    "CarrierSpecialHandlingDetailType506",
    "CarrierSpecialHandlingDetailType843",
    "ChargesAllowancesType",
    "ChargesAllowancesType123",
    "ChargesAllowancesType238",
    "ChargesAllowancesType312",
    "ChargesAllowancesType462",
    "ChargesAllowancesType602",
    "ChargesAllowancesType723",
    "ChargesAllowancesType75",
    "ChargesAllowancesType790",
    "ChargesAllowancesType939",
    "CommodityType",
    "CommodityType198",
    "CommodityType229",
    "CommodityType418",
    "CommodityType453",
    "CommodityType558",
    "CommodityType593",
    "CommodityType737",
    "CommodityType895",
    "CommodityType930",
    "ContactType",
    "ContactType110",
    "ContactType207",
    "ContactType299",
    "ContactType427",
    "ContactType567",
    "ContactType6",
    "ContactType62",
    "ContactType665",
    "ContactType710",
    "ContactType777",
    "ContactType904",
    "ContainerLevel",
    "ContainerType",
    "DateType",
    "DateType10",
    "DateType114",
    "DateType15",
    "DateType151",
    "DateType180",
    "DateType190",
    "DateType211",
    "DateType284",
    "DateType303",
    "DateType340",
    "DateType384",
    "DateType410",
    "DateType431",
    "DateType45",
    "DateType47",
    "DateType524",
    "DateType550",
    "DateType571",
    "DateType627",
    "DateType656",
    "DateType66",
    "DateType669",
    "DateType693",
    "DateType695",
    "DateType714",
    "DateType762",
    "DateType781",
    "DateType818",
    "DateType861",
    "DateType887",
    "DateType908",
    "DateType95",
    "FOBRelatedInstructionType",
    "HeaderType",
    "ItemAttributeType",
    "ItemAttributeType402",
    "ItemAttributeType542",
    "ItemAttributeType879",
    "ItemLevel",
    "ItemLevelType",
    "ItemLevelType347",
    "ItemLevelType487",
    "ItemLoadInfoType",
    "ItemLoadInfoType476",
    "ItemLoadInfoType616",
    "ItemLoadInfoType953",
    "ItemLoadType",
    "ItemLoadType477",
    "ItemLoadType617",
    "ItemLoadType954",
    "MarksAndNumbersCollectionType",
    "MarksAndNumbersCollectionType272",
    "MarksAndNumbersCollectionType750",
    "MasterItemAttributeType",
    "MasterItemAttributeType401",
    "MasterItemAttributeType541",
    "MasterItemAttributeType878",
    "MeasurementsType",
    "MeasurementsType186",
    "MeasurementsType386",
    "MeasurementsType406",
    "MeasurementsType526",
    "MeasurementsType546",
    "MeasurementsType863",
    "MeasurementsType883",
    "MetaType",
    "NRFStandardColorAndSizeType",
    "NRFStandardColorAndSizeType217",
    "NRFStandardColorAndSizeType356",
    "NRFStandardColorAndSizeType441",
    "NRFStandardColorAndSizeType496",
    "NRFStandardColorAndSizeType581",
    "NRFStandardColorAndSizeType833",
    "NRFStandardColorAndSizeType918",
    "NotesType",
    "NotesType101",
    "NotesType196",
    "NotesType258",
    "NotesType290",
    "NotesType416",
    "NotesType485",
    "NotesType53",
    "NotesType556",
    "NotesType625",
    "NotesType633",
    "NotesType701",
    "NotesType768",
    "NotesType893",
    "NotesType962",
    "OrderHeaderType",
    "OrderHeaderType671",
    "OrderLevel",
    "OrderLevelType",
    "PackLevel",
    "PackLevelType260",
    "PackLevelType89",
    "PackType",
    "PackType261",
    "PackType739",
    "PackagingType",
    "PackagingType342",
    "PackagingType820",
    "PalletInformationType",
    "PalletInformationType274",
    "PalletInformationType752",
    "PhysicalDetailsType",
    "PhysicalDetailsType153",
    "PhysicalDetailsType263",
    "PhysicalDetailsType357",
    "PhysicalDetailsType497",
    "PhysicalDetailsType741",
    "PhysicalDetailsType834",
    "PriceInformationType",
    "PriceInformationType218",
    "PriceInformationType390",
    "PriceInformationType442",
    "PriceInformationType530",
    "PriceInformationType582",
    "PriceInformationType867",
    "PriceInformationType919",
    "ProductIDType",
    "ProductIDType213",
    "ProductIDType349",
    "ProductIDType436",
    "ProductIDType489",
    "ProductIDType576",
    "ProductIDType826",
    "ProductIDType913",
    "ProductOrItemDescriptionType",
    "ProductOrItemDescriptionType225",
    "ProductOrItemDescriptionType397",
    "ProductOrItemDescriptionType449",
    "ProductOrItemDescriptionType537",
    "ProductOrItemDescriptionType589",
    "ProductOrItemDescriptionType874",
    "ProductOrItemDescriptionType926",
    "QuantityAndWeightType",
    "QuantityAndWeightType24",
    "QuantityAndWeightType635",
    "QuantityAndWeightType672",
    "ReferenceIDsType",
    "ReferenceIDsType108",
    "ReferenceIDsType194",
    "ReferenceIDsType205",
    "ReferenceIDsType256",
    "ReferenceIDsType288",
    "ReferenceIDsType297",
    "ReferenceIDsType4",
    "ReferenceIDsType414",
    "ReferenceIDsType425",
    "ReferenceIDsType483",
    "ReferenceIDsType51",
    "ReferenceIDsType554",
    "ReferenceIDsType565",
    "ReferenceIDsType60",
    "ReferenceIDsType623",
    "ReferenceIDsType631",
    "ReferenceIDsType663",
    "ReferenceIDsType699",
    "ReferenceIDsType708",
    "ReferenceIDsType766",
    "ReferenceIDsType775",
    "ReferenceIDsType891",
    "ReferenceIDsType902",
    "ReferenceIDsType960",
    "ReferenceIDsType99",
    "ReferenceType",
    "ReferenceType106",
    "ReferenceType192",
    "ReferenceType2",
    "ReferenceType203",
    "ReferenceType254",
    "ReferenceType286",
    "ReferenceType295",
    "ReferenceType412",
    "ReferenceType423",
    "ReferenceType481",
    "ReferenceType49",
    "ReferenceType552",
    "ReferenceType563",
    "ReferenceType58",
    "ReferenceType621",
    "ReferenceType629",
    "ReferenceType661",
    "ReferenceType697",
    "ReferenceType706",
    "ReferenceType764",
    "ReferenceType773",
    "ReferenceType889",
    "ReferenceType900",
    "ReferenceType958",
    "ReferenceType97",
    "ServiceLevelCodesType",
    "ServiceLevelCodesType146",
    "ServiceLevelCodesType175",
    "ServiceLevelCodesType335",
    "ServiceLevelCodesType379",
    "ServiceLevelCodesType40",
    "ServiceLevelCodesType519",
    "ServiceLevelCodesType651",
    "ServiceLevelCodesType688",
    "ServiceLevelCodesType813",
    "ServiceLevelCodesType856",
    "Shipment",
    "ShipmentHeaderType",
    "ShipmentLineType",
    "ShipmentLineType348",
    "ShipmentLineType488",
    "ShipmentLineType825",
    "Shipments",
    "SublineItemDetailType",
    "SublineItemDetailType435",
    "SublineItemDetailType575",
    "SublineItemDetailType912",
    "SublineType",
    "SublineType434",
    "SublineType574",
    "SublineType911",
    "SublinesType",
    "SublinesType433",
    "SublinesType573",
    "SublinesType910",
    "SummaryType",
    "TaxType",
    "TaxType116",
    "TaxType130",
    "TaxType17",
    "TaxType231",
    "TaxType245",
    "TaxType305",
    "TaxType319",
    "TaxType455",
    "TaxType469",
    "TaxType595",
    "TaxType609",
    "TaxType68",
    "TaxType716",
    "TaxType730",
    "TaxType783",
    "TaxType797",
    "TaxType82",
    "TaxType932",
    "TaxType946",
    "attributes_string"
]
