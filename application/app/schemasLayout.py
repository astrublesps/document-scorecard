#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed May 11 11:27:04 2016 by generateDS.py version 2.22a.
#
# Command line options:
#   ('-f', '')
#   ('-o', 'app/schemasLayout.py')
#
# Command line arguments:
#   app/SCHEMAS/OrderAcks.xsd
#
# Command line:
#   generateDS/generateDS.py -f -o "app/schemasLayout.py" app/SCHEMAS/OrderAcks.xsd
#
# Current working directory (os.getcwd()):
#   application
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class OrderAcks(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OrderAck=None):
        self.original_tagname_ = None
        if OrderAck is None:
            self.OrderAck = []
        else:
            self.OrderAck = OrderAck
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderAcks)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderAcks.subclass:
            return OrderAcks.subclass(*args_, **kwargs_)
        else:
            return OrderAcks(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OrderAck(self): return self.OrderAck
    def set_OrderAck(self, OrderAck): self.OrderAck = OrderAck
    def add_OrderAck(self, value): self.OrderAck.append(value)
    def insert_OrderAck_at(self, index, value): self.OrderAck.insert(index, value)
    def replace_OrderAck_at(self, index, value): self.OrderAck[index] = value
    def hasContent_(self):
        if (
            self.OrderAck
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderAcks', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderAcks')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderAcks', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderAcks'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderAcks', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OrderAck_ in self.OrderAck:
            OrderAck_.export(outfile, level, namespace_, name_='OrderAck', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OrderAck':
            obj_ = OrderAckType.factory()
            obj_.build(child_)
            self.OrderAck.append(obj_)
            obj_.original_tagname_ = 'OrderAck'
# end class OrderAcks


class OrderAckType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Meta=None, Header=None, LineItems=None, Summary=None):
        self.original_tagname_ = None
        self.Meta = Meta
        self.Header = Header
        self.LineItems = LineItems
        self.Summary = Summary
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderAckType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderAckType.subclass:
            return OrderAckType.subclass(*args_, **kwargs_)
        else:
            return OrderAckType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Meta(self): return self.Meta
    def set_Meta(self, Meta): self.Meta = Meta
    def get_Header(self): return self.Header
    def set_Header(self, Header): self.Header = Header
    def get_LineItems(self): return self.LineItems
    def set_LineItems(self, LineItems): self.LineItems = LineItems
    def get_Summary(self): return self.Summary
    def set_Summary(self, Summary): self.Summary = Summary
    def hasContent_(self):
        if (
            self.Meta is not None or
            self.Header is not None or
            self.LineItems is not None or
            self.Summary is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderAckType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderAckType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderAckType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderAckType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderAckType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Meta is not None:
            self.Meta.export(outfile, level, namespace_, name_='Meta', pretty_print=pretty_print)
        if self.Header is not None:
            self.Header.export(outfile, level, namespace_, name_='Header', pretty_print=pretty_print)
        if self.LineItems is not None:
            self.LineItems.export(outfile, level, namespace_, name_='LineItems', pretty_print=pretty_print)
        if self.Summary is not None:
            self.Summary.export(outfile, level, namespace_, name_='Summary', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Meta':
            obj_ = MetaType.factory()
            obj_.build(child_)
            self.Meta = obj_
            obj_.original_tagname_ = 'Meta'
        elif nodeName_ == 'Header':
            obj_ = HeaderType.factory()
            obj_.build(child_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'LineItems':
            obj_ = LineItemsType.factory()
            obj_.build(child_)
            self.LineItems = obj_
            obj_.original_tagname_ = 'LineItems'
        elif nodeName_ == 'Summary':
            obj_ = SummaryType.factory()
            obj_.build(child_)
            self.Summary = obj_
            obj_.original_tagname_ = 'Summary'
# end class OrderAckType


class attributes_date(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, qualified_rep=None, requires_others=None, not_equal=None, requires_one=None, score=None, valueOf_=None):
        self.original_tagname_ = None
        self.qualified_rep = _cast(None, qualified_rep)
        self.requires_others = _cast(None, requires_others)
        self.not_equal = _cast(None, not_equal)
        self.requires_one = _cast(None, requires_one)
        self.score = _cast(None, score)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attributes_date)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attributes_date.subclass:
            return attributes_date.subclass(*args_, **kwargs_)
        else:
            return attributes_date(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_qualified_rep(self): return self.qualified_rep
    def set_qualified_rep(self, qualified_rep): self.qualified_rep = qualified_rep
    def get_requires_others(self): return self.requires_others
    def set_requires_others(self, requires_others): self.requires_others = requires_others
    def get_not_equal(self): return self.not_equal
    def set_not_equal(self, not_equal): self.not_equal = not_equal
    def get_requires_one(self): return self.requires_one
    def set_requires_one(self, requires_one): self.requires_one = requires_one
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='attributes-date', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attributes-date')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='attributes-date', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attributes-date'):
        if self.qualified_rep is not None and 'qualified_rep' not in already_processed:
            already_processed.add('qualified_rep')
            outfile.write(' qualified-rep=%s' % (quote_attrib(self.qualified_rep), ))
        if self.requires_others is not None and 'requires_others' not in already_processed:
            already_processed.add('requires_others')
            outfile.write(' requires-others=%s' % (quote_attrib(self.requires_others), ))
        if self.not_equal is not None and 'not_equal' not in already_processed:
            already_processed.add('not_equal')
            outfile.write(' not-equal=%s' % (quote_attrib(self.not_equal), ))
        if self.requires_one is not None and 'requires_one' not in already_processed:
            already_processed.add('requires_one')
            outfile.write(' requires-one=%s' % (quote_attrib(self.requires_one), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score=%s' % (quote_attrib(self.score), ))
    def exportChildren(self, outfile, level, namespace_='', name_='attributes-date', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('qualified-rep', node)
        if value is not None and 'qualified-rep' not in already_processed:
            already_processed.add('qualified-rep')
            self.qualified_rep = value
        value = find_attr_value_('requires-others', node)
        if value is not None and 'requires-others' not in already_processed:
            already_processed.add('requires-others')
            self.requires_others = value
        value = find_attr_value_('not-equal', node)
        if value is not None and 'not-equal' not in already_processed:
            already_processed.add('not-equal')
            self.not_equal = value
        value = find_attr_value_('requires-one', node)
        if value is not None and 'requires-one' not in already_processed:
            already_processed.add('requires-one')
            self.requires_one = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            self.score = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attributes_date


class attributes_time(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, qualified_rep=None, requires_others=None, not_equal=None, requires_one=None, score=None, valueOf_=None):
        self.original_tagname_ = None
        self.qualified_rep = _cast(None, qualified_rep)
        self.requires_others = _cast(None, requires_others)
        self.not_equal = _cast(None, not_equal)
        self.requires_one = _cast(None, requires_one)
        self.score = _cast(None, score)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attributes_time)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attributes_time.subclass:
            return attributes_time.subclass(*args_, **kwargs_)
        else:
            return attributes_time(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_qualified_rep(self): return self.qualified_rep
    def set_qualified_rep(self, qualified_rep): self.qualified_rep = qualified_rep
    def get_requires_others(self): return self.requires_others
    def set_requires_others(self, requires_others): self.requires_others = requires_others
    def get_not_equal(self): return self.not_equal
    def set_not_equal(self, not_equal): self.not_equal = not_equal
    def get_requires_one(self): return self.requires_one
    def set_requires_one(self, requires_one): self.requires_one = requires_one
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='attributes-time', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attributes-time')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='attributes-time', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attributes-time'):
        if self.qualified_rep is not None and 'qualified_rep' not in already_processed:
            already_processed.add('qualified_rep')
            outfile.write(' qualified-rep=%s' % (quote_attrib(self.qualified_rep), ))
        if self.requires_others is not None and 'requires_others' not in already_processed:
            already_processed.add('requires_others')
            outfile.write(' requires-others=%s' % (quote_attrib(self.requires_others), ))
        if self.not_equal is not None and 'not_equal' not in already_processed:
            already_processed.add('not_equal')
            outfile.write(' not-equal=%s' % (quote_attrib(self.not_equal), ))
        if self.requires_one is not None and 'requires_one' not in already_processed:
            already_processed.add('requires_one')
            outfile.write(' requires-one=%s' % (quote_attrib(self.requires_one), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score=%s' % (quote_attrib(self.score), ))
    def exportChildren(self, outfile, level, namespace_='', name_='attributes-time', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('qualified-rep', node)
        if value is not None and 'qualified-rep' not in already_processed:
            already_processed.add('qualified-rep')
            self.qualified_rep = value
        value = find_attr_value_('requires-others', node)
        if value is not None and 'requires-others' not in already_processed:
            already_processed.add('requires-others')
            self.requires_others = value
        value = find_attr_value_('not-equal', node)
        if value is not None and 'not-equal' not in already_processed:
            already_processed.add('not-equal')
            self.not_equal = value
        value = find_attr_value_('requires-one', node)
        if value is not None and 'requires-one' not in already_processed:
            already_processed.add('requires-one')
            self.requires_one = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            self.score = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attributes_time


class attributes_decimal(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, qualified_rep=None, requires_others=None, not_equal=None, requires_one=None, score=None, valueOf_=None):
        self.original_tagname_ = None
        self.qualified_rep = _cast(None, qualified_rep)
        self.requires_others = _cast(None, requires_others)
        self.not_equal = _cast(None, not_equal)
        self.requires_one = _cast(None, requires_one)
        self.score = _cast(None, score)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attributes_decimal)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attributes_decimal.subclass:
            return attributes_decimal.subclass(*args_, **kwargs_)
        else:
            return attributes_decimal(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_qualified_rep(self): return self.qualified_rep
    def set_qualified_rep(self, qualified_rep): self.qualified_rep = qualified_rep
    def get_requires_others(self): return self.requires_others
    def set_requires_others(self, requires_others): self.requires_others = requires_others
    def get_not_equal(self): return self.not_equal
    def set_not_equal(self, not_equal): self.not_equal = not_equal
    def get_requires_one(self): return self.requires_one
    def set_requires_one(self, requires_one): self.requires_one = requires_one
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='attributes-decimal', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attributes-decimal')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='attributes-decimal', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attributes-decimal'):
        if self.qualified_rep is not None and 'qualified_rep' not in already_processed:
            already_processed.add('qualified_rep')
            outfile.write(' qualified-rep=%s' % (quote_attrib(self.qualified_rep), ))
        if self.requires_others is not None and 'requires_others' not in already_processed:
            already_processed.add('requires_others')
            outfile.write(' requires-others=%s' % (quote_attrib(self.requires_others), ))
        if self.not_equal is not None and 'not_equal' not in already_processed:
            already_processed.add('not_equal')
            outfile.write(' not-equal=%s' % (quote_attrib(self.not_equal), ))
        if self.requires_one is not None and 'requires_one' not in already_processed:
            already_processed.add('requires_one')
            outfile.write(' requires-one=%s' % (quote_attrib(self.requires_one), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score=%s' % (quote_attrib(self.score), ))
    def exportChildren(self, outfile, level, namespace_='', name_='attributes-decimal', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('qualified-rep', node)
        if value is not None and 'qualified-rep' not in already_processed:
            already_processed.add('qualified-rep')
            self.qualified_rep = value
        value = find_attr_value_('requires-others', node)
        if value is not None and 'requires-others' not in already_processed:
            already_processed.add('requires-others')
            self.requires_others = value
        value = find_attr_value_('not-equal', node)
        if value is not None and 'not-equal' not in already_processed:
            already_processed.add('not-equal')
            self.not_equal = value
        value = find_attr_value_('requires-one', node)
        if value is not None and 'requires-one' not in already_processed:
            already_processed.add('requires-one')
            self.requires_one = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            self.score = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attributes_decimal


class attributes_boolean(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, qualified_rep=None, requires_others=None, not_equal=None, requires_one=None, score=None, valueOf_=None):
        self.original_tagname_ = None
        self.qualified_rep = _cast(None, qualified_rep)
        self.requires_others = _cast(None, requires_others)
        self.not_equal = _cast(None, not_equal)
        self.requires_one = _cast(None, requires_one)
        self.score = _cast(None, score)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attributes_boolean)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attributes_boolean.subclass:
            return attributes_boolean.subclass(*args_, **kwargs_)
        else:
            return attributes_boolean(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_qualified_rep(self): return self.qualified_rep
    def set_qualified_rep(self, qualified_rep): self.qualified_rep = qualified_rep
    def get_requires_others(self): return self.requires_others
    def set_requires_others(self, requires_others): self.requires_others = requires_others
    def get_not_equal(self): return self.not_equal
    def set_not_equal(self, not_equal): self.not_equal = not_equal
    def get_requires_one(self): return self.requires_one
    def set_requires_one(self, requires_one): self.requires_one = requires_one
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='attributes-boolean', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attributes-boolean')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='attributes-boolean', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attributes-boolean'):
        if self.qualified_rep is not None and 'qualified_rep' not in already_processed:
            already_processed.add('qualified_rep')
            outfile.write(' qualified-rep=%s' % (quote_attrib(self.qualified_rep), ))
        if self.requires_others is not None and 'requires_others' not in already_processed:
            already_processed.add('requires_others')
            outfile.write(' requires-others=%s' % (quote_attrib(self.requires_others), ))
        if self.not_equal is not None and 'not_equal' not in already_processed:
            already_processed.add('not_equal')
            outfile.write(' not-equal=%s' % (quote_attrib(self.not_equal), ))
        if self.requires_one is not None and 'requires_one' not in already_processed:
            already_processed.add('requires_one')
            outfile.write(' requires-one=%s' % (quote_attrib(self.requires_one), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score=%s' % (quote_attrib(self.score), ))
    def exportChildren(self, outfile, level, namespace_='', name_='attributes-boolean', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('qualified-rep', node)
        if value is not None and 'qualified-rep' not in already_processed:
            already_processed.add('qualified-rep')
            self.qualified_rep = value
        value = find_attr_value_('requires-others', node)
        if value is not None and 'requires-others' not in already_processed:
            already_processed.add('requires-others')
            self.requires_others = value
        value = find_attr_value_('not-equal', node)
        if value is not None and 'not-equal' not in already_processed:
            already_processed.add('not-equal')
            self.not_equal = value
        value = find_attr_value_('requires-one', node)
        if value is not None and 'requires-one' not in already_processed:
            already_processed.add('requires-one')
            self.requires_one = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            self.score = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attributes_boolean


class attributes_string(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, qualified_rep=None, requires_others=None, not_equal=None, requires_one=None, score=None, valueOf_=None):
        self.original_tagname_ = None
        self.qualified_rep = _cast(None, qualified_rep)
        self.requires_others = _cast(None, requires_others)
        self.not_equal = _cast(None, not_equal)
        self.requires_one = _cast(None, requires_one)
        self.score = _cast(None, score)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attributes_string)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attributes_string.subclass:
            return attributes_string.subclass(*args_, **kwargs_)
        else:
            return attributes_string(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_qualified_rep(self): return self.qualified_rep
    def set_qualified_rep(self, qualified_rep): self.qualified_rep = qualified_rep
    def get_requires_others(self): return self.requires_others
    def set_requires_others(self, requires_others): self.requires_others = requires_others
    def get_not_equal(self): return self.not_equal
    def set_not_equal(self, not_equal): self.not_equal = not_equal
    def get_requires_one(self): return self.requires_one
    def set_requires_one(self, requires_one): self.requires_one = requires_one
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='attributes-string', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attributes-string')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='attributes-string', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attributes-string'):
        if self.qualified_rep is not None and 'qualified_rep' not in already_processed:
            already_processed.add('qualified_rep')
            outfile.write(' qualified-rep=%s' % (quote_attrib(self.qualified_rep), ))
        if self.requires_others is not None and 'requires_others' not in already_processed:
            already_processed.add('requires_others')
            outfile.write(' requires-others=%s' % (quote_attrib(self.requires_others), ))
        if self.not_equal is not None and 'not_equal' not in already_processed:
            already_processed.add('not_equal')
            outfile.write(' not-equal=%s' % (quote_attrib(self.not_equal), ))
        if self.requires_one is not None and 'requires_one' not in already_processed:
            already_processed.add('requires_one')
            outfile.write(' requires-one=%s' % (quote_attrib(self.requires_one), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score=%s' % (quote_attrib(self.score), ))
    def exportChildren(self, outfile, level, namespace_='', name_='attributes-string', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('qualified-rep', node)
        if value is not None and 'qualified-rep' not in already_processed:
            already_processed.add('qualified-rep')
            self.qualified_rep = value
        value = find_attr_value_('requires-others', node)
        if value is not None and 'requires-others' not in already_processed:
            already_processed.add('requires-others')
            self.requires_others = value
        value = find_attr_value_('not-equal', node)
        if value is not None and 'not-equal' not in already_processed:
            already_processed.add('not-equal')
            self.not_equal = value
        value = find_attr_value_('requires-one', node)
        if value is not None and 'requires-one' not in already_processed:
            already_processed.add('requires-one')
            self.requires_one = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            self.score = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attributes_string


class attributes_integer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, qualified_rep=None, requires_others=None, not_equal=None, requires_one=None, score=None, valueOf_=None):
        self.original_tagname_ = None
        self.qualified_rep = _cast(None, qualified_rep)
        self.requires_others = _cast(None, requires_others)
        self.not_equal = _cast(None, not_equal)
        self.requires_one = _cast(None, requires_one)
        self.score = _cast(None, score)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attributes_integer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attributes_integer.subclass:
            return attributes_integer.subclass(*args_, **kwargs_)
        else:
            return attributes_integer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_qualified_rep(self): return self.qualified_rep
    def set_qualified_rep(self, qualified_rep): self.qualified_rep = qualified_rep
    def get_requires_others(self): return self.requires_others
    def set_requires_others(self, requires_others): self.requires_others = requires_others
    def get_not_equal(self): return self.not_equal
    def set_not_equal(self, not_equal): self.not_equal = not_equal
    def get_requires_one(self): return self.requires_one
    def set_requires_one(self, requires_one): self.requires_one = requires_one
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='attributes-integer', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attributes-integer')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='attributes-integer', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attributes-integer'):
        if self.qualified_rep is not None and 'qualified_rep' not in already_processed:
            already_processed.add('qualified_rep')
            outfile.write(' qualified-rep=%s' % (quote_attrib(self.qualified_rep), ))
        if self.requires_others is not None and 'requires_others' not in already_processed:
            already_processed.add('requires_others')
            outfile.write(' requires-others=%s' % (quote_attrib(self.requires_others), ))
        if self.not_equal is not None and 'not_equal' not in already_processed:
            already_processed.add('not_equal')
            outfile.write(' not-equal=%s' % (quote_attrib(self.not_equal), ))
        if self.requires_one is not None and 'requires_one' not in already_processed:
            already_processed.add('requires_one')
            outfile.write(' requires-one=%s' % (quote_attrib(self.requires_one), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score=%s' % (quote_attrib(self.score), ))
    def exportChildren(self, outfile, level, namespace_='', name_='attributes-integer', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('qualified-rep', node)
        if value is not None and 'qualified-rep' not in already_processed:
            already_processed.add('qualified-rep')
            self.qualified_rep = value
        value = find_attr_value_('requires-others', node)
        if value is not None and 'requires-others' not in already_processed:
            already_processed.add('requires-others')
            self.requires_others = value
        value = find_attr_value_('not-equal', node)
        if value is not None and 'not-equal' not in already_processed:
            already_processed.add('not-equal')
            self.not_equal = value
        value = find_attr_value_('requires-one', node)
        if value is not None and 'requires-one' not in already_processed:
            already_processed.add('requires-one')
            self.requires_one = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            self.score = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attributes_integer


class MetaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SenderUniqueID=None, SenderCompanyName=None, ReceiverUniqueID=None, ReceiverCompanyName=None, IsDropShip=None, InterchangeControlNumber=None, GroupControlIdentifier=None, GroupControlNumber=None, DocumentControlIdentifier=None, DocumentControlNumber=None, InterchangeSenderID=None, InterchangeReceiverID=None, GroupSenderID=None, GroupReceiverID=None, BatchPart=None, BatchTotal=None, BatchID=None, Comments=None, Validation=None, OrderManagement=None, Version=None):
        self.original_tagname_ = None
        self.SenderUniqueID = SenderUniqueID
        self.SenderCompanyName = SenderCompanyName
        self.ReceiverUniqueID = ReceiverUniqueID
        self.ReceiverCompanyName = ReceiverCompanyName
        self.IsDropShip = IsDropShip
        self.InterchangeControlNumber = InterchangeControlNumber
        self.GroupControlIdentifier = GroupControlIdentifier
        self.GroupControlNumber = GroupControlNumber
        self.DocumentControlIdentifier = DocumentControlIdentifier
        self.DocumentControlNumber = DocumentControlNumber
        self.InterchangeSenderID = InterchangeSenderID
        self.InterchangeReceiverID = InterchangeReceiverID
        self.GroupSenderID = GroupSenderID
        self.GroupReceiverID = GroupReceiverID
        self.BatchPart = BatchPart
        self.BatchTotal = BatchTotal
        self.BatchID = BatchID
        self.Comments = Comments
        self.Validation = Validation
        self.OrderManagement = OrderManagement
        self.Version = Version
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetaType.subclass:
            return MetaType.subclass(*args_, **kwargs_)
        else:
            return MetaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SenderUniqueID(self): return self.SenderUniqueID
    def set_SenderUniqueID(self, SenderUniqueID): self.SenderUniqueID = SenderUniqueID
    def get_SenderCompanyName(self): return self.SenderCompanyName
    def set_SenderCompanyName(self, SenderCompanyName): self.SenderCompanyName = SenderCompanyName
    def get_ReceiverUniqueID(self): return self.ReceiverUniqueID
    def set_ReceiverUniqueID(self, ReceiverUniqueID): self.ReceiverUniqueID = ReceiverUniqueID
    def get_ReceiverCompanyName(self): return self.ReceiverCompanyName
    def set_ReceiverCompanyName(self, ReceiverCompanyName): self.ReceiverCompanyName = ReceiverCompanyName
    def get_IsDropShip(self): return self.IsDropShip
    def set_IsDropShip(self, IsDropShip): self.IsDropShip = IsDropShip
    def get_InterchangeControlNumber(self): return self.InterchangeControlNumber
    def set_InterchangeControlNumber(self, InterchangeControlNumber): self.InterchangeControlNumber = InterchangeControlNumber
    def get_GroupControlIdentifier(self): return self.GroupControlIdentifier
    def set_GroupControlIdentifier(self, GroupControlIdentifier): self.GroupControlIdentifier = GroupControlIdentifier
    def get_GroupControlNumber(self): return self.GroupControlNumber
    def set_GroupControlNumber(self, GroupControlNumber): self.GroupControlNumber = GroupControlNumber
    def get_DocumentControlIdentifier(self): return self.DocumentControlIdentifier
    def set_DocumentControlIdentifier(self, DocumentControlIdentifier): self.DocumentControlIdentifier = DocumentControlIdentifier
    def get_DocumentControlNumber(self): return self.DocumentControlNumber
    def set_DocumentControlNumber(self, DocumentControlNumber): self.DocumentControlNumber = DocumentControlNumber
    def get_InterchangeSenderID(self): return self.InterchangeSenderID
    def set_InterchangeSenderID(self, InterchangeSenderID): self.InterchangeSenderID = InterchangeSenderID
    def get_InterchangeReceiverID(self): return self.InterchangeReceiverID
    def set_InterchangeReceiverID(self, InterchangeReceiverID): self.InterchangeReceiverID = InterchangeReceiverID
    def get_GroupSenderID(self): return self.GroupSenderID
    def set_GroupSenderID(self, GroupSenderID): self.GroupSenderID = GroupSenderID
    def get_GroupReceiverID(self): return self.GroupReceiverID
    def set_GroupReceiverID(self, GroupReceiverID): self.GroupReceiverID = GroupReceiverID
    def get_BatchPart(self): return self.BatchPart
    def set_BatchPart(self, BatchPart): self.BatchPart = BatchPart
    def get_BatchTotal(self): return self.BatchTotal
    def set_BatchTotal(self, BatchTotal): self.BatchTotal = BatchTotal
    def get_BatchID(self): return self.BatchID
    def set_BatchID(self, BatchID): self.BatchID = BatchID
    def get_Comments(self): return self.Comments
    def set_Comments(self, Comments): self.Comments = Comments
    def get_Validation(self): return self.Validation
    def set_Validation(self, Validation): self.Validation = Validation
    def get_OrderManagement(self): return self.OrderManagement
    def set_OrderManagement(self, OrderManagement): self.OrderManagement = OrderManagement
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def hasContent_(self):
        if (
            self.SenderUniqueID is not None or
            self.SenderCompanyName is not None or
            self.ReceiverUniqueID is not None or
            self.ReceiverCompanyName is not None or
            self.IsDropShip is not None or
            self.InterchangeControlNumber is not None or
            self.GroupControlIdentifier is not None or
            self.GroupControlNumber is not None or
            self.DocumentControlIdentifier is not None or
            self.DocumentControlNumber is not None or
            self.InterchangeSenderID is not None or
            self.InterchangeReceiverID is not None or
            self.GroupSenderID is not None or
            self.GroupReceiverID is not None or
            self.BatchPart is not None or
            self.BatchTotal is not None or
            self.BatchID is not None or
            self.Comments is not None or
            self.Validation is not None or
            self.OrderManagement is not None or
            self.Version is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetaType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetaType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MetaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SenderUniqueID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSenderUniqueID>%s</%sSenderUniqueID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SenderUniqueID), input_name='SenderUniqueID')), namespace_, eol_))
        if self.SenderCompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSenderCompanyName>%s</%sSenderCompanyName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SenderCompanyName), input_name='SenderCompanyName')), namespace_, eol_))
        if self.ReceiverUniqueID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceiverUniqueID>%s</%sReceiverUniqueID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReceiverUniqueID), input_name='ReceiverUniqueID')), namespace_, eol_))
        if self.ReceiverCompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceiverCompanyName>%s</%sReceiverCompanyName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReceiverCompanyName), input_name='ReceiverCompanyName')), namespace_, eol_))
        if self.IsDropShip is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsDropShip>%s</%sIsDropShip>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IsDropShip), input_name='IsDropShip')), namespace_, eol_))
        if self.InterchangeControlNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInterchangeControlNumber>%s</%sInterchangeControlNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InterchangeControlNumber), input_name='InterchangeControlNumber')), namespace_, eol_))
        if self.GroupControlIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupControlIdentifier>%s</%sGroupControlIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.GroupControlIdentifier), input_name='GroupControlIdentifier')), namespace_, eol_))
        if self.GroupControlNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupControlNumber>%s</%sGroupControlNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.GroupControlNumber), input_name='GroupControlNumber')), namespace_, eol_))
        if self.DocumentControlIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentControlIdentifier>%s</%sDocumentControlIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DocumentControlIdentifier), input_name='DocumentControlIdentifier')), namespace_, eol_))
        if self.DocumentControlNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentControlNumber>%s</%sDocumentControlNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DocumentControlNumber), input_name='DocumentControlNumber')), namespace_, eol_))
        if self.InterchangeSenderID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInterchangeSenderID>%s</%sInterchangeSenderID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InterchangeSenderID), input_name='InterchangeSenderID')), namespace_, eol_))
        if self.InterchangeReceiverID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInterchangeReceiverID>%s</%sInterchangeReceiverID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InterchangeReceiverID), input_name='InterchangeReceiverID')), namespace_, eol_))
        if self.GroupSenderID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupSenderID>%s</%sGroupSenderID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.GroupSenderID), input_name='GroupSenderID')), namespace_, eol_))
        if self.GroupReceiverID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupReceiverID>%s</%sGroupReceiverID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.GroupReceiverID), input_name='GroupReceiverID')), namespace_, eol_))
        if self.BatchPart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBatchPart>%s</%sBatchPart>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BatchPart), input_name='BatchPart')), namespace_, eol_))
        if self.BatchTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBatchTotal>%s</%sBatchTotal>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BatchTotal), input_name='BatchTotal')), namespace_, eol_))
        if self.BatchID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBatchID>%s</%sBatchID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BatchID), input_name='BatchID')), namespace_, eol_))
        if self.Comments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComments>%s</%sComments>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Comments), input_name='Comments')), namespace_, eol_))
        if self.Validation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValidation>%s</%sValidation>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Validation), input_name='Validation')), namespace_, eol_))
        if self.OrderManagement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderManagement>%s</%sOrderManagement>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OrderManagement), input_name='OrderManagement')), namespace_, eol_))
        if self.Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVersion>%s</%sVersion>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Version), input_name='Version')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SenderUniqueID':
            SenderUniqueID_ = child_.text
            SenderUniqueID_ = self.gds_validate_string(SenderUniqueID_, node, 'SenderUniqueID')
            self.SenderUniqueID = SenderUniqueID_
        elif nodeName_ == 'SenderCompanyName':
            SenderCompanyName_ = child_.text
            SenderCompanyName_ = self.gds_validate_string(SenderCompanyName_, node, 'SenderCompanyName')
            self.SenderCompanyName = SenderCompanyName_
        elif nodeName_ == 'ReceiverUniqueID':
            ReceiverUniqueID_ = child_.text
            ReceiverUniqueID_ = self.gds_validate_string(ReceiverUniqueID_, node, 'ReceiverUniqueID')
            self.ReceiverUniqueID = ReceiverUniqueID_
        elif nodeName_ == 'ReceiverCompanyName':
            ReceiverCompanyName_ = child_.text
            ReceiverCompanyName_ = self.gds_validate_string(ReceiverCompanyName_, node, 'ReceiverCompanyName')
            self.ReceiverCompanyName = ReceiverCompanyName_
        elif nodeName_ == 'IsDropShip':
            IsDropShip_ = child_.text
            IsDropShip_ = self.gds_validate_string(IsDropShip_, node, 'IsDropShip')
            self.IsDropShip = IsDropShip_
        elif nodeName_ == 'InterchangeControlNumber':
            InterchangeControlNumber_ = child_.text
            InterchangeControlNumber_ = self.gds_validate_string(InterchangeControlNumber_, node, 'InterchangeControlNumber')
            self.InterchangeControlNumber = InterchangeControlNumber_
        elif nodeName_ == 'GroupControlIdentifier':
            GroupControlIdentifier_ = child_.text
            GroupControlIdentifier_ = self.gds_validate_string(GroupControlIdentifier_, node, 'GroupControlIdentifier')
            self.GroupControlIdentifier = GroupControlIdentifier_
        elif nodeName_ == 'GroupControlNumber':
            GroupControlNumber_ = child_.text
            GroupControlNumber_ = self.gds_validate_string(GroupControlNumber_, node, 'GroupControlNumber')
            self.GroupControlNumber = GroupControlNumber_
        elif nodeName_ == 'DocumentControlIdentifier':
            DocumentControlIdentifier_ = child_.text
            DocumentControlIdentifier_ = self.gds_validate_string(DocumentControlIdentifier_, node, 'DocumentControlIdentifier')
            self.DocumentControlIdentifier = DocumentControlIdentifier_
        elif nodeName_ == 'DocumentControlNumber':
            DocumentControlNumber_ = child_.text
            DocumentControlNumber_ = self.gds_validate_string(DocumentControlNumber_, node, 'DocumentControlNumber')
            self.DocumentControlNumber = DocumentControlNumber_
        elif nodeName_ == 'InterchangeSenderID':
            InterchangeSenderID_ = child_.text
            InterchangeSenderID_ = self.gds_validate_string(InterchangeSenderID_, node, 'InterchangeSenderID')
            self.InterchangeSenderID = InterchangeSenderID_
        elif nodeName_ == 'InterchangeReceiverID':
            InterchangeReceiverID_ = child_.text
            InterchangeReceiverID_ = self.gds_validate_string(InterchangeReceiverID_, node, 'InterchangeReceiverID')
            self.InterchangeReceiverID = InterchangeReceiverID_
        elif nodeName_ == 'GroupSenderID':
            GroupSenderID_ = child_.text
            GroupSenderID_ = self.gds_validate_string(GroupSenderID_, node, 'GroupSenderID')
            self.GroupSenderID = GroupSenderID_
        elif nodeName_ == 'GroupReceiverID':
            GroupReceiverID_ = child_.text
            GroupReceiverID_ = self.gds_validate_string(GroupReceiverID_, node, 'GroupReceiverID')
            self.GroupReceiverID = GroupReceiverID_
        elif nodeName_ == 'BatchPart':
            BatchPart_ = child_.text
            BatchPart_ = self.gds_validate_string(BatchPart_, node, 'BatchPart')
            self.BatchPart = BatchPart_
        elif nodeName_ == 'BatchTotal':
            BatchTotal_ = child_.text
            BatchTotal_ = self.gds_validate_string(BatchTotal_, node, 'BatchTotal')
            self.BatchTotal = BatchTotal_
        elif nodeName_ == 'BatchID':
            BatchID_ = child_.text
            BatchID_ = self.gds_validate_string(BatchID_, node, 'BatchID')
            self.BatchID = BatchID_
        elif nodeName_ == 'Comments':
            Comments_ = child_.text
            Comments_ = self.gds_validate_string(Comments_, node, 'Comments')
            self.Comments = Comments_
        elif nodeName_ == 'Validation':
            Validation_ = child_.text
            Validation_ = self.gds_validate_string(Validation_, node, 'Validation')
            self.Validation = Validation_
        elif nodeName_ == 'OrderManagement':
            OrderManagement_ = child_.text
            OrderManagement_ = self.gds_validate_string(OrderManagement_, node, 'OrderManagement')
            self.OrderManagement = OrderManagement_
        elif nodeName_ == 'Version':
            Version_ = child_.text
            Version_ = self.gds_validate_string(Version_, node, 'Version')
            self.Version = Version_
# end class MetaType


class OrderManagement(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderManagement)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderManagement.subclass:
            return OrderManagement.subclass(*args_, **kwargs_)
        else:
            return OrderManagement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderManagement', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderManagement')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderManagement', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderManagement'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderManagement', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OrderManagement


class HeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OrderHeader=None, PaymentTerms=None, Date=None, Contact=None, Address=None, FOBRelatedInstruction=None, CarrierInformation=None, Reference=None, Notes=None, Commodity=None, Tax=None, ChargesAllowances=None, MonetaryAmounts=None, QuantityAndWeight=None):
        self.original_tagname_ = None
        self.OrderHeader = OrderHeader
        if PaymentTerms is None:
            self.PaymentTerms = []
        else:
            self.PaymentTerms = PaymentTerms
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        if FOBRelatedInstruction is None:
            self.FOBRelatedInstruction = []
        else:
            self.FOBRelatedInstruction = FOBRelatedInstruction
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if MonetaryAmounts is None:
            self.MonetaryAmounts = []
        else:
            self.MonetaryAmounts = MonetaryAmounts
        if QuantityAndWeight is None:
            self.QuantityAndWeight = []
        else:
            self.QuantityAndWeight = QuantityAndWeight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType.subclass:
            return HeaderType.subclass(*args_, **kwargs_)
        else:
            return HeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OrderHeader(self): return self.OrderHeader
    def set_OrderHeader(self, OrderHeader): self.OrderHeader = OrderHeader
    def get_PaymentTerms(self): return self.PaymentTerms
    def set_PaymentTerms(self, PaymentTerms): self.PaymentTerms = PaymentTerms
    def add_PaymentTerms(self, value): self.PaymentTerms.append(value)
    def insert_PaymentTerms_at(self, index, value): self.PaymentTerms.insert(index, value)
    def replace_PaymentTerms_at(self, index, value): self.PaymentTerms[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_FOBRelatedInstruction(self): return self.FOBRelatedInstruction
    def set_FOBRelatedInstruction(self, FOBRelatedInstruction): self.FOBRelatedInstruction = FOBRelatedInstruction
    def add_FOBRelatedInstruction(self, value): self.FOBRelatedInstruction.append(value)
    def insert_FOBRelatedInstruction_at(self, index, value): self.FOBRelatedInstruction.insert(index, value)
    def replace_FOBRelatedInstruction_at(self, index, value): self.FOBRelatedInstruction[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_MonetaryAmounts(self): return self.MonetaryAmounts
    def set_MonetaryAmounts(self, MonetaryAmounts): self.MonetaryAmounts = MonetaryAmounts
    def add_MonetaryAmounts(self, value): self.MonetaryAmounts.append(value)
    def insert_MonetaryAmounts_at(self, index, value): self.MonetaryAmounts.insert(index, value)
    def replace_MonetaryAmounts_at(self, index, value): self.MonetaryAmounts[index] = value
    def get_QuantityAndWeight(self): return self.QuantityAndWeight
    def set_QuantityAndWeight(self, QuantityAndWeight): self.QuantityAndWeight = QuantityAndWeight
    def add_QuantityAndWeight(self, value): self.QuantityAndWeight.append(value)
    def insert_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight.insert(index, value)
    def replace_QuantityAndWeight_at(self, index, value): self.QuantityAndWeight[index] = value
    def hasContent_(self):
        if (
            self.OrderHeader is not None or
            self.PaymentTerms or
            self.Date or
            self.Contact or
            self.Address or
            self.FOBRelatedInstruction or
            self.CarrierInformation or
            self.Reference or
            self.Notes or
            self.Commodity or
            self.Tax or
            self.ChargesAllowances or
            self.MonetaryAmounts or
            self.QuantityAndWeight
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='HeaderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='HeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrderHeader is not None:
            self.OrderHeader.export(outfile, level, namespace_, name_='OrderHeader', pretty_print=pretty_print)
        for PaymentTerms_ in self.PaymentTerms:
            PaymentTerms_.export(outfile, level, namespace_, name_='PaymentTerms', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        for FOBRelatedInstruction_ in self.FOBRelatedInstruction:
            FOBRelatedInstruction_.export(outfile, level, namespace_, name_='FOBRelatedInstruction', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for MonetaryAmounts_ in self.MonetaryAmounts:
            MonetaryAmounts_.export(outfile, level, namespace_, name_='MonetaryAmounts', pretty_print=pretty_print)
        for QuantityAndWeight_ in self.QuantityAndWeight:
            QuantityAndWeight_.export(outfile, level, namespace_, name_='QuantityAndWeight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OrderHeader':
            obj_ = OrderHeaderType.factory()
            obj_.build(child_)
            self.OrderHeader = obj_
            obj_.original_tagname_ = 'OrderHeader'
        elif nodeName_ == 'PaymentTerms':
            obj_ = PaymentTermsType.factory()
            obj_.build(child_)
            self.PaymentTerms.append(obj_)
            obj_.original_tagname_ = 'PaymentTerms'
        elif nodeName_ == 'Date':
            obj_ = DateType.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Contact':
            obj_ = ContactType.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'FOBRelatedInstruction':
            obj_ = FOBRelatedInstructionType.factory()
            obj_.build(child_)
            self.FOBRelatedInstruction.append(obj_)
            obj_.original_tagname_ = 'FOBRelatedInstruction'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType6.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Tax':
            obj_ = TaxType.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'MonetaryAmounts':
            obj_ = MonetaryAmountsType.factory()
            obj_.build(child_)
            self.MonetaryAmounts.append(obj_)
            obj_.original_tagname_ = 'MonetaryAmounts'
        elif nodeName_ == 'QuantityAndWeight':
            obj_ = QuantityAndWeightType.factory()
            obj_.build(child_)
            self.QuantityAndWeight.append(obj_)
            obj_.original_tagname_ = 'QuantityAndWeight'
# end class HeaderType


class OrderHeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TradingPartnerId=None, PurchaseOrderNumber=None, TsetPurposeCode=None, PurchaseOrderTypeCode=None, POTypeDescription=None, PurchaseOrderDate=None, PurchaseOrderTime=None, ReleaseNumber=None, AcknowledgementNumber=None, AcknowledgementType=None, ShipCompleteCode=None, InternalOrderNumber=None, InternalOrderDate=None, AcknowledgementDate=None, AcknowledgementTime=None, BuyersCurrency=None, SellersCurrency=None, ExchangeRate=None, Department=None, DepartmentDescription=None, Vendor=None, JobNumber=None, Division=None, CustomerAccountNumber=None, CustomerOrderNumber=None, PromotionDealNumber=None, PromotionDealDescription=None, DocumentVersion=None, DocumentRevision=None):
        self.original_tagname_ = None
        self.TradingPartnerId = TradingPartnerId
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.TsetPurposeCode = TsetPurposeCode
        self.PurchaseOrderTypeCode = PurchaseOrderTypeCode
        self.POTypeDescription = POTypeDescription
        self.PurchaseOrderDate = PurchaseOrderDate
        self.PurchaseOrderTime = PurchaseOrderTime
        self.ReleaseNumber = ReleaseNumber
        self.AcknowledgementNumber = AcknowledgementNumber
        self.AcknowledgementType = AcknowledgementType
        self.ShipCompleteCode = ShipCompleteCode
        self.InternalOrderNumber = InternalOrderNumber
        self.InternalOrderDate = InternalOrderDate
        self.AcknowledgementDate = AcknowledgementDate
        self.AcknowledgementTime = AcknowledgementTime
        self.BuyersCurrency = BuyersCurrency
        self.SellersCurrency = SellersCurrency
        self.ExchangeRate = ExchangeRate
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Vendor = Vendor
        self.JobNumber = JobNumber
        self.Division = Division
        self.CustomerAccountNumber = CustomerAccountNumber
        self.CustomerOrderNumber = CustomerOrderNumber
        self.PromotionDealNumber = PromotionDealNumber
        self.PromotionDealDescription = PromotionDealDescription
        self.DocumentVersion = DocumentVersion
        self.DocumentRevision = DocumentRevision
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderHeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderHeaderType.subclass:
            return OrderHeaderType.subclass(*args_, **kwargs_)
        else:
            return OrderHeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TradingPartnerId(self): return self.TradingPartnerId
    def set_TradingPartnerId(self, TradingPartnerId): self.TradingPartnerId = TradingPartnerId
    def get_PurchaseOrderNumber(self): return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber): self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_TsetPurposeCode(self): return self.TsetPurposeCode
    def set_TsetPurposeCode(self, TsetPurposeCode): self.TsetPurposeCode = TsetPurposeCode
    def get_PurchaseOrderTypeCode(self): return self.PurchaseOrderTypeCode
    def set_PurchaseOrderTypeCode(self, PurchaseOrderTypeCode): self.PurchaseOrderTypeCode = PurchaseOrderTypeCode
    def get_POTypeDescription(self): return self.POTypeDescription
    def set_POTypeDescription(self, POTypeDescription): self.POTypeDescription = POTypeDescription
    def get_PurchaseOrderDate(self): return self.PurchaseOrderDate
    def set_PurchaseOrderDate(self, PurchaseOrderDate): self.PurchaseOrderDate = PurchaseOrderDate
    def get_PurchaseOrderTime(self): return self.PurchaseOrderTime
    def set_PurchaseOrderTime(self, PurchaseOrderTime): self.PurchaseOrderTime = PurchaseOrderTime
    def get_ReleaseNumber(self): return self.ReleaseNumber
    def set_ReleaseNumber(self, ReleaseNumber): self.ReleaseNumber = ReleaseNumber
    def get_AcknowledgementNumber(self): return self.AcknowledgementNumber
    def set_AcknowledgementNumber(self, AcknowledgementNumber): self.AcknowledgementNumber = AcknowledgementNumber
    def get_AcknowledgementType(self): return self.AcknowledgementType
    def set_AcknowledgementType(self, AcknowledgementType): self.AcknowledgementType = AcknowledgementType
    def get_ShipCompleteCode(self): return self.ShipCompleteCode
    def set_ShipCompleteCode(self, ShipCompleteCode): self.ShipCompleteCode = ShipCompleteCode
    def get_InternalOrderNumber(self): return self.InternalOrderNumber
    def set_InternalOrderNumber(self, InternalOrderNumber): self.InternalOrderNumber = InternalOrderNumber
    def get_InternalOrderDate(self): return self.InternalOrderDate
    def set_InternalOrderDate(self, InternalOrderDate): self.InternalOrderDate = InternalOrderDate
    def get_AcknowledgementDate(self): return self.AcknowledgementDate
    def set_AcknowledgementDate(self, AcknowledgementDate): self.AcknowledgementDate = AcknowledgementDate
    def get_AcknowledgementTime(self): return self.AcknowledgementTime
    def set_AcknowledgementTime(self, AcknowledgementTime): self.AcknowledgementTime = AcknowledgementTime
    def get_BuyersCurrency(self): return self.BuyersCurrency
    def set_BuyersCurrency(self, BuyersCurrency): self.BuyersCurrency = BuyersCurrency
    def get_SellersCurrency(self): return self.SellersCurrency
    def set_SellersCurrency(self, SellersCurrency): self.SellersCurrency = SellersCurrency
    def get_ExchangeRate(self): return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate): self.ExchangeRate = ExchangeRate
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Vendor(self): return self.Vendor
    def set_Vendor(self, Vendor): self.Vendor = Vendor
    def get_JobNumber(self): return self.JobNumber
    def set_JobNumber(self, JobNumber): self.JobNumber = JobNumber
    def get_Division(self): return self.Division
    def set_Division(self, Division): self.Division = Division
    def get_CustomerAccountNumber(self): return self.CustomerAccountNumber
    def set_CustomerAccountNumber(self, CustomerAccountNumber): self.CustomerAccountNumber = CustomerAccountNumber
    def get_CustomerOrderNumber(self): return self.CustomerOrderNumber
    def set_CustomerOrderNumber(self, CustomerOrderNumber): self.CustomerOrderNumber = CustomerOrderNumber
    def get_PromotionDealNumber(self): return self.PromotionDealNumber
    def set_PromotionDealNumber(self, PromotionDealNumber): self.PromotionDealNumber = PromotionDealNumber
    def get_PromotionDealDescription(self): return self.PromotionDealDescription
    def set_PromotionDealDescription(self, PromotionDealDescription): self.PromotionDealDescription = PromotionDealDescription
    def get_DocumentVersion(self): return self.DocumentVersion
    def set_DocumentVersion(self, DocumentVersion): self.DocumentVersion = DocumentVersion
    def get_DocumentRevision(self): return self.DocumentRevision
    def set_DocumentRevision(self, DocumentRevision): self.DocumentRevision = DocumentRevision
    def hasContent_(self):
        if (
            self.TradingPartnerId is not None or
            self.PurchaseOrderNumber is not None or
            self.TsetPurposeCode is not None or
            self.PurchaseOrderTypeCode is not None or
            self.POTypeDescription is not None or
            self.PurchaseOrderDate is not None or
            self.PurchaseOrderTime is not None or
            self.ReleaseNumber is not None or
            self.AcknowledgementNumber is not None or
            self.AcknowledgementType is not None or
            self.ShipCompleteCode is not None or
            self.InternalOrderNumber is not None or
            self.InternalOrderDate is not None or
            self.AcknowledgementDate is not None or
            self.AcknowledgementTime is not None or
            self.BuyersCurrency is not None or
            self.SellersCurrency is not None or
            self.ExchangeRate is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Vendor is not None or
            self.JobNumber is not None or
            self.Division is not None or
            self.CustomerAccountNumber is not None or
            self.CustomerOrderNumber is not None or
            self.PromotionDealNumber is not None or
            self.PromotionDealDescription is not None or
            self.DocumentVersion is not None or
            self.DocumentRevision is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderHeaderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderHeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderHeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderHeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderHeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TradingPartnerId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradingPartnerId>%s</%sTradingPartnerId>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TradingPartnerId), input_name='TradingPartnerId')), namespace_, eol_))
        if self.PurchaseOrderNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseOrderNumber>%s</%sPurchaseOrderNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderNumber), input_name='PurchaseOrderNumber')), namespace_, eol_))
        if self.TsetPurposeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTsetPurposeCode>%s</%sTsetPurposeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TsetPurposeCode), input_name='TsetPurposeCode')), namespace_, eol_))
        if self.PurchaseOrderTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseOrderTypeCode>%s</%sPurchaseOrderTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderTypeCode), input_name='PurchaseOrderTypeCode')), namespace_, eol_))
        if self.POTypeDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPOTypeDescription>%s</%sPOTypeDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.POTypeDescription), input_name='POTypeDescription')), namespace_, eol_))
        if self.PurchaseOrderDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseOrderDate>%s</%sPurchaseOrderDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderDate), input_name='PurchaseOrderDate')), namespace_, eol_))
        if self.PurchaseOrderTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseOrderTime>%s</%sPurchaseOrderTime>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderTime), input_name='PurchaseOrderTime')), namespace_, eol_))
        if self.ReleaseNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReleaseNumber>%s</%sReleaseNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReleaseNumber), input_name='ReleaseNumber')), namespace_, eol_))
        if self.AcknowledgementNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAcknowledgementNumber>%s</%sAcknowledgementNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AcknowledgementNumber), input_name='AcknowledgementNumber')), namespace_, eol_))
        if self.AcknowledgementType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAcknowledgementType>%s</%sAcknowledgementType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AcknowledgementType), input_name='AcknowledgementType')), namespace_, eol_))
        if self.ShipCompleteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipCompleteCode>%s</%sShipCompleteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ShipCompleteCode), input_name='ShipCompleteCode')), namespace_, eol_))
        if self.InternalOrderNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternalOrderNumber>%s</%sInternalOrderNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InternalOrderNumber), input_name='InternalOrderNumber')), namespace_, eol_))
        if self.InternalOrderDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternalOrderDate>%s</%sInternalOrderDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InternalOrderDate), input_name='InternalOrderDate')), namespace_, eol_))
        if self.AcknowledgementDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAcknowledgementDate>%s</%sAcknowledgementDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AcknowledgementDate), input_name='AcknowledgementDate')), namespace_, eol_))
        if self.AcknowledgementTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAcknowledgementTime>%s</%sAcknowledgementTime>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AcknowledgementTime), input_name='AcknowledgementTime')), namespace_, eol_))
        if self.BuyersCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuyersCurrency>%s</%sBuyersCurrency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BuyersCurrency), input_name='BuyersCurrency')), namespace_, eol_))
        if self.SellersCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellersCurrency>%s</%sSellersCurrency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellersCurrency), input_name='SellersCurrency')), namespace_, eol_))
        if self.ExchangeRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRate>%s</%sExchangeRate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRate), input_name='ExchangeRate')), namespace_, eol_))
        if self.Department is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDepartment>%s</%sDepartment>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Department), input_name='Department')), namespace_, eol_))
        if self.DepartmentDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDepartmentDescription>%s</%sDepartmentDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DepartmentDescription), input_name='DepartmentDescription')), namespace_, eol_))
        if self.Vendor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVendor>%s</%sVendor>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Vendor), input_name='Vendor')), namespace_, eol_))
        if self.JobNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobNumber>%s</%sJobNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JobNumber), input_name='JobNumber')), namespace_, eol_))
        if self.Division is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDivision>%s</%sDivision>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Division), input_name='Division')), namespace_, eol_))
        if self.CustomerAccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerAccountNumber>%s</%sCustomerAccountNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CustomerAccountNumber), input_name='CustomerAccountNumber')), namespace_, eol_))
        if self.CustomerOrderNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerOrderNumber>%s</%sCustomerOrderNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CustomerOrderNumber), input_name='CustomerOrderNumber')), namespace_, eol_))
        if self.PromotionDealNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPromotionDealNumber>%s</%sPromotionDealNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PromotionDealNumber), input_name='PromotionDealNumber')), namespace_, eol_))
        if self.PromotionDealDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPromotionDealDescription>%s</%sPromotionDealDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PromotionDealDescription), input_name='PromotionDealDescription')), namespace_, eol_))
        if self.DocumentVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentVersion>%s</%sDocumentVersion>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DocumentVersion), input_name='DocumentVersion')), namespace_, eol_))
        if self.DocumentRevision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentRevision>%s</%sDocumentRevision>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DocumentRevision), input_name='DocumentRevision')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TradingPartnerId':
            TradingPartnerId_ = child_.text
            TradingPartnerId_ = self.gds_validate_string(TradingPartnerId_, node, 'TradingPartnerId')
            self.TradingPartnerId = TradingPartnerId_
        elif nodeName_ == 'PurchaseOrderNumber':
            PurchaseOrderNumber_ = child_.text
            PurchaseOrderNumber_ = self.gds_validate_string(PurchaseOrderNumber_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = PurchaseOrderNumber_
        elif nodeName_ == 'TsetPurposeCode':
            TsetPurposeCode_ = child_.text
            TsetPurposeCode_ = self.gds_validate_string(TsetPurposeCode_, node, 'TsetPurposeCode')
            self.TsetPurposeCode = TsetPurposeCode_
        elif nodeName_ == 'PurchaseOrderTypeCode':
            PurchaseOrderTypeCode_ = child_.text
            PurchaseOrderTypeCode_ = self.gds_validate_string(PurchaseOrderTypeCode_, node, 'PurchaseOrderTypeCode')
            self.PurchaseOrderTypeCode = PurchaseOrderTypeCode_
        elif nodeName_ == 'POTypeDescription':
            POTypeDescription_ = child_.text
            POTypeDescription_ = self.gds_validate_string(POTypeDescription_, node, 'POTypeDescription')
            self.POTypeDescription = POTypeDescription_
        elif nodeName_ == 'PurchaseOrderDate':
            PurchaseOrderDate_ = child_.text
            PurchaseOrderDate_ = self.gds_validate_string(PurchaseOrderDate_, node, 'PurchaseOrderDate')
            self.PurchaseOrderDate = PurchaseOrderDate_
        elif nodeName_ == 'PurchaseOrderTime':
            PurchaseOrderTime_ = child_.text
            PurchaseOrderTime_ = self.gds_validate_string(PurchaseOrderTime_, node, 'PurchaseOrderTime')
            self.PurchaseOrderTime = PurchaseOrderTime_
        elif nodeName_ == 'ReleaseNumber':
            ReleaseNumber_ = child_.text
            ReleaseNumber_ = self.gds_validate_string(ReleaseNumber_, node, 'ReleaseNumber')
            self.ReleaseNumber = ReleaseNumber_
        elif nodeName_ == 'AcknowledgementNumber':
            AcknowledgementNumber_ = child_.text
            AcknowledgementNumber_ = self.gds_validate_string(AcknowledgementNumber_, node, 'AcknowledgementNumber')
            self.AcknowledgementNumber = AcknowledgementNumber_
        elif nodeName_ == 'AcknowledgementType':
            AcknowledgementType_ = child_.text
            AcknowledgementType_ = self.gds_validate_string(AcknowledgementType_, node, 'AcknowledgementType')
            self.AcknowledgementType = AcknowledgementType_
        elif nodeName_ == 'ShipCompleteCode':
            ShipCompleteCode_ = child_.text
            ShipCompleteCode_ = self.gds_validate_string(ShipCompleteCode_, node, 'ShipCompleteCode')
            self.ShipCompleteCode = ShipCompleteCode_
        elif nodeName_ == 'InternalOrderNumber':
            InternalOrderNumber_ = child_.text
            InternalOrderNumber_ = self.gds_validate_string(InternalOrderNumber_, node, 'InternalOrderNumber')
            self.InternalOrderNumber = InternalOrderNumber_
        elif nodeName_ == 'InternalOrderDate':
            InternalOrderDate_ = child_.text
            InternalOrderDate_ = self.gds_validate_string(InternalOrderDate_, node, 'InternalOrderDate')
            self.InternalOrderDate = InternalOrderDate_
        elif nodeName_ == 'AcknowledgementDate':
            AcknowledgementDate_ = child_.text
            AcknowledgementDate_ = self.gds_validate_string(AcknowledgementDate_, node, 'AcknowledgementDate')
            self.AcknowledgementDate = AcknowledgementDate_
        elif nodeName_ == 'AcknowledgementTime':
            AcknowledgementTime_ = child_.text
            AcknowledgementTime_ = self.gds_validate_string(AcknowledgementTime_, node, 'AcknowledgementTime')
            self.AcknowledgementTime = AcknowledgementTime_
        elif nodeName_ == 'BuyersCurrency':
            BuyersCurrency_ = child_.text
            BuyersCurrency_ = self.gds_validate_string(BuyersCurrency_, node, 'BuyersCurrency')
            self.BuyersCurrency = BuyersCurrency_
        elif nodeName_ == 'SellersCurrency':
            SellersCurrency_ = child_.text
            SellersCurrency_ = self.gds_validate_string(SellersCurrency_, node, 'SellersCurrency')
            self.SellersCurrency = SellersCurrency_
        elif nodeName_ == 'ExchangeRate':
            ExchangeRate_ = child_.text
            ExchangeRate_ = self.gds_validate_string(ExchangeRate_, node, 'ExchangeRate')
            self.ExchangeRate = ExchangeRate_
        elif nodeName_ == 'Department':
            Department_ = child_.text
            Department_ = self.gds_validate_string(Department_, node, 'Department')
            self.Department = Department_
        elif nodeName_ == 'DepartmentDescription':
            DepartmentDescription_ = child_.text
            DepartmentDescription_ = self.gds_validate_string(DepartmentDescription_, node, 'DepartmentDescription')
            self.DepartmentDescription = DepartmentDescription_
        elif nodeName_ == 'Vendor':
            Vendor_ = child_.text
            Vendor_ = self.gds_validate_string(Vendor_, node, 'Vendor')
            self.Vendor = Vendor_
        elif nodeName_ == 'JobNumber':
            JobNumber_ = child_.text
            JobNumber_ = self.gds_validate_string(JobNumber_, node, 'JobNumber')
            self.JobNumber = JobNumber_
        elif nodeName_ == 'Division':
            Division_ = child_.text
            Division_ = self.gds_validate_string(Division_, node, 'Division')
            self.Division = Division_
        elif nodeName_ == 'CustomerAccountNumber':
            CustomerAccountNumber_ = child_.text
            CustomerAccountNumber_ = self.gds_validate_string(CustomerAccountNumber_, node, 'CustomerAccountNumber')
            self.CustomerAccountNumber = CustomerAccountNumber_
        elif nodeName_ == 'CustomerOrderNumber':
            CustomerOrderNumber_ = child_.text
            CustomerOrderNumber_ = self.gds_validate_string(CustomerOrderNumber_, node, 'CustomerOrderNumber')
            self.CustomerOrderNumber = CustomerOrderNumber_
        elif nodeName_ == 'PromotionDealNumber':
            PromotionDealNumber_ = child_.text
            PromotionDealNumber_ = self.gds_validate_string(PromotionDealNumber_, node, 'PromotionDealNumber')
            self.PromotionDealNumber = PromotionDealNumber_
        elif nodeName_ == 'PromotionDealDescription':
            PromotionDealDescription_ = child_.text
            PromotionDealDescription_ = self.gds_validate_string(PromotionDealDescription_, node, 'PromotionDealDescription')
            self.PromotionDealDescription = PromotionDealDescription_
        elif nodeName_ == 'DocumentVersion':
            DocumentVersion_ = child_.text
            DocumentVersion_ = self.gds_validate_string(DocumentVersion_, node, 'DocumentVersion')
            self.DocumentVersion = DocumentVersion_
        elif nodeName_ == 'DocumentRevision':
            DocumentRevision_ = child_.text
            DocumentRevision_ = self.gds_validate_string(DocumentRevision_, node, 'DocumentRevision')
            self.DocumentRevision = DocumentRevision_
# end class OrderHeaderType


class TradingPartnerId(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingPartnerId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingPartnerId.subclass:
            return TradingPartnerId.subclass(*args_, **kwargs_)
        else:
            return TradingPartnerId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TradingPartnerId', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TradingPartnerId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TradingPartnerId', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TradingPartnerId'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TradingPartnerId', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TradingPartnerId


class TsetPurposeCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TsetPurposeCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TsetPurposeCode.subclass:
            return TsetPurposeCode.subclass(*args_, **kwargs_)
        else:
            return TsetPurposeCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TsetPurposeCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TsetPurposeCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TsetPurposeCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TsetPurposeCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TsetPurposeCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TsetPurposeCode


class PurchaseOrderTypeCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PurchaseOrderTypeCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PurchaseOrderTypeCode.subclass:
            return PurchaseOrderTypeCode.subclass(*args_, **kwargs_)
        else:
            return PurchaseOrderTypeCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PurchaseOrderTypeCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PurchaseOrderTypeCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PurchaseOrderTypeCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PurchaseOrderTypeCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PurchaseOrderTypeCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PurchaseOrderTypeCode


class AcknowledgementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AcknowledgementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AcknowledgementType.subclass:
            return AcknowledgementType.subclass(*args_, **kwargs_)
        else:
            return AcknowledgementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AcknowledgementType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AcknowledgementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AcknowledgementType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AcknowledgementType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AcknowledgementType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AcknowledgementType


class ShipCompleteCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipCompleteCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipCompleteCode.subclass:
            return ShipCompleteCode.subclass(*args_, **kwargs_)
        else:
            return ShipCompleteCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipCompleteCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipCompleteCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipCompleteCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipCompleteCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipCompleteCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ShipCompleteCode


class PaymentTermsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TermsType=None, TermsBasisDateCode=None, TermsDiscountPercentage=None, TermsDiscountDate=None, TermsDiscountDueDays=None, TermsNetDueDate=None, TermsNetDueDays=None, TermsDiscountAmount=None, TermsDeferredDueDate=None, TermsDeferredAmountDue=None, PercentOfInvoicePayable=None, TermsDescription=None, TermsDueDay=None, PaymentMethodCode=None, PaymentMethodID=None, Percent=None, TermsStartDate=None, TermsDueDateQual=None, AmountSubjectToDiscount=None):
        self.original_tagname_ = None
        self.TermsType = TermsType
        self.TermsBasisDateCode = TermsBasisDateCode
        self.TermsDiscountPercentage = TermsDiscountPercentage
        self.TermsDiscountDate = TermsDiscountDate
        self.TermsDiscountDueDays = TermsDiscountDueDays
        self.TermsNetDueDate = TermsNetDueDate
        self.TermsNetDueDays = TermsNetDueDays
        self.TermsDiscountAmount = TermsDiscountAmount
        self.TermsDeferredDueDate = TermsDeferredDueDate
        self.TermsDeferredAmountDue = TermsDeferredAmountDue
        self.PercentOfInvoicePayable = PercentOfInvoicePayable
        self.TermsDescription = TermsDescription
        self.TermsDueDay = TermsDueDay
        self.PaymentMethodCode = PaymentMethodCode
        self.PaymentMethodID = PaymentMethodID
        self.Percent = Percent
        self.TermsStartDate = TermsStartDate
        self.TermsDueDateQual = TermsDueDateQual
        self.AmountSubjectToDiscount = AmountSubjectToDiscount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentTermsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentTermsType.subclass:
            return PaymentTermsType.subclass(*args_, **kwargs_)
        else:
            return PaymentTermsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TermsType(self): return self.TermsType
    def set_TermsType(self, TermsType): self.TermsType = TermsType
    def get_TermsBasisDateCode(self): return self.TermsBasisDateCode
    def set_TermsBasisDateCode(self, TermsBasisDateCode): self.TermsBasisDateCode = TermsBasisDateCode
    def get_TermsDiscountPercentage(self): return self.TermsDiscountPercentage
    def set_TermsDiscountPercentage(self, TermsDiscountPercentage): self.TermsDiscountPercentage = TermsDiscountPercentage
    def get_TermsDiscountDate(self): return self.TermsDiscountDate
    def set_TermsDiscountDate(self, TermsDiscountDate): self.TermsDiscountDate = TermsDiscountDate
    def get_TermsDiscountDueDays(self): return self.TermsDiscountDueDays
    def set_TermsDiscountDueDays(self, TermsDiscountDueDays): self.TermsDiscountDueDays = TermsDiscountDueDays
    def get_TermsNetDueDate(self): return self.TermsNetDueDate
    def set_TermsNetDueDate(self, TermsNetDueDate): self.TermsNetDueDate = TermsNetDueDate
    def get_TermsNetDueDays(self): return self.TermsNetDueDays
    def set_TermsNetDueDays(self, TermsNetDueDays): self.TermsNetDueDays = TermsNetDueDays
    def get_TermsDiscountAmount(self): return self.TermsDiscountAmount
    def set_TermsDiscountAmount(self, TermsDiscountAmount): self.TermsDiscountAmount = TermsDiscountAmount
    def get_TermsDeferredDueDate(self): return self.TermsDeferredDueDate
    def set_TermsDeferredDueDate(self, TermsDeferredDueDate): self.TermsDeferredDueDate = TermsDeferredDueDate
    def get_TermsDeferredAmountDue(self): return self.TermsDeferredAmountDue
    def set_TermsDeferredAmountDue(self, TermsDeferredAmountDue): self.TermsDeferredAmountDue = TermsDeferredAmountDue
    def get_PercentOfInvoicePayable(self): return self.PercentOfInvoicePayable
    def set_PercentOfInvoicePayable(self, PercentOfInvoicePayable): self.PercentOfInvoicePayable = PercentOfInvoicePayable
    def get_TermsDescription(self): return self.TermsDescription
    def set_TermsDescription(self, TermsDescription): self.TermsDescription = TermsDescription
    def get_TermsDueDay(self): return self.TermsDueDay
    def set_TermsDueDay(self, TermsDueDay): self.TermsDueDay = TermsDueDay
    def get_PaymentMethodCode(self): return self.PaymentMethodCode
    def set_PaymentMethodCode(self, PaymentMethodCode): self.PaymentMethodCode = PaymentMethodCode
    def get_PaymentMethodID(self): return self.PaymentMethodID
    def set_PaymentMethodID(self, PaymentMethodID): self.PaymentMethodID = PaymentMethodID
    def get_Percent(self): return self.Percent
    def set_Percent(self, Percent): self.Percent = Percent
    def get_TermsStartDate(self): return self.TermsStartDate
    def set_TermsStartDate(self, TermsStartDate): self.TermsStartDate = TermsStartDate
    def get_TermsDueDateQual(self): return self.TermsDueDateQual
    def set_TermsDueDateQual(self, TermsDueDateQual): self.TermsDueDateQual = TermsDueDateQual
    def get_AmountSubjectToDiscount(self): return self.AmountSubjectToDiscount
    def set_AmountSubjectToDiscount(self, AmountSubjectToDiscount): self.AmountSubjectToDiscount = AmountSubjectToDiscount
    def hasContent_(self):
        if (
            self.TermsType is not None or
            self.TermsBasisDateCode is not None or
            self.TermsDiscountPercentage is not None or
            self.TermsDiscountDate is not None or
            self.TermsDiscountDueDays is not None or
            self.TermsNetDueDate is not None or
            self.TermsNetDueDays is not None or
            self.TermsDiscountAmount is not None or
            self.TermsDeferredDueDate is not None or
            self.TermsDeferredAmountDue is not None or
            self.PercentOfInvoicePayable is not None or
            self.TermsDescription is not None or
            self.TermsDueDay is not None or
            self.PaymentMethodCode is not None or
            self.PaymentMethodID is not None or
            self.Percent is not None or
            self.TermsStartDate is not None or
            self.TermsDueDateQual is not None or
            self.AmountSubjectToDiscount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PaymentTermsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentTermsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PaymentTermsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PaymentTermsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PaymentTermsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TermsType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsType>%s</%sTermsType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsType), input_name='TermsType')), namespace_, eol_))
        if self.TermsBasisDateCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsBasisDateCode>%s</%sTermsBasisDateCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsBasisDateCode), input_name='TermsBasisDateCode')), namespace_, eol_))
        if self.TermsDiscountPercentage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsDiscountPercentage>%s</%sTermsDiscountPercentage>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsDiscountPercentage), input_name='TermsDiscountPercentage')), namespace_, eol_))
        if self.TermsDiscountDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsDiscountDate>%s</%sTermsDiscountDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsDiscountDate), input_name='TermsDiscountDate')), namespace_, eol_))
        if self.TermsDiscountDueDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsDiscountDueDays>%s</%sTermsDiscountDueDays>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsDiscountDueDays), input_name='TermsDiscountDueDays')), namespace_, eol_))
        if self.TermsNetDueDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsNetDueDate>%s</%sTermsNetDueDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsNetDueDate), input_name='TermsNetDueDate')), namespace_, eol_))
        if self.TermsNetDueDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsNetDueDays>%s</%sTermsNetDueDays>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsNetDueDays), input_name='TermsNetDueDays')), namespace_, eol_))
        if self.TermsDiscountAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsDiscountAmount>%s</%sTermsDiscountAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsDiscountAmount), input_name='TermsDiscountAmount')), namespace_, eol_))
        if self.TermsDeferredDueDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsDeferredDueDate>%s</%sTermsDeferredDueDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsDeferredDueDate), input_name='TermsDeferredDueDate')), namespace_, eol_))
        if self.TermsDeferredAmountDue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsDeferredAmountDue>%s</%sTermsDeferredAmountDue>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsDeferredAmountDue), input_name='TermsDeferredAmountDue')), namespace_, eol_))
        if self.PercentOfInvoicePayable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentOfInvoicePayable>%s</%sPercentOfInvoicePayable>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PercentOfInvoicePayable), input_name='PercentOfInvoicePayable')), namespace_, eol_))
        if self.TermsDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsDescription>%s</%sTermsDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsDescription), input_name='TermsDescription')), namespace_, eol_))
        if self.TermsDueDay is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsDueDay>%s</%sTermsDueDay>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsDueDay), input_name='TermsDueDay')), namespace_, eol_))
        if self.PaymentMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentMethodCode>%s</%sPaymentMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PaymentMethodCode), input_name='PaymentMethodCode')), namespace_, eol_))
        if self.PaymentMethodID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentMethodID>%s</%sPaymentMethodID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PaymentMethodID), input_name='PaymentMethodID')), namespace_, eol_))
        if self.Percent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercent>%s</%sPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Percent), input_name='Percent')), namespace_, eol_))
        if self.TermsStartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsStartDate>%s</%sTermsStartDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsStartDate), input_name='TermsStartDate')), namespace_, eol_))
        if self.TermsDueDateQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsDueDateQual>%s</%sTermsDueDateQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TermsDueDateQual), input_name='TermsDueDateQual')), namespace_, eol_))
        if self.AmountSubjectToDiscount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmountSubjectToDiscount>%s</%sAmountSubjectToDiscount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AmountSubjectToDiscount), input_name='AmountSubjectToDiscount')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TermsType':
            TermsType_ = child_.text
            TermsType_ = self.gds_validate_string(TermsType_, node, 'TermsType')
            self.TermsType = TermsType_
        elif nodeName_ == 'TermsBasisDateCode':
            TermsBasisDateCode_ = child_.text
            TermsBasisDateCode_ = self.gds_validate_string(TermsBasisDateCode_, node, 'TermsBasisDateCode')
            self.TermsBasisDateCode = TermsBasisDateCode_
        elif nodeName_ == 'TermsDiscountPercentage':
            TermsDiscountPercentage_ = child_.text
            TermsDiscountPercentage_ = self.gds_validate_string(TermsDiscountPercentage_, node, 'TermsDiscountPercentage')
            self.TermsDiscountPercentage = TermsDiscountPercentage_
        elif nodeName_ == 'TermsDiscountDate':
            TermsDiscountDate_ = child_.text
            TermsDiscountDate_ = self.gds_validate_string(TermsDiscountDate_, node, 'TermsDiscountDate')
            self.TermsDiscountDate = TermsDiscountDate_
        elif nodeName_ == 'TermsDiscountDueDays':
            TermsDiscountDueDays_ = child_.text
            TermsDiscountDueDays_ = self.gds_validate_string(TermsDiscountDueDays_, node, 'TermsDiscountDueDays')
            self.TermsDiscountDueDays = TermsDiscountDueDays_
        elif nodeName_ == 'TermsNetDueDate':
            TermsNetDueDate_ = child_.text
            TermsNetDueDate_ = self.gds_validate_string(TermsNetDueDate_, node, 'TermsNetDueDate')
            self.TermsNetDueDate = TermsNetDueDate_
        elif nodeName_ == 'TermsNetDueDays':
            TermsNetDueDays_ = child_.text
            TermsNetDueDays_ = self.gds_validate_string(TermsNetDueDays_, node, 'TermsNetDueDays')
            self.TermsNetDueDays = TermsNetDueDays_
        elif nodeName_ == 'TermsDiscountAmount':
            TermsDiscountAmount_ = child_.text
            TermsDiscountAmount_ = self.gds_validate_string(TermsDiscountAmount_, node, 'TermsDiscountAmount')
            self.TermsDiscountAmount = TermsDiscountAmount_
        elif nodeName_ == 'TermsDeferredDueDate':
            TermsDeferredDueDate_ = child_.text
            TermsDeferredDueDate_ = self.gds_validate_string(TermsDeferredDueDate_, node, 'TermsDeferredDueDate')
            self.TermsDeferredDueDate = TermsDeferredDueDate_
        elif nodeName_ == 'TermsDeferredAmountDue':
            TermsDeferredAmountDue_ = child_.text
            TermsDeferredAmountDue_ = self.gds_validate_string(TermsDeferredAmountDue_, node, 'TermsDeferredAmountDue')
            self.TermsDeferredAmountDue = TermsDeferredAmountDue_
        elif nodeName_ == 'PercentOfInvoicePayable':
            PercentOfInvoicePayable_ = child_.text
            PercentOfInvoicePayable_ = self.gds_validate_string(PercentOfInvoicePayable_, node, 'PercentOfInvoicePayable')
            self.PercentOfInvoicePayable = PercentOfInvoicePayable_
        elif nodeName_ == 'TermsDescription':
            TermsDescription_ = child_.text
            TermsDescription_ = self.gds_validate_string(TermsDescription_, node, 'TermsDescription')
            self.TermsDescription = TermsDescription_
        elif nodeName_ == 'TermsDueDay':
            TermsDueDay_ = child_.text
            TermsDueDay_ = self.gds_validate_string(TermsDueDay_, node, 'TermsDueDay')
            self.TermsDueDay = TermsDueDay_
        elif nodeName_ == 'PaymentMethodCode':
            PaymentMethodCode_ = child_.text
            PaymentMethodCode_ = self.gds_validate_string(PaymentMethodCode_, node, 'PaymentMethodCode')
            self.PaymentMethodCode = PaymentMethodCode_
        elif nodeName_ == 'PaymentMethodID':
            PaymentMethodID_ = child_.text
            PaymentMethodID_ = self.gds_validate_string(PaymentMethodID_, node, 'PaymentMethodID')
            self.PaymentMethodID = PaymentMethodID_
        elif nodeName_ == 'Percent':
            Percent_ = child_.text
            Percent_ = self.gds_validate_string(Percent_, node, 'Percent')
            self.Percent = Percent_
        elif nodeName_ == 'TermsStartDate':
            TermsStartDate_ = child_.text
            TermsStartDate_ = self.gds_validate_string(TermsStartDate_, node, 'TermsStartDate')
            self.TermsStartDate = TermsStartDate_
        elif nodeName_ == 'TermsDueDateQual':
            TermsDueDateQual_ = child_.text
            TermsDueDateQual_ = self.gds_validate_string(TermsDueDateQual_, node, 'TermsDueDateQual')
            self.TermsDueDateQual = TermsDueDateQual_
        elif nodeName_ == 'AmountSubjectToDiscount':
            AmountSubjectToDiscount_ = child_.text
            AmountSubjectToDiscount_ = self.gds_validate_string(AmountSubjectToDiscount_, node, 'AmountSubjectToDiscount')
            self.AmountSubjectToDiscount = AmountSubjectToDiscount_
# end class PaymentTermsType


class TermsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TermsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TermsType.subclass:
            return TermsType.subclass(*args_, **kwargs_)
        else:
            return TermsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TermsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TermsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TermsType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TermsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TermsType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TermsType


class TermsBasisDateCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TermsBasisDateCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TermsBasisDateCode.subclass:
            return TermsBasisDateCode.subclass(*args_, **kwargs_)
        else:
            return TermsBasisDateCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TermsBasisDateCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TermsBasisDateCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TermsBasisDateCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TermsBasisDateCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TermsBasisDateCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TermsBasisDateCode


class PaymentMethodCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentMethodCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentMethodCode.subclass:
            return PaymentMethodCode.subclass(*args_, **kwargs_)
        else:
            return PaymentMethodCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PaymentMethodCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentMethodCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PaymentMethodCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PaymentMethodCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PaymentMethodCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PaymentMethodCode


class TermsDueDateQual(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TermsDueDateQual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TermsDueDateQual.subclass:
            return TermsDueDateQual.subclass(*args_, **kwargs_)
        else:
            return TermsDueDateQual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TermsDueDateQual', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TermsDueDateQual')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TermsDueDateQual', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TermsDueDateQual'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TermsDueDateQual', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TermsDueDateQual


class DateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType.subclass:
            return DateType.subclass(*args_, **kwargs_)
        else:
            return DateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        if self.DateTimePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimePeriod>%s</%sDateTimePeriod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimePeriod), input_name='DateTimePeriod')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'DateTimePeriod':
            DateTimePeriod_ = child_.text
            DateTimePeriod_ = self.gds_validate_string(DateTimePeriod_, node, 'DateTimePeriod')
            self.DateTimePeriod = DateTimePeriod_
# end class DateType


class DateTimeQualifier1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateTimeQualifier1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateTimeQualifier1.subclass:
            return DateTimeQualifier1.subclass(*args_, **kwargs_)
        else:
            return DateTimeQualifier1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateTimeQualifier1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateTimeQualifier1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateTimeQualifier1', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateTimeQualifier1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateTimeQualifier1', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DateTimeQualifier1


class ContactType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType.subclass:
            return ContactType.subclass(*args_, **kwargs_)
        else:
            return ContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactName>%s</%sContactName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), namespace_, eol_))
        if self.PrimaryPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryPhone>%s</%sPrimaryPhone>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryPhone), input_name='PrimaryPhone')), namespace_, eol_))
        if self.PrimaryFax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryFax>%s</%sPrimaryFax>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryFax), input_name='PrimaryFax')), namespace_, eol_))
        if self.PrimaryEmail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryEmail>%s</%sPrimaryEmail>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryEmail), input_name='PrimaryEmail')), namespace_, eol_))
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactReference>%s</%sContactReference>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactReference), input_name='ContactReference')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
        elif nodeName_ == 'ContactName':
            ContactName_ = child_.text
            ContactName_ = self.gds_validate_string(ContactName_, node, 'ContactName')
            self.ContactName = ContactName_
        elif nodeName_ == 'PrimaryPhone':
            PrimaryPhone_ = child_.text
            PrimaryPhone_ = self.gds_validate_string(PrimaryPhone_, node, 'PrimaryPhone')
            self.PrimaryPhone = PrimaryPhone_
        elif nodeName_ == 'PrimaryFax':
            PrimaryFax_ = child_.text
            PrimaryFax_ = self.gds_validate_string(PrimaryFax_, node, 'PrimaryFax')
            self.PrimaryFax = PrimaryFax_
        elif nodeName_ == 'PrimaryEmail':
            PrimaryEmail_ = child_.text
            PrimaryEmail_ = self.gds_validate_string(PrimaryEmail_, node, 'PrimaryEmail')
            self.PrimaryEmail = PrimaryEmail_
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            ContactReference_ = child_.text
            ContactReference_ = self.gds_validate_string(ContactReference_, node, 'ContactReference')
            self.ContactReference = ContactReference_
# end class ContactType


class ContactTypeCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactTypeCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactTypeCode.subclass:
            return ContactTypeCode.subclass(*args_, **kwargs_)
        else:
            return ContactTypeCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactTypeCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactTypeCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactTypeCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactTypeCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactTypeCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ContactTypeCode


class AdditionalContactDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType.subclass:
            return AdditionalContactDetailsType.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactID>%s</%sContactID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactID), input_name='ContactID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
        elif nodeName_ == 'ContactID':
            ContactID_ = child_.text
            ContactID_ = self.gds_validate_string(ContactID_, node, 'ContactID')
            self.ContactID = ContactID_
# end class AdditionalContactDetailsType


class ContactQual(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactQual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactQual.subclass:
            return ContactQual.subclass(*args_, **kwargs_)
        else:
            return ContactQual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactQual', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactQual')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactQual', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactQual'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactQual', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ContactQual


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLocationNumber>%s</%sAddressLocationNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressLocationNumber), input_name='AddressLocationNumber')), namespace_, eol_))
        if self.AddressName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressName>%s</%sAddressName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressName), input_name='AddressName')), namespace_, eol_))
        if self.AddressAlternateName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName>%s</%sAddressAlternateName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName), input_name='AddressAlternateName')), namespace_, eol_))
        if self.AddressAlternateName2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName2>%s</%sAddressAlternateName2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName2), input_name='AddressAlternateName2')), namespace_, eol_))
        if self.Address1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress1>%s</%sAddress1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address1), input_name='Address1')), namespace_, eol_))
        if self.Address2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress2>%s</%sAddress2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address2), input_name='Address2')), namespace_, eol_))
        if self.Address3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress3>%s</%sAddress3>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address3), input_name='Address3')), namespace_, eol_))
        if self.Address4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress4>%s</%sAddress4>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address4), input_name='Address4')), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespace_, eol_))
        if self.LocationID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationID>%s</%sLocationID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationID), input_name='LocationID')), namespace_, eol_))
        if self.CountrySubDivision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountrySubDivision>%s</%sCountrySubDivision>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CountrySubDivision), input_name='CountrySubDivision')), namespace_, eol_))
        if self.AddressTaxIdNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxIdNumber>%s</%sAddressTaxIdNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxIdNumber), input_name='AddressTaxIdNumber')), namespace_, eol_))
        if self.AddressTaxExemptNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxExemptNumber>%s</%sAddressTaxExemptNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxExemptNumber), input_name='AddressTaxExemptNumber')), namespace_, eol_))
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
        elif nodeName_ == 'AddressLocationNumber':
            AddressLocationNumber_ = child_.text
            AddressLocationNumber_ = self.gds_validate_string(AddressLocationNumber_, node, 'AddressLocationNumber')
            self.AddressLocationNumber = AddressLocationNumber_
        elif nodeName_ == 'AddressName':
            AddressName_ = child_.text
            AddressName_ = self.gds_validate_string(AddressName_, node, 'AddressName')
            self.AddressName = AddressName_
        elif nodeName_ == 'AddressAlternateName':
            AddressAlternateName_ = child_.text
            AddressAlternateName_ = self.gds_validate_string(AddressAlternateName_, node, 'AddressAlternateName')
            self.AddressAlternateName = AddressAlternateName_
        elif nodeName_ == 'AddressAlternateName2':
            AddressAlternateName2_ = child_.text
            AddressAlternateName2_ = self.gds_validate_string(AddressAlternateName2_, node, 'AddressAlternateName2')
            self.AddressAlternateName2 = AddressAlternateName2_
        elif nodeName_ == 'Address1':
            Address1_ = child_.text
            Address1_ = self.gds_validate_string(Address1_, node, 'Address1')
            self.Address1 = Address1_
        elif nodeName_ == 'Address2':
            Address2_ = child_.text
            Address2_ = self.gds_validate_string(Address2_, node, 'Address2')
            self.Address2 = Address2_
        elif nodeName_ == 'Address3':
            Address3_ = child_.text
            Address3_ = self.gds_validate_string(Address3_, node, 'Address3')
            self.Address3 = Address3_
        elif nodeName_ == 'Address4':
            Address4_ = child_.text
            Address4_ = self.gds_validate_string(Address4_, node, 'Address4')
            self.Address4 = Address4_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'LocationID':
            LocationID_ = child_.text
            LocationID_ = self.gds_validate_string(LocationID_, node, 'LocationID')
            self.LocationID = LocationID_
        elif nodeName_ == 'CountrySubDivision':
            CountrySubDivision_ = child_.text
            CountrySubDivision_ = self.gds_validate_string(CountrySubDivision_, node, 'CountrySubDivision')
            self.CountrySubDivision = CountrySubDivision_
        elif nodeName_ == 'AddressTaxIdNumber':
            AddressTaxIdNumber_ = child_.text
            AddressTaxIdNumber_ = self.gds_validate_string(AddressTaxIdNumber_, node, 'AddressTaxIdNumber')
            self.AddressTaxIdNumber = AddressTaxIdNumber_
        elif nodeName_ == 'AddressTaxExemptNumber':
            AddressTaxExemptNumber_ = child_.text
            AddressTaxExemptNumber_ = self.gds_validate_string(AddressTaxExemptNumber_, node, 'AddressTaxExemptNumber')
            self.AddressTaxExemptNumber = AddressTaxExemptNumber_
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType1.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType3.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType


class AddressTypeCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressTypeCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressTypeCode.subclass:
            return AddressTypeCode.subclass(*args_, **kwargs_)
        else:
            return AddressTypeCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressTypeCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressTypeCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressTypeCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressTypeCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressTypeCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AddressTypeCode


class LocationCodeQualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationCodeQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationCodeQualifier.subclass:
            return LocationCodeQualifier.subclass(*args_, **kwargs_)
        else:
            return LocationCodeQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LocationCodeQualifier', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationCodeQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LocationCodeQualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LocationCodeQualifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LocationCodeQualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LocationCodeQualifier


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType


class ReferenceQual(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceQual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceQual.subclass:
            return ReferenceQual.subclass(*args_, **kwargs_)
        else:
            return ReferenceQual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceQual', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceQual')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceQual', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceQual'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceQual', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ReferenceQual


class ReferenceIDsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType.subclass:
            return ReferenceIDsType.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
# end class ReferenceIDsType


class ContactType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType1.subclass:
            return ContactType1.subclass(*args_, **kwargs_)
        else:
            return ContactType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactName>%s</%sContactName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), namespace_, eol_))
        if self.PrimaryPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryPhone>%s</%sPrimaryPhone>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryPhone), input_name='PrimaryPhone')), namespace_, eol_))
        if self.PrimaryFax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryFax>%s</%sPrimaryFax>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryFax), input_name='PrimaryFax')), namespace_, eol_))
        if self.PrimaryEmail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryEmail>%s</%sPrimaryEmail>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryEmail), input_name='PrimaryEmail')), namespace_, eol_))
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactReference>%s</%sContactReference>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactReference), input_name='ContactReference')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
        elif nodeName_ == 'ContactName':
            ContactName_ = child_.text
            ContactName_ = self.gds_validate_string(ContactName_, node, 'ContactName')
            self.ContactName = ContactName_
        elif nodeName_ == 'PrimaryPhone':
            PrimaryPhone_ = child_.text
            PrimaryPhone_ = self.gds_validate_string(PrimaryPhone_, node, 'PrimaryPhone')
            self.PrimaryPhone = PrimaryPhone_
        elif nodeName_ == 'PrimaryFax':
            PrimaryFax_ = child_.text
            PrimaryFax_ = self.gds_validate_string(PrimaryFax_, node, 'PrimaryFax')
            self.PrimaryFax = PrimaryFax_
        elif nodeName_ == 'PrimaryEmail':
            PrimaryEmail_ = child_.text
            PrimaryEmail_ = self.gds_validate_string(PrimaryEmail_, node, 'PrimaryEmail')
            self.PrimaryEmail = PrimaryEmail_
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType2.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            ContactReference_ = child_.text
            ContactReference_ = self.gds_validate_string(ContactReference_, node, 'ContactReference')
            self.ContactReference = ContactReference_
# end class ContactType1


class AdditionalContactDetailsType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType2.subclass:
            return AdditionalContactDetailsType2.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactID>%s</%sContactID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactID), input_name='ContactID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
        elif nodeName_ == 'ContactID':
            ContactID_ = child_.text
            ContactID_ = self.gds_validate_string(ContactID_, node, 'ContactID')
            self.ContactID = ContactID_
# end class AdditionalContactDetailsType2


class DateType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType3.subclass:
            return DateType3.subclass(*args_, **kwargs_)
        else:
            return DateType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        if self.DateTimePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimePeriod>%s</%sDateTimePeriod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimePeriod), input_name='DateTimePeriod')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'DateTimePeriod':
            DateTimePeriod_ = child_.text
            DateTimePeriod_ = self.gds_validate_string(DateTimePeriod_, node, 'DateTimePeriod')
            self.DateTimePeriod = DateTimePeriod_
# end class DateType3


class FOBRelatedInstructionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FOBPayCode=None, FOBLocationQualifier=None, FOBLocationDescription=None, FOBTitlePassageCode=None, FOBTitlePassageLocation=None, TransportationTermsQualifierCode=None, TransportationTermsCode=None, RiskOfLossCode=None, Description=None):
        self.original_tagname_ = None
        self.FOBPayCode = FOBPayCode
        self.FOBLocationQualifier = FOBLocationQualifier
        self.FOBLocationDescription = FOBLocationDescription
        self.FOBTitlePassageCode = FOBTitlePassageCode
        self.FOBTitlePassageLocation = FOBTitlePassageLocation
        self.TransportationTermsQualifierCode = TransportationTermsQualifierCode
        self.TransportationTermsCode = TransportationTermsCode
        self.RiskOfLossCode = RiskOfLossCode
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FOBRelatedInstructionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FOBRelatedInstructionType.subclass:
            return FOBRelatedInstructionType.subclass(*args_, **kwargs_)
        else:
            return FOBRelatedInstructionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FOBPayCode(self): return self.FOBPayCode
    def set_FOBPayCode(self, FOBPayCode): self.FOBPayCode = FOBPayCode
    def get_FOBLocationQualifier(self): return self.FOBLocationQualifier
    def set_FOBLocationQualifier(self, FOBLocationQualifier): self.FOBLocationQualifier = FOBLocationQualifier
    def get_FOBLocationDescription(self): return self.FOBLocationDescription
    def set_FOBLocationDescription(self, FOBLocationDescription): self.FOBLocationDescription = FOBLocationDescription
    def get_FOBTitlePassageCode(self): return self.FOBTitlePassageCode
    def set_FOBTitlePassageCode(self, FOBTitlePassageCode): self.FOBTitlePassageCode = FOBTitlePassageCode
    def get_FOBTitlePassageLocation(self): return self.FOBTitlePassageLocation
    def set_FOBTitlePassageLocation(self, FOBTitlePassageLocation): self.FOBTitlePassageLocation = FOBTitlePassageLocation
    def get_TransportationTermsQualifierCode(self): return self.TransportationTermsQualifierCode
    def set_TransportationTermsQualifierCode(self, TransportationTermsQualifierCode): self.TransportationTermsQualifierCode = TransportationTermsQualifierCode
    def get_TransportationTermsCode(self): return self.TransportationTermsCode
    def set_TransportationTermsCode(self, TransportationTermsCode): self.TransportationTermsCode = TransportationTermsCode
    def get_RiskOfLossCode(self): return self.RiskOfLossCode
    def set_RiskOfLossCode(self, RiskOfLossCode): self.RiskOfLossCode = RiskOfLossCode
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.FOBPayCode is not None or
            self.FOBLocationQualifier is not None or
            self.FOBLocationDescription is not None or
            self.FOBTitlePassageCode is not None or
            self.FOBTitlePassageLocation is not None or
            self.TransportationTermsQualifierCode is not None or
            self.TransportationTermsCode is not None or
            self.RiskOfLossCode is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FOBRelatedInstructionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FOBRelatedInstructionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FOBRelatedInstructionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FOBPayCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBPayCode>%s</%sFOBPayCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBPayCode), input_name='FOBPayCode')), namespace_, eol_))
        if self.FOBLocationQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBLocationQualifier>%s</%sFOBLocationQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBLocationQualifier), input_name='FOBLocationQualifier')), namespace_, eol_))
        if self.FOBLocationDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBLocationDescription>%s</%sFOBLocationDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBLocationDescription), input_name='FOBLocationDescription')), namespace_, eol_))
        if self.FOBTitlePassageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBTitlePassageCode>%s</%sFOBTitlePassageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBTitlePassageCode), input_name='FOBTitlePassageCode')), namespace_, eol_))
        if self.FOBTitlePassageLocation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBTitlePassageLocation>%s</%sFOBTitlePassageLocation>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBTitlePassageLocation), input_name='FOBTitlePassageLocation')), namespace_, eol_))
        if self.TransportationTermsQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportationTermsQualifierCode>%s</%sTransportationTermsQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransportationTermsQualifierCode), input_name='TransportationTermsQualifierCode')), namespace_, eol_))
        if self.TransportationTermsCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportationTermsCode>%s</%sTransportationTermsCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransportationTermsCode), input_name='TransportationTermsCode')), namespace_, eol_))
        if self.RiskOfLossCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiskOfLossCode>%s</%sRiskOfLossCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RiskOfLossCode), input_name='RiskOfLossCode')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FOBPayCode':
            FOBPayCode_ = child_.text
            FOBPayCode_ = self.gds_validate_string(FOBPayCode_, node, 'FOBPayCode')
            self.FOBPayCode = FOBPayCode_
        elif nodeName_ == 'FOBLocationQualifier':
            FOBLocationQualifier_ = child_.text
            FOBLocationQualifier_ = self.gds_validate_string(FOBLocationQualifier_, node, 'FOBLocationQualifier')
            self.FOBLocationQualifier = FOBLocationQualifier_
        elif nodeName_ == 'FOBLocationDescription':
            FOBLocationDescription_ = child_.text
            FOBLocationDescription_ = self.gds_validate_string(FOBLocationDescription_, node, 'FOBLocationDescription')
            self.FOBLocationDescription = FOBLocationDescription_
        elif nodeName_ == 'FOBTitlePassageCode':
            FOBTitlePassageCode_ = child_.text
            FOBTitlePassageCode_ = self.gds_validate_string(FOBTitlePassageCode_, node, 'FOBTitlePassageCode')
            self.FOBTitlePassageCode = FOBTitlePassageCode_
        elif nodeName_ == 'FOBTitlePassageLocation':
            FOBTitlePassageLocation_ = child_.text
            FOBTitlePassageLocation_ = self.gds_validate_string(FOBTitlePassageLocation_, node, 'FOBTitlePassageLocation')
            self.FOBTitlePassageLocation = FOBTitlePassageLocation_
        elif nodeName_ == 'TransportationTermsQualifierCode':
            TransportationTermsQualifierCode_ = child_.text
            TransportationTermsQualifierCode_ = self.gds_validate_string(TransportationTermsQualifierCode_, node, 'TransportationTermsQualifierCode')
            self.TransportationTermsQualifierCode = TransportationTermsQualifierCode_
        elif nodeName_ == 'TransportationTermsCode':
            TransportationTermsCode_ = child_.text
            TransportationTermsCode_ = self.gds_validate_string(TransportationTermsCode_, node, 'TransportationTermsCode')
            self.TransportationTermsCode = TransportationTermsCode_
        elif nodeName_ == 'RiskOfLossCode':
            RiskOfLossCode_ = child_.text
            RiskOfLossCode_ = self.gds_validate_string(RiskOfLossCode_, node, 'RiskOfLossCode')
            self.RiskOfLossCode = RiskOfLossCode_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class FOBRelatedInstructionType


class FOBPayCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FOBPayCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FOBPayCode.subclass:
            return FOBPayCode.subclass(*args_, **kwargs_)
        else:
            return FOBPayCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FOBPayCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FOBPayCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FOBPayCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FOBPayCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FOBPayCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FOBPayCode


class FOBLocationQualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FOBLocationQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FOBLocationQualifier.subclass:
            return FOBLocationQualifier.subclass(*args_, **kwargs_)
        else:
            return FOBLocationQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FOBLocationQualifier', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FOBLocationQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FOBLocationQualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FOBLocationQualifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FOBLocationQualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FOBLocationQualifier


class FOBTitlePassageCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FOBTitlePassageCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FOBTitlePassageCode.subclass:
            return FOBTitlePassageCode.subclass(*args_, **kwargs_)
        else:
            return FOBTitlePassageCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FOBTitlePassageCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FOBTitlePassageCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FOBTitlePassageCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FOBTitlePassageCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FOBTitlePassageCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FOBTitlePassageCode


class TransportationTermsQualifierCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportationTermsQualifierCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportationTermsQualifierCode.subclass:
            return TransportationTermsQualifierCode.subclass(*args_, **kwargs_)
        else:
            return TransportationTermsQualifierCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TransportationTermsQualifierCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransportationTermsQualifierCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TransportationTermsQualifierCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransportationTermsQualifierCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransportationTermsQualifierCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TransportationTermsQualifierCode


class RiskOfLossCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RiskOfLossCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RiskOfLossCode.subclass:
            return RiskOfLossCode.subclass(*args_, **kwargs_)
        else:
            return RiskOfLossCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RiskOfLossCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RiskOfLossCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RiskOfLossCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RiskOfLossCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RiskOfLossCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RiskOfLossCode


class CarrierInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType.subclass:
            return CarrierInformationType.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierAlphaCode>%s</%sCarrierAlphaCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierAlphaCode), input_name='CarrierAlphaCode')), namespace_, eol_))
        if self.CarrierRouting is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierRouting>%s</%sCarrierRouting>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierRouting), input_name='CarrierRouting')), namespace_, eol_))
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierEquipmentInitial>%s</%sCarrierEquipmentInitial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierEquipmentInitial), input_name='CarrierEquipmentInitial')), namespace_, eol_))
        if self.CarrierEquipmentNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierEquipmentNumber>%s</%sCarrierEquipmentNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierEquipmentNumber), input_name='CarrierEquipmentNumber')), namespace_, eol_))
        if self.EquipmentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentType>%s</%sEquipmentType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentType), input_name='EquipmentType')), namespace_, eol_))
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealNumber>%s</%sSealNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealNumber), input_name='SealNumber')), namespace_, eol_))
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTime>%s</%sTransitTime>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTime), input_name='TransitTime')), namespace_, eol_))
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
        elif nodeName_ == 'CarrierAlphaCode':
            CarrierAlphaCode_ = child_.text
            CarrierAlphaCode_ = self.gds_validate_string(CarrierAlphaCode_, node, 'CarrierAlphaCode')
            self.CarrierAlphaCode = CarrierAlphaCode_
        elif nodeName_ == 'CarrierRouting':
            CarrierRouting_ = child_.text
            CarrierRouting_ = self.gds_validate_string(CarrierRouting_, node, 'CarrierRouting')
            self.CarrierRouting = CarrierRouting_
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
        elif nodeName_ == 'CarrierEquipmentInitial':
            CarrierEquipmentInitial_ = child_.text
            CarrierEquipmentInitial_ = self.gds_validate_string(CarrierEquipmentInitial_, node, 'CarrierEquipmentInitial')
            self.CarrierEquipmentInitial = CarrierEquipmentInitial_
        elif nodeName_ == 'CarrierEquipmentNumber':
            CarrierEquipmentNumber_ = child_.text
            CarrierEquipmentNumber_ = self.gds_validate_string(CarrierEquipmentNumber_, node, 'CarrierEquipmentNumber')
            self.CarrierEquipmentNumber = CarrierEquipmentNumber_
        elif nodeName_ == 'EquipmentType':
            EquipmentType_ = child_.text
            EquipmentType_ = self.gds_validate_string(EquipmentType_, node, 'EquipmentType')
            self.EquipmentType = EquipmentType_
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
        elif nodeName_ == 'SealNumber':
            SealNumber_ = child_.text
            SealNumber_ = self.gds_validate_string(SealNumber_, node, 'SealNumber')
            self.SealNumber = SealNumber_
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
        elif nodeName_ == 'TransitTime':
            TransitTime_ = child_.text
            TransitTime_ = self.gds_validate_string(TransitTime_, node, 'TransitTime')
            self.TransitTime = TransitTime_
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType4.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType


class StatusCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StatusCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StatusCode.subclass:
            return StatusCode.subclass(*args_, **kwargs_)
        else:
            return StatusCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StatusCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StatusCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StatusCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StatusCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StatusCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class StatusCode


class CarrierTransMethodCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierTransMethodCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierTransMethodCode.subclass:
            return CarrierTransMethodCode.subclass(*args_, **kwargs_)
        else:
            return CarrierTransMethodCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierTransMethodCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierTransMethodCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierTransMethodCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierTransMethodCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierTransMethodCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CarrierTransMethodCode


class EquipmentDescriptionCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EquipmentDescriptionCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EquipmentDescriptionCode.subclass:
            return EquipmentDescriptionCode.subclass(*args_, **kwargs_)
        else:
            return EquipmentDescriptionCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='EquipmentDescriptionCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EquipmentDescriptionCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='EquipmentDescriptionCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EquipmentDescriptionCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='EquipmentDescriptionCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EquipmentDescriptionCode


class SealStatusCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SealStatusCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SealStatusCode.subclass:
            return SealStatusCode.subclass(*args_, **kwargs_)
        else:
            return SealStatusCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SealStatusCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SealStatusCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SealStatusCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SealStatusCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SealStatusCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SealStatusCode


class OwnershipCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OwnershipCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OwnershipCode.subclass:
            return OwnershipCode.subclass(*args_, **kwargs_)
        else:
            return OwnershipCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OwnershipCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OwnershipCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OwnershipCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OwnershipCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OwnershipCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OwnershipCode


class RoutingSequenceCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RoutingSequenceCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RoutingSequenceCode.subclass:
            return RoutingSequenceCode.subclass(*args_, **kwargs_)
        else:
            return RoutingSequenceCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RoutingSequenceCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RoutingSequenceCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RoutingSequenceCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RoutingSequenceCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RoutingSequenceCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RoutingSequenceCode


class TransitDirectionCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransitDirectionCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransitDirectionCode.subclass:
            return TransitDirectionCode.subclass(*args_, **kwargs_)
        else:
            return TransitDirectionCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TransitDirectionCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransitDirectionCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TransitDirectionCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransitDirectionCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransitDirectionCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TransitDirectionCode


class TransitTimeQual(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransitTimeQual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransitTimeQual.subclass:
            return TransitTimeQual.subclass(*args_, **kwargs_)
        else:
            return TransitTimeQual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TransitTimeQual', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransitTimeQual')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TransitTimeQual', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransitTimeQual'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransitTimeQual', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TransitTimeQual


class ServiceLevelCodesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType.subclass:
            return ServiceLevelCodesType.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
# end class ServiceLevelCodesType


class ServiceLevelCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCode.subclass:
            return ServiceLevelCode.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ServiceLevelCode


class AddressType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType4.subclass:
            return AddressType4.subclass(*args_, **kwargs_)
        else:
            return AddressType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLocationNumber>%s</%sAddressLocationNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressLocationNumber), input_name='AddressLocationNumber')), namespace_, eol_))
        if self.AddressName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressName>%s</%sAddressName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressName), input_name='AddressName')), namespace_, eol_))
        if self.AddressAlternateName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName>%s</%sAddressAlternateName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName), input_name='AddressAlternateName')), namespace_, eol_))
        if self.AddressAlternateName2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName2>%s</%sAddressAlternateName2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName2), input_name='AddressAlternateName2')), namespace_, eol_))
        if self.Address1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress1>%s</%sAddress1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address1), input_name='Address1')), namespace_, eol_))
        if self.Address2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress2>%s</%sAddress2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address2), input_name='Address2')), namespace_, eol_))
        if self.Address3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress3>%s</%sAddress3>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address3), input_name='Address3')), namespace_, eol_))
        if self.Address4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress4>%s</%sAddress4>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address4), input_name='Address4')), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespace_, eol_))
        if self.LocationID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationID>%s</%sLocationID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationID), input_name='LocationID')), namespace_, eol_))
        if self.CountrySubDivision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountrySubDivision>%s</%sCountrySubDivision>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CountrySubDivision), input_name='CountrySubDivision')), namespace_, eol_))
        if self.AddressTaxIdNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxIdNumber>%s</%sAddressTaxIdNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxIdNumber), input_name='AddressTaxIdNumber')), namespace_, eol_))
        if self.AddressTaxExemptNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxExemptNumber>%s</%sAddressTaxExemptNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxExemptNumber), input_name='AddressTaxExemptNumber')), namespace_, eol_))
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
        elif nodeName_ == 'AddressLocationNumber':
            AddressLocationNumber_ = child_.text
            AddressLocationNumber_ = self.gds_validate_string(AddressLocationNumber_, node, 'AddressLocationNumber')
            self.AddressLocationNumber = AddressLocationNumber_
        elif nodeName_ == 'AddressName':
            AddressName_ = child_.text
            AddressName_ = self.gds_validate_string(AddressName_, node, 'AddressName')
            self.AddressName = AddressName_
        elif nodeName_ == 'AddressAlternateName':
            AddressAlternateName_ = child_.text
            AddressAlternateName_ = self.gds_validate_string(AddressAlternateName_, node, 'AddressAlternateName')
            self.AddressAlternateName = AddressAlternateName_
        elif nodeName_ == 'AddressAlternateName2':
            AddressAlternateName2_ = child_.text
            AddressAlternateName2_ = self.gds_validate_string(AddressAlternateName2_, node, 'AddressAlternateName2')
            self.AddressAlternateName2 = AddressAlternateName2_
        elif nodeName_ == 'Address1':
            Address1_ = child_.text
            Address1_ = self.gds_validate_string(Address1_, node, 'Address1')
            self.Address1 = Address1_
        elif nodeName_ == 'Address2':
            Address2_ = child_.text
            Address2_ = self.gds_validate_string(Address2_, node, 'Address2')
            self.Address2 = Address2_
        elif nodeName_ == 'Address3':
            Address3_ = child_.text
            Address3_ = self.gds_validate_string(Address3_, node, 'Address3')
            self.Address3 = Address3_
        elif nodeName_ == 'Address4':
            Address4_ = child_.text
            Address4_ = self.gds_validate_string(Address4_, node, 'Address4')
            self.Address4 = Address4_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'LocationID':
            LocationID_ = child_.text
            LocationID_ = self.gds_validate_string(LocationID_, node, 'LocationID')
            self.LocationID = LocationID_
        elif nodeName_ == 'CountrySubDivision':
            CountrySubDivision_ = child_.text
            CountrySubDivision_ = self.gds_validate_string(CountrySubDivision_, node, 'CountrySubDivision')
            self.CountrySubDivision = CountrySubDivision_
        elif nodeName_ == 'AddressTaxIdNumber':
            AddressTaxIdNumber_ = child_.text
            AddressTaxIdNumber_ = self.gds_validate_string(AddressTaxIdNumber_, node, 'AddressTaxIdNumber')
            self.AddressTaxIdNumber = AddressTaxIdNumber_
        elif nodeName_ == 'AddressTaxExemptNumber':
            AddressTaxExemptNumber_ = child_.text
            AddressTaxExemptNumber_ = self.gds_validate_string(AddressTaxExemptNumber_, node, 'AddressTaxExemptNumber')
            self.AddressTaxExemptNumber = AddressTaxExemptNumber_
        elif nodeName_ == 'Date':
            obj_ = DateType5.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType4


class DateType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType5.subclass:
            return DateType5.subclass(*args_, **kwargs_)
        else:
            return DateType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType5', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType5', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType5'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        if self.DateTimePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimePeriod>%s</%sDateTimePeriod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimePeriod), input_name='DateTimePeriod')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'DateTimePeriod':
            DateTimePeriod_ = child_.text
            DateTimePeriod_ = self.gds_validate_string(DateTimePeriod_, node, 'DateTimePeriod')
            self.DateTimePeriod = DateTimePeriod_
# end class DateType5


class ReferenceType6(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType6.subclass:
            return ReferenceType6.subclass(*args_, **kwargs_)
        else:
            return ReferenceType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType6', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType6'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType7.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType6


class ReferenceIDsType7(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType7)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType7.subclass:
            return ReferenceIDsType7.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType7', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType7')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType7', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType7'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
# end class ReferenceIDsType7


class NotesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType.subclass:
            return NotesType.subclass(*args_, **kwargs_)
        else:
            return NotesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteInformationField>%s</%sNoteInformationField>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteInformationField), input_name='NoteInformationField')), namespace_, eol_))
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespace_, eol_))
        if self.NoteFormatCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteFormatCode>%s</%sNoteFormatCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteFormatCode), input_name='NoteFormatCode')), namespace_, eol_))
        if self.NoteFunctionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteFunctionCode>%s</%sNoteFunctionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteFunctionCode), input_name='NoteFunctionCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
        elif nodeName_ == 'NoteInformationField':
            NoteInformationField_ = child_.text
            NoteInformationField_ = self.gds_validate_string(NoteInformationField_, node, 'NoteInformationField')
            self.NoteInformationField = NoteInformationField_
        elif nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'NoteFormatCode':
            NoteFormatCode_ = child_.text
            NoteFormatCode_ = self.gds_validate_string(NoteFormatCode_, node, 'NoteFormatCode')
            self.NoteFormatCode = NoteFormatCode_
        elif nodeName_ == 'NoteFunctionCode':
            NoteFunctionCode_ = child_.text
            NoteFunctionCode_ = self.gds_validate_string(NoteFunctionCode_, node, 'NoteFunctionCode')
            self.NoteFunctionCode = NoteFunctionCode_
# end class NotesType


class NoteCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NoteCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NoteCode.subclass:
            return NoteCode.subclass(*args_, **kwargs_)
        else:
            return NoteCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NoteCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NoteCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NoteCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NoteCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NoteCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class NoteCode


class CommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType.subclass:
            return CommodityType.subclass(*args_, **kwargs_)
        else:
            return CommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCode>%s</%sCommodityCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCode), input_name='CommodityCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
        elif nodeName_ == 'CommodityCode':
            CommodityCode_ = child_.text
            CommodityCode_ = self.gds_validate_string(CommodityCode_, node, 'CommodityCode')
            self.CommodityCode = CommodityCode_
# end class CommodityType


class CommodityCodeQualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityCodeQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityCodeQualifier.subclass:
            return CommodityCodeQualifier.subclass(*args_, **kwargs_)
        else:
            return CommodityCodeQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityCodeQualifier', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityCodeQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityCodeQualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityCodeQualifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityCodeQualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CommodityCodeQualifier


class TaxType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType.subclass:
            return TaxType.subclass(*args_, **kwargs_)
        else:
            return TaxType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxAmount>%s</%sTaxAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxAmount), input_name='TaxAmount')), namespace_, eol_))
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercent>%s</%sTaxPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercent), input_name='TaxPercent')), namespace_, eol_))
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionCode>%s</%sJurisdictionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionCode), input_name='JurisdictionCode')), namespace_, eol_))
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPctDollarBasis>%s</%sPctDollarBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PctDollarBasis), input_name='PctDollarBasis')), namespace_, eol_))
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxID>%s</%sTaxID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxID), input_name='TaxID')), namespace_, eol_))
        if self.AssignedID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignedID>%s</%sAssignedID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AssignedID), input_name='AssignedID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
        elif nodeName_ == 'TaxAmount':
            TaxAmount_ = child_.text
            TaxAmount_ = self.gds_validate_string(TaxAmount_, node, 'TaxAmount')
            self.TaxAmount = TaxAmount_
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
        elif nodeName_ == 'TaxPercent':
            TaxPercent_ = child_.text
            TaxPercent_ = self.gds_validate_string(TaxPercent_, node, 'TaxPercent')
            self.TaxPercent = TaxPercent_
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
        elif nodeName_ == 'JurisdictionCode':
            JurisdictionCode_ = child_.text
            JurisdictionCode_ = self.gds_validate_string(JurisdictionCode_, node, 'JurisdictionCode')
            self.JurisdictionCode = JurisdictionCode_
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
        elif nodeName_ == 'PctDollarBasis':
            PctDollarBasis_ = child_.text
            PctDollarBasis_ = self.gds_validate_string(PctDollarBasis_, node, 'PctDollarBasis')
            self.PctDollarBasis = PctDollarBasis_
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
        elif nodeName_ == 'TaxID':
            TaxID_ = child_.text
            TaxID_ = self.gds_validate_string(TaxID_, node, 'TaxID')
            self.TaxID = TaxID_
        elif nodeName_ == 'AssignedID':
            AssignedID_ = child_.text
            AssignedID_ = self.gds_validate_string(AssignedID_, node, 'AssignedID')
            self.AssignedID = AssignedID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TaxType


class TaxTypeCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxTypeCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxTypeCode.subclass:
            return TaxTypeCode.subclass(*args_, **kwargs_)
        else:
            return TaxTypeCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxTypeCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxTypeCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxTypeCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxTypeCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxTypeCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TaxTypeCode


class TaxPercentQual(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxPercentQual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxPercentQual.subclass:
            return TaxPercentQual.subclass(*args_, **kwargs_)
        else:
            return TaxPercentQual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxPercentQual', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxPercentQual')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxPercentQual', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxPercentQual'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxPercentQual', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TaxPercentQual


class JurisdictionQual(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, JurisdictionQual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if JurisdictionQual.subclass:
            return JurisdictionQual.subclass(*args_, **kwargs_)
        else:
            return JurisdictionQual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='JurisdictionQual', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JurisdictionQual')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='JurisdictionQual', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JurisdictionQual'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='JurisdictionQual', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class JurisdictionQual


class TaxExemptCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxExemptCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxExemptCode.subclass:
            return TaxExemptCode.subclass(*args_, **kwargs_)
        else:
            return TaxExemptCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxExemptCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxExemptCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxExemptCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxExemptCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxExemptCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TaxExemptCode


class RelationshipCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RelationshipCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RelationshipCode.subclass:
            return RelationshipCode.subclass(*args_, **kwargs_)
        else:
            return RelationshipCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RelationshipCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RelationshipCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RelationshipCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RelationshipCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RelationshipCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RelationshipCode


class TaxHandlingCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxHandlingCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxHandlingCode.subclass:
            return TaxHandlingCode.subclass(*args_, **kwargs_)
        else:
            return TaxHandlingCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxHandlingCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxHandlingCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxHandlingCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxHandlingCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxHandlingCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TaxHandlingCode


class ChargesAllowancesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType.subclass:
            return ChargesAllowancesType.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgency>%s</%sAllowChrgAgency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgency), input_name='AllowChrgAgency')), namespace_, eol_))
        if self.AllowChrgAmt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAmt>%s</%sAllowChrgAmt>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAmt), input_name='AllowChrgAmt')), namespace_, eol_))
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercent>%s</%sAllowChrgPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercent), input_name='AllowChrgPercent')), namespace_, eol_))
        if self.PercentDollarBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentDollarBasis>%s</%sPercentDollarBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PercentDollarBasis), input_name='PercentDollarBasis')), namespace_, eol_))
        if self.AllowChrgRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgRate>%s</%sAllowChrgRate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgRate), input_name='AllowChrgRate')), namespace_, eol_))
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQty>%s</%sAllowChrgQty>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQty), input_name='AllowChrgQty')), namespace_, eol_))
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceIdentification>%s</%sReferenceIdentification>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceIdentification), input_name='ReferenceIdentification')), namespace_, eol_))
        if self.AllowChrgHandlingDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingDescription>%s</%sAllowChrgHandlingDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingDescription), input_name='AllowChrgHandlingDescription')), namespace_, eol_))
        if self.OptionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptionNumber>%s</%sOptionNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OptionNumber), input_name='OptionNumber')), namespace_, eol_))
        if self.ExceptionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExceptionNumber>%s</%sExceptionNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ExceptionNumber), input_name='ExceptionNumber')), namespace_, eol_))
        if self.AllowChrgQty2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQty2>%s</%sAllowChrgQty2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQty2), input_name='AllowChrgQty2')), namespace_, eol_))
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespace_, eol_))
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
        elif nodeName_ == 'AllowChrgAgency':
            AllowChrgAgency_ = child_.text
            AllowChrgAgency_ = self.gds_validate_string(AllowChrgAgency_, node, 'AllowChrgAgency')
            self.AllowChrgAgency = AllowChrgAgency_
        elif nodeName_ == 'AllowChrgAmt':
            AllowChrgAmt_ = child_.text
            AllowChrgAmt_ = self.gds_validate_string(AllowChrgAmt_, node, 'AllowChrgAmt')
            self.AllowChrgAmt = AllowChrgAmt_
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
        elif nodeName_ == 'AllowChrgPercent':
            AllowChrgPercent_ = child_.text
            AllowChrgPercent_ = self.gds_validate_string(AllowChrgPercent_, node, 'AllowChrgPercent')
            self.AllowChrgPercent = AllowChrgPercent_
        elif nodeName_ == 'PercentDollarBasis':
            PercentDollarBasis_ = child_.text
            PercentDollarBasis_ = self.gds_validate_string(PercentDollarBasis_, node, 'PercentDollarBasis')
            self.PercentDollarBasis = PercentDollarBasis_
        elif nodeName_ == 'AllowChrgRate':
            AllowChrgRate_ = child_.text
            AllowChrgRate_ = self.gds_validate_string(AllowChrgRate_, node, 'AllowChrgRate')
            self.AllowChrgRate = AllowChrgRate_
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
        elif nodeName_ == 'AllowChrgQty':
            AllowChrgQty_ = child_.text
            AllowChrgQty_ = self.gds_validate_string(AllowChrgQty_, node, 'AllowChrgQty')
            self.AllowChrgQty = AllowChrgQty_
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
        elif nodeName_ == 'ReferenceIdentification':
            ReferenceIdentification_ = child_.text
            ReferenceIdentification_ = self.gds_validate_string(ReferenceIdentification_, node, 'ReferenceIdentification')
            self.ReferenceIdentification = ReferenceIdentification_
        elif nodeName_ == 'AllowChrgHandlingDescription':
            AllowChrgHandlingDescription_ = child_.text
            AllowChrgHandlingDescription_ = self.gds_validate_string(AllowChrgHandlingDescription_, node, 'AllowChrgHandlingDescription')
            self.AllowChrgHandlingDescription = AllowChrgHandlingDescription_
        elif nodeName_ == 'OptionNumber':
            OptionNumber_ = child_.text
            OptionNumber_ = self.gds_validate_string(OptionNumber_, node, 'OptionNumber')
            self.OptionNumber = OptionNumber_
        elif nodeName_ == 'ExceptionNumber':
            ExceptionNumber_ = child_.text
            ExceptionNumber_ = self.gds_validate_string(ExceptionNumber_, node, 'ExceptionNumber')
            self.ExceptionNumber = ExceptionNumber_
        elif nodeName_ == 'AllowChrgQty2':
            AllowChrgQty2_ = child_.text
            AllowChrgQty2_ = self.gds_validate_string(AllowChrgQty2_, node, 'AllowChrgQty2')
            self.AllowChrgQty2 = AllowChrgQty2_
        elif nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'Tax':
            obj_ = TaxType8.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType


class AllowChrgIndicator(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AllowChrgIndicator)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AllowChrgIndicator.subclass:
            return AllowChrgIndicator.subclass(*args_, **kwargs_)
        else:
            return AllowChrgIndicator(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllowChrgIndicator', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllowChrgIndicator')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllowChrgIndicator', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllowChrgIndicator'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AllowChrgIndicator', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AllowChrgIndicator


class AllowChrgCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AllowChrgCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AllowChrgCode.subclass:
            return AllowChrgCode.subclass(*args_, **kwargs_)
        else:
            return AllowChrgCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllowChrgCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllowChrgCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllowChrgCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllowChrgCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AllowChrgCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AllowChrgCode


class AllowChrgAgencyCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AllowChrgAgencyCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AllowChrgAgencyCode.subclass:
            return AllowChrgAgencyCode.subclass(*args_, **kwargs_)
        else:
            return AllowChrgAgencyCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllowChrgAgencyCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllowChrgAgencyCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllowChrgAgencyCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllowChrgAgencyCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AllowChrgAgencyCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AllowChrgAgencyCode


class AllowChrgPercentQual(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AllowChrgPercentQual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AllowChrgPercentQual.subclass:
            return AllowChrgPercentQual.subclass(*args_, **kwargs_)
        else:
            return AllowChrgPercentQual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllowChrgPercentQual', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllowChrgPercentQual')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllowChrgPercentQual', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllowChrgPercentQual'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AllowChrgPercentQual', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AllowChrgPercentQual


class AllowChrgQtyUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AllowChrgQtyUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AllowChrgQtyUOM.subclass:
            return AllowChrgQtyUOM.subclass(*args_, **kwargs_)
        else:
            return AllowChrgQtyUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllowChrgQtyUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllowChrgQtyUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllowChrgQtyUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllowChrgQtyUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AllowChrgQtyUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AllowChrgQtyUOM


class AllowChrgHandlingCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AllowChrgHandlingCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AllowChrgHandlingCode.subclass:
            return AllowChrgHandlingCode.subclass(*args_, **kwargs_)
        else:
            return AllowChrgHandlingCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllowChrgHandlingCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllowChrgHandlingCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllowChrgHandlingCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllowChrgHandlingCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AllowChrgHandlingCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AllowChrgHandlingCode


class TaxType8(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType8)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType8.subclass:
            return TaxType8.subclass(*args_, **kwargs_)
        else:
            return TaxType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType8', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType8', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType8'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxAmount>%s</%sTaxAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxAmount), input_name='TaxAmount')), namespace_, eol_))
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercent>%s</%sTaxPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercent), input_name='TaxPercent')), namespace_, eol_))
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionCode>%s</%sJurisdictionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionCode), input_name='JurisdictionCode')), namespace_, eol_))
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPctDollarBasis>%s</%sPctDollarBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PctDollarBasis), input_name='PctDollarBasis')), namespace_, eol_))
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxID>%s</%sTaxID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxID), input_name='TaxID')), namespace_, eol_))
        if self.AssignedID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignedID>%s</%sAssignedID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AssignedID), input_name='AssignedID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
        elif nodeName_ == 'TaxAmount':
            TaxAmount_ = child_.text
            TaxAmount_ = self.gds_validate_string(TaxAmount_, node, 'TaxAmount')
            self.TaxAmount = TaxAmount_
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
        elif nodeName_ == 'TaxPercent':
            TaxPercent_ = child_.text
            TaxPercent_ = self.gds_validate_string(TaxPercent_, node, 'TaxPercent')
            self.TaxPercent = TaxPercent_
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
        elif nodeName_ == 'JurisdictionCode':
            JurisdictionCode_ = child_.text
            JurisdictionCode_ = self.gds_validate_string(JurisdictionCode_, node, 'JurisdictionCode')
            self.JurisdictionCode = JurisdictionCode_
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
        elif nodeName_ == 'PctDollarBasis':
            PctDollarBasis_ = child_.text
            PctDollarBasis_ = self.gds_validate_string(PctDollarBasis_, node, 'PctDollarBasis')
            self.PctDollarBasis = PctDollarBasis_
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
        elif nodeName_ == 'TaxID':
            TaxID_ = child_.text
            TaxID_ = self.gds_validate_string(TaxID_, node, 'TaxID')
            self.TaxID = TaxID_
        elif nodeName_ == 'AssignedID':
            AssignedID_ = child_.text
            AssignedID_ = self.gds_validate_string(AssignedID_, node, 'AssignedID')
            self.AssignedID = AssignedID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TaxType8


class MonetaryAmountsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MonetaryAmountCode=None, MonetaryAmount=None, CreditDebitFlag=None):
        self.original_tagname_ = None
        self.MonetaryAmountCode = MonetaryAmountCode
        self.MonetaryAmount = MonetaryAmount
        self.CreditDebitFlag = CreditDebitFlag
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MonetaryAmountsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MonetaryAmountsType.subclass:
            return MonetaryAmountsType.subclass(*args_, **kwargs_)
        else:
            return MonetaryAmountsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MonetaryAmountCode(self): return self.MonetaryAmountCode
    def set_MonetaryAmountCode(self, MonetaryAmountCode): self.MonetaryAmountCode = MonetaryAmountCode
    def get_MonetaryAmount(self): return self.MonetaryAmount
    def set_MonetaryAmount(self, MonetaryAmount): self.MonetaryAmount = MonetaryAmount
    def get_CreditDebitFlag(self): return self.CreditDebitFlag
    def set_CreditDebitFlag(self, CreditDebitFlag): self.CreditDebitFlag = CreditDebitFlag
    def hasContent_(self):
        if (
            self.MonetaryAmountCode is not None or
            self.MonetaryAmount is not None or
            self.CreditDebitFlag is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MonetaryAmountsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MonetaryAmountsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MonetaryAmountsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MonetaryAmountsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MonetaryAmountsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryAmountCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryAmountCode>%s</%sMonetaryAmountCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryAmountCode), input_name='MonetaryAmountCode')), namespace_, eol_))
        if self.MonetaryAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryAmount>%s</%sMonetaryAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryAmount), input_name='MonetaryAmount')), namespace_, eol_))
        if self.CreditDebitFlag is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditDebitFlag>%s</%sCreditDebitFlag>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CreditDebitFlag), input_name='CreditDebitFlag')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MonetaryAmountCode':
            MonetaryAmountCode_ = child_.text
            MonetaryAmountCode_ = self.gds_validate_string(MonetaryAmountCode_, node, 'MonetaryAmountCode')
            self.MonetaryAmountCode = MonetaryAmountCode_
        elif nodeName_ == 'MonetaryAmount':
            MonetaryAmount_ = child_.text
            MonetaryAmount_ = self.gds_validate_string(MonetaryAmount_, node, 'MonetaryAmount')
            self.MonetaryAmount = MonetaryAmount_
        elif nodeName_ == 'CreditDebitFlag':
            CreditDebitFlag_ = child_.text
            CreditDebitFlag_ = self.gds_validate_string(CreditDebitFlag_, node, 'CreditDebitFlag')
            self.CreditDebitFlag = CreditDebitFlag_
# end class MonetaryAmountsType


class MonetaryAmountCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MonetaryAmountCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MonetaryAmountCode.subclass:
            return MonetaryAmountCode.subclass(*args_, **kwargs_)
        else:
            return MonetaryAmountCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MonetaryAmountCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MonetaryAmountCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MonetaryAmountCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MonetaryAmountCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MonetaryAmountCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MonetaryAmountCode


class CreditDebitFlag(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreditDebitFlag)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditDebitFlag.subclass:
            return CreditDebitFlag.subclass(*args_, **kwargs_)
        else:
            return CreditDebitFlag(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CreditDebitFlag', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditDebitFlag')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CreditDebitFlag', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditDebitFlag'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditDebitFlag', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CreditDebitFlag


class QuantityAndWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackingMedium=None, PackingMaterial=None, LadingQuantity=None, LadingDescription=None, WeightQualifier=None, Weight=None, WeightUOM=None, Volume=None, VolumeUOM=None, PalletExchangeCode=None):
        self.original_tagname_ = None
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.LadingQuantity = LadingQuantity
        self.LadingDescription = LadingDescription
        self.WeightQualifier = WeightQualifier
        self.Weight = Weight
        self.WeightUOM = WeightUOM
        self.Volume = Volume
        self.VolumeUOM = VolumeUOM
        self.PalletExchangeCode = PalletExchangeCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityAndWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityAndWeightType.subclass:
            return QuantityAndWeightType.subclass(*args_, **kwargs_)
        else:
            return QuantityAndWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LadingQuantity(self): return self.LadingQuantity
    def set_LadingQuantity(self, LadingQuantity): self.LadingQuantity = LadingQuantity
    def get_LadingDescription(self): return self.LadingDescription
    def set_LadingDescription(self, LadingDescription): self.LadingDescription = LadingDescription
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_WeightUOM(self): return self.WeightUOM
    def set_WeightUOM(self, WeightUOM): self.WeightUOM = WeightUOM
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_VolumeUOM(self): return self.VolumeUOM
    def set_VolumeUOM(self, VolumeUOM): self.VolumeUOM = VolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def hasContent_(self):
        if (
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LadingQuantity is not None or
            self.LadingDescription is not None or
            self.WeightQualifier is not None or
            self.Weight is not None or
            self.WeightUOM is not None or
            self.Volume is not None or
            self.VolumeUOM is not None or
            self.PalletExchangeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityAndWeightType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityAndWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityAndWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityAndWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityAndWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.LadingQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLadingQuantity>%s</%sLadingQuantity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LadingQuantity), input_name='LadingQuantity')), namespace_, eol_))
        if self.LadingDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLadingDescription>%s</%sLadingDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LadingDescription), input_name='LadingDescription')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), namespace_, eol_))
        if self.WeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightUOM>%s</%sWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightUOM), input_name='WeightUOM')), namespace_, eol_))
        if self.Volume is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolume>%s</%sVolume>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Volume), input_name='Volume')), namespace_, eol_))
        if self.VolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeUOM>%s</%sVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VolumeUOM), input_name='VolumeUOM')), namespace_, eol_))
        if self.PalletExchangeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletExchangeCode>%s</%sPalletExchangeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PalletExchangeCode), input_name='PalletExchangeCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
        elif nodeName_ == 'LadingQuantity':
            LadingQuantity_ = child_.text
            LadingQuantity_ = self.gds_validate_string(LadingQuantity_, node, 'LadingQuantity')
            self.LadingQuantity = LadingQuantity_
        elif nodeName_ == 'LadingDescription':
            LadingDescription_ = child_.text
            LadingDescription_ = self.gds_validate_string(LadingDescription_, node, 'LadingDescription')
            self.LadingDescription = LadingDescription_
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
        elif nodeName_ == 'WeightUOM':
            WeightUOM_ = child_.text
            WeightUOM_ = self.gds_validate_string(WeightUOM_, node, 'WeightUOM')
            self.WeightUOM = WeightUOM_
        elif nodeName_ == 'Volume':
            Volume_ = child_.text
            Volume_ = self.gds_validate_string(Volume_, node, 'Volume')
            self.Volume = Volume_
        elif nodeName_ == 'VolumeUOM':
            VolumeUOM_ = child_.text
            VolumeUOM_ = self.gds_validate_string(VolumeUOM_, node, 'VolumeUOM')
            self.VolumeUOM = VolumeUOM_
        elif nodeName_ == 'PalletExchangeCode':
            PalletExchangeCode_ = child_.text
            PalletExchangeCode_ = self.gds_validate_string(PalletExchangeCode_, node, 'PalletExchangeCode')
            self.PalletExchangeCode = PalletExchangeCode_
# end class QuantityAndWeightType


class PackingMedium(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingMedium)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingMedium.subclass:
            return PackingMedium.subclass(*args_, **kwargs_)
        else:
            return PackingMedium(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackingMedium', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackingMedium')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackingMedium', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackingMedium'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackingMedium', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PackingMedium


class PackingMaterial(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingMaterial)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingMaterial.subclass:
            return PackingMaterial.subclass(*args_, **kwargs_)
        else:
            return PackingMaterial(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackingMaterial', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackingMaterial')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackingMaterial', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackingMaterial'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackingMaterial', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PackingMaterial


class WeightQualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeightQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeightQualifier.subclass:
            return WeightQualifier.subclass(*args_, **kwargs_)
        else:
            return WeightQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='WeightQualifier', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeightQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='WeightQualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='WeightQualifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='WeightQualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class WeightQualifier


class WeightUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeightUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeightUOM.subclass:
            return WeightUOM.subclass(*args_, **kwargs_)
        else:
            return WeightUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='WeightUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeightUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='WeightUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='WeightUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='WeightUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class WeightUOM


class VolumeUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VolumeUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VolumeUOM.subclass:
            return VolumeUOM.subclass(*args_, **kwargs_)
        else:
            return VolumeUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='VolumeUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VolumeUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='VolumeUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VolumeUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='VolumeUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class VolumeUOM


class PalletExchangeCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletExchangeCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletExchangeCode.subclass:
            return PalletExchangeCode.subclass(*args_, **kwargs_)
        else:
            return PalletExchangeCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PalletExchangeCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletExchangeCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PalletExchangeCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PalletExchangeCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PalletExchangeCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PalletExchangeCode


class LineItemsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineItem=None):
        self.original_tagname_ = None
        if LineItem is None:
            self.LineItem = []
        else:
            self.LineItem = LineItem
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LineItemsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LineItemsType.subclass:
            return LineItemsType.subclass(*args_, **kwargs_)
        else:
            return LineItemsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineItem(self): return self.LineItem
    def set_LineItem(self, LineItem): self.LineItem = LineItem
    def add_LineItem(self, value): self.LineItem.append(value)
    def insert_LineItem_at(self, index, value): self.LineItem.insert(index, value)
    def replace_LineItem_at(self, index, value): self.LineItem[index] = value
    def hasContent_(self):
        if (
            self.LineItem
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LineItemsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LineItemsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LineItemsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LineItemsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LineItemsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LineItem_ in self.LineItem:
            LineItem_.export(outfile, level, namespace_, name_='LineItem', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineItem':
            obj_ = LineItemType.factory()
            obj_.build(child_)
            self.LineItem.append(obj_)
            obj_.original_tagname_ = 'LineItem'
# end class LineItemsType


class LineItemType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OrderLine=None, LineItemAcknowledgement=None, Date=None, Measurements=None, PriceInformation=None, ProductOrItemDescription=None, MasterItemAttribute=None, PhysicalDetails=None, Reference=None, Notes=None, Commodity=None, Address=None, Sublines=None, QuantitiesSchedulesLocations=None, Tax=None, ChargesAllowances=None, FOBRelatedInstruction=None, CarrierInformation=None):
        self.original_tagname_ = None
        self.OrderLine = OrderLine
        if LineItemAcknowledgement is None:
            self.LineItemAcknowledgement = []
        else:
            self.LineItemAcknowledgement = LineItemAcknowledgement
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if MasterItemAttribute is None:
            self.MasterItemAttribute = []
        else:
            self.MasterItemAttribute = MasterItemAttribute
        if PhysicalDetails is None:
            self.PhysicalDetails = []
        else:
            self.PhysicalDetails = PhysicalDetails
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        self.Sublines = Sublines
        if QuantitiesSchedulesLocations is None:
            self.QuantitiesSchedulesLocations = []
        else:
            self.QuantitiesSchedulesLocations = QuantitiesSchedulesLocations
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if FOBRelatedInstruction is None:
            self.FOBRelatedInstruction = []
        else:
            self.FOBRelatedInstruction = FOBRelatedInstruction
        if CarrierInformation is None:
            self.CarrierInformation = []
        else:
            self.CarrierInformation = CarrierInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LineItemType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LineItemType.subclass:
            return LineItemType.subclass(*args_, **kwargs_)
        else:
            return LineItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OrderLine(self): return self.OrderLine
    def set_OrderLine(self, OrderLine): self.OrderLine = OrderLine
    def get_LineItemAcknowledgement(self): return self.LineItemAcknowledgement
    def set_LineItemAcknowledgement(self, LineItemAcknowledgement): self.LineItemAcknowledgement = LineItemAcknowledgement
    def add_LineItemAcknowledgement(self, value): self.LineItemAcknowledgement.append(value)
    def insert_LineItemAcknowledgement_at(self, index, value): self.LineItemAcknowledgement.insert(index, value)
    def replace_LineItemAcknowledgement_at(self, index, value): self.LineItemAcknowledgement[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def add_MasterItemAttribute(self, value): self.MasterItemAttribute.append(value)
    def insert_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute.insert(index, value)
    def replace_MasterItemAttribute_at(self, index, value): self.MasterItemAttribute[index] = value
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def add_PhysicalDetails(self, value): self.PhysicalDetails.append(value)
    def insert_PhysicalDetails_at(self, index, value): self.PhysicalDetails.insert(index, value)
    def replace_PhysicalDetails_at(self, index, value): self.PhysicalDetails[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Sublines(self): return self.Sublines
    def set_Sublines(self, Sublines): self.Sublines = Sublines
    def get_QuantitiesSchedulesLocations(self): return self.QuantitiesSchedulesLocations
    def set_QuantitiesSchedulesLocations(self, QuantitiesSchedulesLocations): self.QuantitiesSchedulesLocations = QuantitiesSchedulesLocations
    def add_QuantitiesSchedulesLocations(self, value): self.QuantitiesSchedulesLocations.append(value)
    def insert_QuantitiesSchedulesLocations_at(self, index, value): self.QuantitiesSchedulesLocations.insert(index, value)
    def replace_QuantitiesSchedulesLocations_at(self, index, value): self.QuantitiesSchedulesLocations[index] = value
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_FOBRelatedInstruction(self): return self.FOBRelatedInstruction
    def set_FOBRelatedInstruction(self, FOBRelatedInstruction): self.FOBRelatedInstruction = FOBRelatedInstruction
    def add_FOBRelatedInstruction(self, value): self.FOBRelatedInstruction.append(value)
    def insert_FOBRelatedInstruction_at(self, index, value): self.FOBRelatedInstruction.insert(index, value)
    def replace_FOBRelatedInstruction_at(self, index, value): self.FOBRelatedInstruction[index] = value
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def add_CarrierInformation(self, value): self.CarrierInformation.append(value)
    def insert_CarrierInformation_at(self, index, value): self.CarrierInformation.insert(index, value)
    def replace_CarrierInformation_at(self, index, value): self.CarrierInformation[index] = value
    def hasContent_(self):
        if (
            self.OrderLine is not None or
            self.LineItemAcknowledgement or
            self.Date or
            self.Measurements or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.MasterItemAttribute or
            self.PhysicalDetails or
            self.Reference or
            self.Notes or
            self.Commodity or
            self.Address or
            self.Sublines is not None or
            self.QuantitiesSchedulesLocations or
            self.Tax or
            self.ChargesAllowances or
            self.FOBRelatedInstruction or
            self.CarrierInformation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LineItemType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LineItemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LineItemType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LineItemType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LineItemType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrderLine is not None:
            self.OrderLine.export(outfile, level, namespace_, name_='OrderLine', pretty_print=pretty_print)
        for LineItemAcknowledgement_ in self.LineItemAcknowledgement:
            LineItemAcknowledgement_.export(outfile, level, namespace_, name_='LineItemAcknowledgement', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for MasterItemAttribute_ in self.MasterItemAttribute:
            MasterItemAttribute_.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        for PhysicalDetails_ in self.PhysicalDetails:
            PhysicalDetails_.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Sublines is not None:
            self.Sublines.export(outfile, level, namespace_, name_='Sublines', pretty_print=pretty_print)
        for QuantitiesSchedulesLocations_ in self.QuantitiesSchedulesLocations:
            QuantitiesSchedulesLocations_.export(outfile, level, namespace_, name_='QuantitiesSchedulesLocations', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for FOBRelatedInstruction_ in self.FOBRelatedInstruction:
            FOBRelatedInstruction_.export(outfile, level, namespace_, name_='FOBRelatedInstruction', pretty_print=pretty_print)
        for CarrierInformation_ in self.CarrierInformation:
            CarrierInformation_.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OrderLine':
            obj_ = OrderLineType.factory()
            obj_.build(child_)
            self.OrderLine = obj_
            obj_.original_tagname_ = 'OrderLine'
        elif nodeName_ == 'LineItemAcknowledgement':
            obj_ = LineItemAcknowledgementType.factory()
            obj_.build(child_)
            self.LineItemAcknowledgement.append(obj_)
            obj_.original_tagname_ = 'LineItemAcknowledgement'
        elif nodeName_ == 'Date':
            obj_ = DateType10.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType.factory()
            obj_.build(child_)
            self.MasterItemAttribute.append(obj_)
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType.factory()
            obj_.build(child_)
            self.PhysicalDetails.append(obj_)
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType12.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType14.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType15.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Address':
            obj_ = AddressType16.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Sublines':
            obj_ = SublinesType.factory()
            obj_.build(child_)
            self.Sublines = obj_
            obj_.original_tagname_ = 'Sublines'
        elif nodeName_ == 'QuantitiesSchedulesLocations':
            obj_ = QuantitiesSchedulesLocationsType.factory()
            obj_.build(child_)
            self.QuantitiesSchedulesLocations.append(obj_)
            obj_.original_tagname_ = 'QuantitiesSchedulesLocations'
        elif nodeName_ == 'Tax':
            obj_ = TaxType42.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType43.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'FOBRelatedInstruction':
            obj_ = FOBRelatedInstructionType45.factory()
            obj_.build(child_)
            self.FOBRelatedInstruction.append(obj_)
            obj_.original_tagname_ = 'FOBRelatedInstruction'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType46.factory()
            obj_.build(child_)
            self.CarrierInformation.append(obj_)
            obj_.original_tagname_ = 'CarrierInformation'
# end class LineItemType


class OrderLineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, OrderQty=None, OrderQtyUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, BuyersCurrency=None, SellersCurrency=None, ExchangeRate=None, ShipDate=None, ExtendedItemTotal=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, Gender=None, SellerDateCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.OrderQty = OrderQty
        self.OrderQtyUOM = OrderQtyUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.BuyersCurrency = BuyersCurrency
        self.SellersCurrency = SellersCurrency
        self.ExchangeRate = ExchangeRate
        self.ShipDate = ShipDate
        self.ExtendedItemTotal = ExtendedItemTotal
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.Gender = Gender
        self.SellerDateCode = SellerDateCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderLineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderLineType.subclass:
            return OrderLineType.subclass(*args_, **kwargs_)
        else:
            return OrderLineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_OrderQty(self): return self.OrderQty
    def set_OrderQty(self, OrderQty): self.OrderQty = OrderQty
    def get_OrderQtyUOM(self): return self.OrderQtyUOM
    def set_OrderQtyUOM(self, OrderQtyUOM): self.OrderQtyUOM = OrderQtyUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_BuyersCurrency(self): return self.BuyersCurrency
    def set_BuyersCurrency(self, BuyersCurrency): self.BuyersCurrency = BuyersCurrency
    def get_SellersCurrency(self): return self.SellersCurrency
    def set_SellersCurrency(self, SellersCurrency): self.SellersCurrency = SellersCurrency
    def get_ExchangeRate(self): return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate): self.ExchangeRate = ExchangeRate
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_ExtendedItemTotal(self): return self.ExtendedItemTotal
    def set_ExtendedItemTotal(self, ExtendedItemTotal): self.ExtendedItemTotal = ExtendedItemTotal
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_Gender(self): return self.Gender
    def set_Gender(self, Gender): self.Gender = Gender
    def get_SellerDateCode(self): return self.SellerDateCode
    def set_SellerDateCode(self, SellerDateCode): self.SellerDateCode = SellerDateCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.OrderQty is not None or
            self.OrderQtyUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.BuyersCurrency is not None or
            self.SellersCurrency is not None or
            self.ExchangeRate is not None or
            self.ShipDate is not None or
            self.ExtendedItemTotal is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.Gender is not None or
            self.SellerDateCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderLineType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderLineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderLineType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderLineType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderLineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineSequenceNumber>%s</%sLineSequenceNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LineSequenceNumber), input_name='LineSequenceNumber')), namespace_, eol_))
        if self.ApplicationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationId>%s</%sApplicationId>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationId), input_name='ApplicationId')), namespace_, eol_))
        if self.BuyerPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuyerPartNumber>%s</%sBuyerPartNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BuyerPartNumber), input_name='BuyerPartNumber')), namespace_, eol_))
        if self.VendorPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVendorPartNumber>%s</%sVendorPartNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VendorPartNumber), input_name='VendorPartNumber')), namespace_, eol_))
        if self.ConsumerPackageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsumerPackageCode>%s</%sConsumerPackageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ConsumerPackageCode), input_name='ConsumerPackageCode')), namespace_, eol_))
        if self.EAN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEAN>%s</%sEAN>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EAN), input_name='EAN')), namespace_, eol_))
        if self.GTIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTIN>%s</%sGTIN>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.GTIN), input_name='GTIN')), namespace_, eol_))
        if self.UPCCaseCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUPCCaseCode>%s</%sUPCCaseCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UPCCaseCode), input_name='UPCCaseCode')), namespace_, eol_))
        if self.NatlDrugCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNatlDrugCode>%s</%sNatlDrugCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NatlDrugCode), input_name='NatlDrugCode')), namespace_, eol_))
        if self.InternationalStandardBookNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternationalStandardBookNumber>%s</%sInternationalStandardBookNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InternationalStandardBookNumber), input_name='InternationalStandardBookNumber')), namespace_, eol_))
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.OrderQty is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderQty>%s</%sOrderQty>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OrderQty), input_name='OrderQty')), namespace_, eol_))
        if self.OrderQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderQtyUOM>%s</%sOrderQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OrderQtyUOM), input_name='OrderQtyUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePrice>%s</%sPurchasePrice>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePrice), input_name='PurchasePrice')), namespace_, eol_))
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.BuyersCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuyersCurrency>%s</%sBuyersCurrency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BuyersCurrency), input_name='BuyersCurrency')), namespace_, eol_))
        if self.SellersCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellersCurrency>%s</%sSellersCurrency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellersCurrency), input_name='SellersCurrency')), namespace_, eol_))
        if self.ExchangeRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRate>%s</%sExchangeRate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRate), input_name='ExchangeRate')), namespace_, eol_))
        if self.ShipDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ShipDate), input_name='ShipDate')), namespace_, eol_))
        if self.ExtendedItemTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExtendedItemTotal>%s</%sExtendedItemTotal>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ExtendedItemTotal), input_name='ExtendedItemTotal')), namespace_, eol_))
        if self.ProductSizeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductSizeCode>%s</%sProductSizeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductSizeCode), input_name='ProductSizeCode')), namespace_, eol_))
        if self.ProductSizeDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductSizeDescription>%s</%sProductSizeDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductSizeDescription), input_name='ProductSizeDescription')), namespace_, eol_))
        if self.ProductColorCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductColorCode>%s</%sProductColorCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductColorCode), input_name='ProductColorCode')), namespace_, eol_))
        if self.ProductColorDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductColorDescription>%s</%sProductColorDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductColorDescription), input_name='ProductColorDescription')), namespace_, eol_))
        if self.ProductMaterialCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductMaterialCode>%s</%sProductMaterialCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductMaterialCode), input_name='ProductMaterialCode')), namespace_, eol_))
        if self.ProductMaterialDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductMaterialDescription>%s</%sProductMaterialDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductMaterialDescription), input_name='ProductMaterialDescription')), namespace_, eol_))
        if self.ProductProcessCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductProcessCode>%s</%sProductProcessCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductProcessCode), input_name='ProductProcessCode')), namespace_, eol_))
        if self.ProductProcessDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductProcessDescription>%s</%sProductProcessDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductProcessDescription), input_name='ProductProcessDescription')), namespace_, eol_))
        if self.Department is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDepartment>%s</%sDepartment>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Department), input_name='Department')), namespace_, eol_))
        if self.DepartmentDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDepartmentDescription>%s</%sDepartmentDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DepartmentDescription), input_name='DepartmentDescription')), namespace_, eol_))
        if self.Class is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClass>%s</%sClass>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Class), input_name='Class')), namespace_, eol_))
        if self.Gender is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGender>%s</%sGender>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Gender), input_name='Gender')), namespace_, eol_))
        if self.SellerDateCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerDateCode>%s</%sSellerDateCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerDateCode), input_name='SellerDateCode')), namespace_, eol_))
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            LineSequenceNumber_ = child_.text
            LineSequenceNumber_ = self.gds_validate_string(LineSequenceNumber_, node, 'LineSequenceNumber')
            self.LineSequenceNumber = LineSequenceNumber_
        elif nodeName_ == 'ApplicationId':
            ApplicationId_ = child_.text
            ApplicationId_ = self.gds_validate_string(ApplicationId_, node, 'ApplicationId')
            self.ApplicationId = ApplicationId_
        elif nodeName_ == 'BuyerPartNumber':
            BuyerPartNumber_ = child_.text
            BuyerPartNumber_ = self.gds_validate_string(BuyerPartNumber_, node, 'BuyerPartNumber')
            self.BuyerPartNumber = BuyerPartNumber_
        elif nodeName_ == 'VendorPartNumber':
            VendorPartNumber_ = child_.text
            VendorPartNumber_ = self.gds_validate_string(VendorPartNumber_, node, 'VendorPartNumber')
            self.VendorPartNumber = VendorPartNumber_
        elif nodeName_ == 'ConsumerPackageCode':
            ConsumerPackageCode_ = child_.text
            ConsumerPackageCode_ = self.gds_validate_string(ConsumerPackageCode_, node, 'ConsumerPackageCode')
            self.ConsumerPackageCode = ConsumerPackageCode_
        elif nodeName_ == 'EAN':
            EAN_ = child_.text
            EAN_ = self.gds_validate_string(EAN_, node, 'EAN')
            self.EAN = EAN_
        elif nodeName_ == 'GTIN':
            GTIN_ = child_.text
            GTIN_ = self.gds_validate_string(GTIN_, node, 'GTIN')
            self.GTIN = GTIN_
        elif nodeName_ == 'UPCCaseCode':
            UPCCaseCode_ = child_.text
            UPCCaseCode_ = self.gds_validate_string(UPCCaseCode_, node, 'UPCCaseCode')
            self.UPCCaseCode = UPCCaseCode_
        elif nodeName_ == 'NatlDrugCode':
            NatlDrugCode_ = child_.text
            NatlDrugCode_ = self.gds_validate_string(NatlDrugCode_, node, 'NatlDrugCode')
            self.NatlDrugCode = NatlDrugCode_
        elif nodeName_ == 'InternationalStandardBookNumber':
            InternationalStandardBookNumber_ = child_.text
            InternationalStandardBookNumber_ = self.gds_validate_string(InternationalStandardBookNumber_, node, 'InternationalStandardBookNumber')
            self.InternationalStandardBookNumber = InternationalStandardBookNumber_
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'OrderQty':
            OrderQty_ = child_.text
            OrderQty_ = self.gds_validate_string(OrderQty_, node, 'OrderQty')
            self.OrderQty = OrderQty_
        elif nodeName_ == 'OrderQtyUOM':
            OrderQtyUOM_ = child_.text
            OrderQtyUOM_ = self.gds_validate_string(OrderQtyUOM_, node, 'OrderQtyUOM')
            self.OrderQtyUOM = OrderQtyUOM_
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
        elif nodeName_ == 'PurchasePrice':
            PurchasePrice_ = child_.text
            PurchasePrice_ = self.gds_validate_string(PurchasePrice_, node, 'PurchasePrice')
            self.PurchasePrice = PurchasePrice_
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
        elif nodeName_ == 'BuyersCurrency':
            BuyersCurrency_ = child_.text
            BuyersCurrency_ = self.gds_validate_string(BuyersCurrency_, node, 'BuyersCurrency')
            self.BuyersCurrency = BuyersCurrency_
        elif nodeName_ == 'SellersCurrency':
            SellersCurrency_ = child_.text
            SellersCurrency_ = self.gds_validate_string(SellersCurrency_, node, 'SellersCurrency')
            self.SellersCurrency = SellersCurrency_
        elif nodeName_ == 'ExchangeRate':
            ExchangeRate_ = child_.text
            ExchangeRate_ = self.gds_validate_string(ExchangeRate_, node, 'ExchangeRate')
            self.ExchangeRate = ExchangeRate_
        elif nodeName_ == 'ShipDate':
            ShipDate_ = child_.text
            ShipDate_ = self.gds_validate_string(ShipDate_, node, 'ShipDate')
            self.ShipDate = ShipDate_
        elif nodeName_ == 'ExtendedItemTotal':
            ExtendedItemTotal_ = child_.text
            ExtendedItemTotal_ = self.gds_validate_string(ExtendedItemTotal_, node, 'ExtendedItemTotal')
            self.ExtendedItemTotal = ExtendedItemTotal_
        elif nodeName_ == 'ProductSizeCode':
            ProductSizeCode_ = child_.text
            ProductSizeCode_ = self.gds_validate_string(ProductSizeCode_, node, 'ProductSizeCode')
            self.ProductSizeCode = ProductSizeCode_
        elif nodeName_ == 'ProductSizeDescription':
            ProductSizeDescription_ = child_.text
            ProductSizeDescription_ = self.gds_validate_string(ProductSizeDescription_, node, 'ProductSizeDescription')
            self.ProductSizeDescription = ProductSizeDescription_
        elif nodeName_ == 'ProductColorCode':
            ProductColorCode_ = child_.text
            ProductColorCode_ = self.gds_validate_string(ProductColorCode_, node, 'ProductColorCode')
            self.ProductColorCode = ProductColorCode_
        elif nodeName_ == 'ProductColorDescription':
            ProductColorDescription_ = child_.text
            ProductColorDescription_ = self.gds_validate_string(ProductColorDescription_, node, 'ProductColorDescription')
            self.ProductColorDescription = ProductColorDescription_
        elif nodeName_ == 'ProductMaterialCode':
            ProductMaterialCode_ = child_.text
            ProductMaterialCode_ = self.gds_validate_string(ProductMaterialCode_, node, 'ProductMaterialCode')
            self.ProductMaterialCode = ProductMaterialCode_
        elif nodeName_ == 'ProductMaterialDescription':
            ProductMaterialDescription_ = child_.text
            ProductMaterialDescription_ = self.gds_validate_string(ProductMaterialDescription_, node, 'ProductMaterialDescription')
            self.ProductMaterialDescription = ProductMaterialDescription_
        elif nodeName_ == 'ProductProcessCode':
            ProductProcessCode_ = child_.text
            ProductProcessCode_ = self.gds_validate_string(ProductProcessCode_, node, 'ProductProcessCode')
            self.ProductProcessCode = ProductProcessCode_
        elif nodeName_ == 'ProductProcessDescription':
            ProductProcessDescription_ = child_.text
            ProductProcessDescription_ = self.gds_validate_string(ProductProcessDescription_, node, 'ProductProcessDescription')
            self.ProductProcessDescription = ProductProcessDescription_
        elif nodeName_ == 'Department':
            Department_ = child_.text
            Department_ = self.gds_validate_string(Department_, node, 'Department')
            self.Department = Department_
        elif nodeName_ == 'DepartmentDescription':
            DepartmentDescription_ = child_.text
            DepartmentDescription_ = self.gds_validate_string(DepartmentDescription_, node, 'DepartmentDescription')
            self.DepartmentDescription = DepartmentDescription_
        elif nodeName_ == 'Class':
            Class_ = child_.text
            Class_ = self.gds_validate_string(Class_, node, 'Class')
            self.Class = Class_
        elif nodeName_ == 'Gender':
            Gender_ = child_.text
            Gender_ = self.gds_validate_string(Gender_, node, 'Gender')
            self.Gender = Gender_
        elif nodeName_ == 'SellerDateCode':
            SellerDateCode_ = child_.text
            SellerDateCode_ = self.gds_validate_string(SellerDateCode_, node, 'SellerDateCode')
            self.SellerDateCode = SellerDateCode_
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class OrderLineType


class OrderQtyUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderQtyUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderQtyUOM.subclass:
            return OrderQtyUOM.subclass(*args_, **kwargs_)
        else:
            return OrderQtyUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderQtyUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderQtyUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderQtyUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderQtyUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderQtyUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OrderQtyUOM


class PurchasePriceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PurchasePriceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PurchasePriceType.subclass:
            return PurchasePriceType.subclass(*args_, **kwargs_)
        else:
            return PurchasePriceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PurchasePriceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PurchasePriceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PurchasePriceType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PurchasePriceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PurchasePriceType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PurchasePriceType


class PurchasePriceBasis(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PurchasePriceBasis)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PurchasePriceBasis.subclass:
            return PurchasePriceBasis.subclass(*args_, **kwargs_)
        else:
            return PurchasePriceBasis(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PurchasePriceBasis', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PurchasePriceBasis')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PurchasePriceBasis', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PurchasePriceBasis'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PurchasePriceBasis', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PurchasePriceBasis


class ProductIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType.subclass:
            return ProductIDType.subclass(*args_, **kwargs_)
        else:
            return ProductIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
        elif nodeName_ == 'PartNumber':
            PartNumber_ = child_.text
            PartNumber_ = self.gds_validate_string(PartNumber_, node, 'PartNumber')
            self.PartNumber = PartNumber_
# end class ProductIDType


class PartNumberQual(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PartNumberQual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PartNumberQual.subclass:
            return PartNumberQual.subclass(*args_, **kwargs_)
        else:
            return PartNumberQual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PartNumberQual', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PartNumberQual')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PartNumberQual', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PartNumberQual'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PartNumberQual', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PartNumberQual


class NRFStandardColorAndSizeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType.subclass:
            return NRFStandardColorAndSizeType.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNRFColorCode>%s</%sNRFColorCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NRFColorCode), input_name='NRFColorCode')), namespace_, eol_))
        if self.ColorCategoryName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sColorCategoryName>%s</%sColorCategoryName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ColorCategoryName), input_name='ColorCategoryName')), namespace_, eol_))
        if self.ColorPrimaryDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sColorPrimaryDescription>%s</%sColorPrimaryDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ColorPrimaryDescription), input_name='ColorPrimaryDescription')), namespace_, eol_))
        if self.NRFSizeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNRFSizeCode>%s</%sNRFSizeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NRFSizeCode), input_name='NRFSizeCode')), namespace_, eol_))
        if self.SizeCategoryName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeCategoryName>%s</%sSizeCategoryName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeCategoryName), input_name='SizeCategoryName')), namespace_, eol_))
        if self.SizePrimaryDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizePrimaryDescription>%s</%sSizePrimaryDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizePrimaryDescription), input_name='SizePrimaryDescription')), namespace_, eol_))
        if self.SizeSecondaryDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeSecondaryDescription>%s</%sSizeSecondaryDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeSecondaryDescription), input_name='SizeSecondaryDescription')), namespace_, eol_))
        if self.SizeTableName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeTableName>%s</%sSizeTableName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeTableName), input_name='SizeTableName')), namespace_, eol_))
        if self.SizeHeading1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeHeading1>%s</%sSizeHeading1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeHeading1), input_name='SizeHeading1')), namespace_, eol_))
        if self.SizeHeading2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeHeading2>%s</%sSizeHeading2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeHeading2), input_name='SizeHeading2')), namespace_, eol_))
        if self.SizeHeading3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeHeading3>%s</%sSizeHeading3>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeHeading3), input_name='SizeHeading3')), namespace_, eol_))
        if self.SizeHeading4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeHeading4>%s</%sSizeHeading4>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeHeading4), input_name='SizeHeading4')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            NRFColorCode_ = child_.text
            NRFColorCode_ = self.gds_validate_string(NRFColorCode_, node, 'NRFColorCode')
            self.NRFColorCode = NRFColorCode_
        elif nodeName_ == 'ColorCategoryName':
            ColorCategoryName_ = child_.text
            ColorCategoryName_ = self.gds_validate_string(ColorCategoryName_, node, 'ColorCategoryName')
            self.ColorCategoryName = ColorCategoryName_
        elif nodeName_ == 'ColorPrimaryDescription':
            ColorPrimaryDescription_ = child_.text
            ColorPrimaryDescription_ = self.gds_validate_string(ColorPrimaryDescription_, node, 'ColorPrimaryDescription')
            self.ColorPrimaryDescription = ColorPrimaryDescription_
        elif nodeName_ == 'NRFSizeCode':
            NRFSizeCode_ = child_.text
            NRFSizeCode_ = self.gds_validate_string(NRFSizeCode_, node, 'NRFSizeCode')
            self.NRFSizeCode = NRFSizeCode_
        elif nodeName_ == 'SizeCategoryName':
            SizeCategoryName_ = child_.text
            SizeCategoryName_ = self.gds_validate_string(SizeCategoryName_, node, 'SizeCategoryName')
            self.SizeCategoryName = SizeCategoryName_
        elif nodeName_ == 'SizePrimaryDescription':
            SizePrimaryDescription_ = child_.text
            SizePrimaryDescription_ = self.gds_validate_string(SizePrimaryDescription_, node, 'SizePrimaryDescription')
            self.SizePrimaryDescription = SizePrimaryDescription_
        elif nodeName_ == 'SizeSecondaryDescription':
            SizeSecondaryDescription_ = child_.text
            SizeSecondaryDescription_ = self.gds_validate_string(SizeSecondaryDescription_, node, 'SizeSecondaryDescription')
            self.SizeSecondaryDescription = SizeSecondaryDescription_
        elif nodeName_ == 'SizeTableName':
            SizeTableName_ = child_.text
            SizeTableName_ = self.gds_validate_string(SizeTableName_, node, 'SizeTableName')
            self.SizeTableName = SizeTableName_
        elif nodeName_ == 'SizeHeading1':
            SizeHeading1_ = child_.text
            SizeHeading1_ = self.gds_validate_string(SizeHeading1_, node, 'SizeHeading1')
            self.SizeHeading1 = SizeHeading1_
        elif nodeName_ == 'SizeHeading2':
            SizeHeading2_ = child_.text
            SizeHeading2_ = self.gds_validate_string(SizeHeading2_, node, 'SizeHeading2')
            self.SizeHeading2 = SizeHeading2_
        elif nodeName_ == 'SizeHeading3':
            SizeHeading3_ = child_.text
            SizeHeading3_ = self.gds_validate_string(SizeHeading3_, node, 'SizeHeading3')
            self.SizeHeading3 = SizeHeading3_
        elif nodeName_ == 'SizeHeading4':
            SizeHeading4_ = child_.text
            SizeHeading4_ = self.gds_validate_string(SizeHeading4_, node, 'SizeHeading4')
            self.SizeHeading4 = SizeHeading4_
# end class NRFStandardColorAndSizeType


class LineItemAcknowledgementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ItemStatusCode=None, ItemScheduleQty=None, ItemScheduleUOM=None, ItemScheduleQualifier=None, ItemScheduleDate=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, BuyersCurrency=None, SellersCurrency=None, ExchangeRate=None, ExtendedItemTotal=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, Gender=None, IndustryCode=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ItemStatusCode = ItemStatusCode
        self.ItemScheduleQty = ItemScheduleQty
        self.ItemScheduleUOM = ItemScheduleUOM
        self.ItemScheduleQualifier = ItemScheduleQualifier
        self.ItemScheduleDate = ItemScheduleDate
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.BuyersCurrency = BuyersCurrency
        self.SellersCurrency = SellersCurrency
        self.ExchangeRate = ExchangeRate
        self.ExtendedItemTotal = ExtendedItemTotal
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.Gender = Gender
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LineItemAcknowledgementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LineItemAcknowledgementType.subclass:
            return LineItemAcknowledgementType.subclass(*args_, **kwargs_)
        else:
            return LineItemAcknowledgementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ItemStatusCode(self): return self.ItemStatusCode
    def set_ItemStatusCode(self, ItemStatusCode): self.ItemStatusCode = ItemStatusCode
    def get_ItemScheduleQty(self): return self.ItemScheduleQty
    def set_ItemScheduleQty(self, ItemScheduleQty): self.ItemScheduleQty = ItemScheduleQty
    def get_ItemScheduleUOM(self): return self.ItemScheduleUOM
    def set_ItemScheduleUOM(self, ItemScheduleUOM): self.ItemScheduleUOM = ItemScheduleUOM
    def get_ItemScheduleQualifier(self): return self.ItemScheduleQualifier
    def set_ItemScheduleQualifier(self, ItemScheduleQualifier): self.ItemScheduleQualifier = ItemScheduleQualifier
    def get_ItemScheduleDate(self): return self.ItemScheduleDate
    def set_ItemScheduleDate(self, ItemScheduleDate): self.ItemScheduleDate = ItemScheduleDate
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_BuyersCurrency(self): return self.BuyersCurrency
    def set_BuyersCurrency(self, BuyersCurrency): self.BuyersCurrency = BuyersCurrency
    def get_SellersCurrency(self): return self.SellersCurrency
    def set_SellersCurrency(self, SellersCurrency): self.SellersCurrency = SellersCurrency
    def get_ExchangeRate(self): return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate): self.ExchangeRate = ExchangeRate
    def get_ExtendedItemTotal(self): return self.ExtendedItemTotal
    def set_ExtendedItemTotal(self, ExtendedItemTotal): self.ExtendedItemTotal = ExtendedItemTotal
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_Gender(self): return self.Gender
    def set_Gender(self, Gender): self.Gender = Gender
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ItemStatusCode is not None or
            self.ItemScheduleQty is not None or
            self.ItemScheduleUOM is not None or
            self.ItemScheduleQualifier is not None or
            self.ItemScheduleDate is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.BuyersCurrency is not None or
            self.SellersCurrency is not None or
            self.ExchangeRate is not None or
            self.ExtendedItemTotal is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.Gender is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LineItemAcknowledgementType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LineItemAcknowledgementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LineItemAcknowledgementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LineItemAcknowledgementType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LineItemAcknowledgementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineSequenceNumber>%s</%sLineSequenceNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LineSequenceNumber), input_name='LineSequenceNumber')), namespace_, eol_))
        if self.ItemStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemStatusCode>%s</%sItemStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemStatusCode), input_name='ItemStatusCode')), namespace_, eol_))
        if self.ItemScheduleQty is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemScheduleQty>%s</%sItemScheduleQty>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemScheduleQty), input_name='ItemScheduleQty')), namespace_, eol_))
        if self.ItemScheduleUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemScheduleUOM>%s</%sItemScheduleUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemScheduleUOM), input_name='ItemScheduleUOM')), namespace_, eol_))
        if self.ItemScheduleQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemScheduleQualifier>%s</%sItemScheduleQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemScheduleQualifier), input_name='ItemScheduleQualifier')), namespace_, eol_))
        if self.ItemScheduleDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemScheduleDate>%s</%sItemScheduleDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemScheduleDate), input_name='ItemScheduleDate')), namespace_, eol_))
        if self.BuyerPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuyerPartNumber>%s</%sBuyerPartNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BuyerPartNumber), input_name='BuyerPartNumber')), namespace_, eol_))
        if self.VendorPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVendorPartNumber>%s</%sVendorPartNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VendorPartNumber), input_name='VendorPartNumber')), namespace_, eol_))
        if self.ConsumerPackageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsumerPackageCode>%s</%sConsumerPackageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ConsumerPackageCode), input_name='ConsumerPackageCode')), namespace_, eol_))
        if self.EAN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEAN>%s</%sEAN>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EAN), input_name='EAN')), namespace_, eol_))
        if self.GTIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTIN>%s</%sGTIN>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.GTIN), input_name='GTIN')), namespace_, eol_))
        if self.UPCCaseCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUPCCaseCode>%s</%sUPCCaseCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UPCCaseCode), input_name='UPCCaseCode')), namespace_, eol_))
        if self.NatlDrugCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNatlDrugCode>%s</%sNatlDrugCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NatlDrugCode), input_name='NatlDrugCode')), namespace_, eol_))
        if self.InternationalStandardBookNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternationalStandardBookNumber>%s</%sInternationalStandardBookNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InternationalStandardBookNumber), input_name='InternationalStandardBookNumber')), namespace_, eol_))
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePrice>%s</%sPurchasePrice>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePrice), input_name='PurchasePrice')), namespace_, eol_))
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.BuyersCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuyersCurrency>%s</%sBuyersCurrency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BuyersCurrency), input_name='BuyersCurrency')), namespace_, eol_))
        if self.SellersCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellersCurrency>%s</%sSellersCurrency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellersCurrency), input_name='SellersCurrency')), namespace_, eol_))
        if self.ExchangeRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRate>%s</%sExchangeRate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRate), input_name='ExchangeRate')), namespace_, eol_))
        if self.ExtendedItemTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExtendedItemTotal>%s</%sExtendedItemTotal>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ExtendedItemTotal), input_name='ExtendedItemTotal')), namespace_, eol_))
        if self.ProductSizeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductSizeCode>%s</%sProductSizeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductSizeCode), input_name='ProductSizeCode')), namespace_, eol_))
        if self.ProductSizeDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductSizeDescription>%s</%sProductSizeDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductSizeDescription), input_name='ProductSizeDescription')), namespace_, eol_))
        if self.ProductColorCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductColorCode>%s</%sProductColorCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductColorCode), input_name='ProductColorCode')), namespace_, eol_))
        if self.ProductColorDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductColorDescription>%s</%sProductColorDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductColorDescription), input_name='ProductColorDescription')), namespace_, eol_))
        if self.ProductMaterialCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductMaterialCode>%s</%sProductMaterialCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductMaterialCode), input_name='ProductMaterialCode')), namespace_, eol_))
        if self.ProductMaterialDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductMaterialDescription>%s</%sProductMaterialDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductMaterialDescription), input_name='ProductMaterialDescription')), namespace_, eol_))
        if self.ProductProcessCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductProcessCode>%s</%sProductProcessCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductProcessCode), input_name='ProductProcessCode')), namespace_, eol_))
        if self.ProductProcessDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductProcessDescription>%s</%sProductProcessDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductProcessDescription), input_name='ProductProcessDescription')), namespace_, eol_))
        if self.Department is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDepartment>%s</%sDepartment>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Department), input_name='Department')), namespace_, eol_))
        if self.DepartmentDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDepartmentDescription>%s</%sDepartmentDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DepartmentDescription), input_name='DepartmentDescription')), namespace_, eol_))
        if self.Class is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClass>%s</%sClass>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Class), input_name='Class')), namespace_, eol_))
        if self.Gender is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGender>%s</%sGender>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Gender), input_name='Gender')), namespace_, eol_))
        if self.IndustryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndustryCode>%s</%sIndustryCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IndustryCode), input_name='IndustryCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            LineSequenceNumber_ = child_.text
            LineSequenceNumber_ = self.gds_validate_string(LineSequenceNumber_, node, 'LineSequenceNumber')
            self.LineSequenceNumber = LineSequenceNumber_
        elif nodeName_ == 'ItemStatusCode':
            ItemStatusCode_ = child_.text
            ItemStatusCode_ = self.gds_validate_string(ItemStatusCode_, node, 'ItemStatusCode')
            self.ItemStatusCode = ItemStatusCode_
        elif nodeName_ == 'ItemScheduleQty':
            ItemScheduleQty_ = child_.text
            ItemScheduleQty_ = self.gds_validate_string(ItemScheduleQty_, node, 'ItemScheduleQty')
            self.ItemScheduleQty = ItemScheduleQty_
        elif nodeName_ == 'ItemScheduleUOM':
            ItemScheduleUOM_ = child_.text
            ItemScheduleUOM_ = self.gds_validate_string(ItemScheduleUOM_, node, 'ItemScheduleUOM')
            self.ItemScheduleUOM = ItemScheduleUOM_
        elif nodeName_ == 'ItemScheduleQualifier':
            ItemScheduleQualifier_ = child_.text
            ItemScheduleQualifier_ = self.gds_validate_string(ItemScheduleQualifier_, node, 'ItemScheduleQualifier')
            self.ItemScheduleQualifier = ItemScheduleQualifier_
        elif nodeName_ == 'ItemScheduleDate':
            ItemScheduleDate_ = child_.text
            ItemScheduleDate_ = self.gds_validate_string(ItemScheduleDate_, node, 'ItemScheduleDate')
            self.ItemScheduleDate = ItemScheduleDate_
        elif nodeName_ == 'BuyerPartNumber':
            BuyerPartNumber_ = child_.text
            BuyerPartNumber_ = self.gds_validate_string(BuyerPartNumber_, node, 'BuyerPartNumber')
            self.BuyerPartNumber = BuyerPartNumber_
        elif nodeName_ == 'VendorPartNumber':
            VendorPartNumber_ = child_.text
            VendorPartNumber_ = self.gds_validate_string(VendorPartNumber_, node, 'VendorPartNumber')
            self.VendorPartNumber = VendorPartNumber_
        elif nodeName_ == 'ConsumerPackageCode':
            ConsumerPackageCode_ = child_.text
            ConsumerPackageCode_ = self.gds_validate_string(ConsumerPackageCode_, node, 'ConsumerPackageCode')
            self.ConsumerPackageCode = ConsumerPackageCode_
        elif nodeName_ == 'EAN':
            EAN_ = child_.text
            EAN_ = self.gds_validate_string(EAN_, node, 'EAN')
            self.EAN = EAN_
        elif nodeName_ == 'GTIN':
            GTIN_ = child_.text
            GTIN_ = self.gds_validate_string(GTIN_, node, 'GTIN')
            self.GTIN = GTIN_
        elif nodeName_ == 'UPCCaseCode':
            UPCCaseCode_ = child_.text
            UPCCaseCode_ = self.gds_validate_string(UPCCaseCode_, node, 'UPCCaseCode')
            self.UPCCaseCode = UPCCaseCode_
        elif nodeName_ == 'NatlDrugCode':
            NatlDrugCode_ = child_.text
            NatlDrugCode_ = self.gds_validate_string(NatlDrugCode_, node, 'NatlDrugCode')
            self.NatlDrugCode = NatlDrugCode_
        elif nodeName_ == 'InternationalStandardBookNumber':
            InternationalStandardBookNumber_ = child_.text
            InternationalStandardBookNumber_ = self.gds_validate_string(InternationalStandardBookNumber_, node, 'InternationalStandardBookNumber')
            self.InternationalStandardBookNumber = InternationalStandardBookNumber_
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType9.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
        elif nodeName_ == 'PurchasePrice':
            PurchasePrice_ = child_.text
            PurchasePrice_ = self.gds_validate_string(PurchasePrice_, node, 'PurchasePrice')
            self.PurchasePrice = PurchasePrice_
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
        elif nodeName_ == 'BuyersCurrency':
            BuyersCurrency_ = child_.text
            BuyersCurrency_ = self.gds_validate_string(BuyersCurrency_, node, 'BuyersCurrency')
            self.BuyersCurrency = BuyersCurrency_
        elif nodeName_ == 'SellersCurrency':
            SellersCurrency_ = child_.text
            SellersCurrency_ = self.gds_validate_string(SellersCurrency_, node, 'SellersCurrency')
            self.SellersCurrency = SellersCurrency_
        elif nodeName_ == 'ExchangeRate':
            ExchangeRate_ = child_.text
            ExchangeRate_ = self.gds_validate_string(ExchangeRate_, node, 'ExchangeRate')
            self.ExchangeRate = ExchangeRate_
        elif nodeName_ == 'ExtendedItemTotal':
            ExtendedItemTotal_ = child_.text
            ExtendedItemTotal_ = self.gds_validate_string(ExtendedItemTotal_, node, 'ExtendedItemTotal')
            self.ExtendedItemTotal = ExtendedItemTotal_
        elif nodeName_ == 'ProductSizeCode':
            ProductSizeCode_ = child_.text
            ProductSizeCode_ = self.gds_validate_string(ProductSizeCode_, node, 'ProductSizeCode')
            self.ProductSizeCode = ProductSizeCode_
        elif nodeName_ == 'ProductSizeDescription':
            ProductSizeDescription_ = child_.text
            ProductSizeDescription_ = self.gds_validate_string(ProductSizeDescription_, node, 'ProductSizeDescription')
            self.ProductSizeDescription = ProductSizeDescription_
        elif nodeName_ == 'ProductColorCode':
            ProductColorCode_ = child_.text
            ProductColorCode_ = self.gds_validate_string(ProductColorCode_, node, 'ProductColorCode')
            self.ProductColorCode = ProductColorCode_
        elif nodeName_ == 'ProductColorDescription':
            ProductColorDescription_ = child_.text
            ProductColorDescription_ = self.gds_validate_string(ProductColorDescription_, node, 'ProductColorDescription')
            self.ProductColorDescription = ProductColorDescription_
        elif nodeName_ == 'ProductMaterialCode':
            ProductMaterialCode_ = child_.text
            ProductMaterialCode_ = self.gds_validate_string(ProductMaterialCode_, node, 'ProductMaterialCode')
            self.ProductMaterialCode = ProductMaterialCode_
        elif nodeName_ == 'ProductMaterialDescription':
            ProductMaterialDescription_ = child_.text
            ProductMaterialDescription_ = self.gds_validate_string(ProductMaterialDescription_, node, 'ProductMaterialDescription')
            self.ProductMaterialDescription = ProductMaterialDescription_
        elif nodeName_ == 'ProductProcessCode':
            ProductProcessCode_ = child_.text
            ProductProcessCode_ = self.gds_validate_string(ProductProcessCode_, node, 'ProductProcessCode')
            self.ProductProcessCode = ProductProcessCode_
        elif nodeName_ == 'ProductProcessDescription':
            ProductProcessDescription_ = child_.text
            ProductProcessDescription_ = self.gds_validate_string(ProductProcessDescription_, node, 'ProductProcessDescription')
            self.ProductProcessDescription = ProductProcessDescription_
        elif nodeName_ == 'Department':
            Department_ = child_.text
            Department_ = self.gds_validate_string(Department_, node, 'Department')
            self.Department = Department_
        elif nodeName_ == 'DepartmentDescription':
            DepartmentDescription_ = child_.text
            DepartmentDescription_ = self.gds_validate_string(DepartmentDescription_, node, 'DepartmentDescription')
            self.DepartmentDescription = DepartmentDescription_
        elif nodeName_ == 'Class':
            Class_ = child_.text
            Class_ = self.gds_validate_string(Class_, node, 'Class')
            self.Class = Class_
        elif nodeName_ == 'Gender':
            Gender_ = child_.text
            Gender_ = self.gds_validate_string(Gender_, node, 'Gender')
            self.Gender = Gender_
        elif nodeName_ == 'IndustryCode':
            IndustryCode_ = child_.text
            IndustryCode_ = self.gds_validate_string(IndustryCode_, node, 'IndustryCode')
            self.IndustryCode = IndustryCode_
# end class LineItemAcknowledgementType


class ItemStatusCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemStatusCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemStatusCode.subclass:
            return ItemStatusCode.subclass(*args_, **kwargs_)
        else:
            return ItemStatusCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemStatusCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemStatusCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemStatusCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemStatusCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemStatusCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ItemStatusCode


class ItemScheduleUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemScheduleUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemScheduleUOM.subclass:
            return ItemScheduleUOM.subclass(*args_, **kwargs_)
        else:
            return ItemScheduleUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemScheduleUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemScheduleUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemScheduleUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemScheduleUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemScheduleUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ItemScheduleUOM


class ItemScheduleQualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemScheduleQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemScheduleQualifier.subclass:
            return ItemScheduleQualifier.subclass(*args_, **kwargs_)
        else:
            return ItemScheduleQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemScheduleQualifier', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemScheduleQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemScheduleQualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemScheduleQualifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemScheduleQualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ItemScheduleQualifier


class ProductIDType9(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType9)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType9.subclass:
            return ProductIDType9.subclass(*args_, **kwargs_)
        else:
            return ProductIDType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType9', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType9', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType9'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
        elif nodeName_ == 'PartNumber':
            PartNumber_ = child_.text
            PartNumber_ = self.gds_validate_string(PartNumber_, node, 'PartNumber')
            self.PartNumber = PartNumber_
# end class ProductIDType9


class DateType10(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType10)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType10.subclass:
            return DateType10.subclass(*args_, **kwargs_)
        else:
            return DateType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType10', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType10', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType10'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        if self.DateTimePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimePeriod>%s</%sDateTimePeriod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimePeriod), input_name='DateTimePeriod')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'DateTimePeriod':
            DateTimePeriod_ = child_.text
            DateTimePeriod_ = self.gds_validate_string(DateTimePeriod_, node, 'DateTimePeriod')
            self.DateTimePeriod = DateTimePeriod_
# end class DateType10


class MeasurementsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType.subclass:
            return MeasurementsType.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementRefIDCode>%s</%sMeasurementRefIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementRefIDCode), input_name='MeasurementRefIDCode')), namespace_, eol_))
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementValue>%s</%sMeasurementValue>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementValue), input_name='MeasurementValue')), namespace_, eol_))
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRangeMinimum>%s</%sRangeMinimum>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RangeMinimum), input_name='RangeMinimum')), namespace_, eol_))
        if self.RangeMaximum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRangeMaximum>%s</%sRangeMaximum>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RangeMaximum), input_name='RangeMaximum')), namespace_, eol_))
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementAttributeCode>%s</%sMeasurementAttributeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementAttributeCode), input_name='MeasurementAttributeCode')), namespace_, eol_))
        if self.SurfaceLayerPositionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSurfaceLayerPositionCode>%s</%sSurfaceLayerPositionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SurfaceLayerPositionCode), input_name='SurfaceLayerPositionCode')), namespace_, eol_))
        if self.IndustryCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndustryCodeQualifier>%s</%sIndustryCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IndustryCodeQualifier), input_name='IndustryCodeQualifier')), namespace_, eol_))
        if self.IndustryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndustryCode>%s</%sIndustryCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IndustryCode), input_name='IndustryCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            MeasurementRefIDCode_ = child_.text
            MeasurementRefIDCode_ = self.gds_validate_string(MeasurementRefIDCode_, node, 'MeasurementRefIDCode')
            self.MeasurementRefIDCode = MeasurementRefIDCode_
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
        elif nodeName_ == 'MeasurementValue':
            MeasurementValue_ = child_.text
            MeasurementValue_ = self.gds_validate_string(MeasurementValue_, node, 'MeasurementValue')
            self.MeasurementValue = MeasurementValue_
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
        elif nodeName_ == 'RangeMinimum':
            RangeMinimum_ = child_.text
            RangeMinimum_ = self.gds_validate_string(RangeMinimum_, node, 'RangeMinimum')
            self.RangeMinimum = RangeMinimum_
        elif nodeName_ == 'RangeMaximum':
            RangeMaximum_ = child_.text
            RangeMaximum_ = self.gds_validate_string(RangeMaximum_, node, 'RangeMaximum')
            self.RangeMaximum = RangeMaximum_
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
        elif nodeName_ == 'MeasurementAttributeCode':
            MeasurementAttributeCode_ = child_.text
            MeasurementAttributeCode_ = self.gds_validate_string(MeasurementAttributeCode_, node, 'MeasurementAttributeCode')
            self.MeasurementAttributeCode = MeasurementAttributeCode_
        elif nodeName_ == 'SurfaceLayerPositionCode':
            SurfaceLayerPositionCode_ = child_.text
            SurfaceLayerPositionCode_ = self.gds_validate_string(SurfaceLayerPositionCode_, node, 'SurfaceLayerPositionCode')
            self.SurfaceLayerPositionCode = SurfaceLayerPositionCode_
        elif nodeName_ == 'IndustryCodeQualifier':
            IndustryCodeQualifier_ = child_.text
            IndustryCodeQualifier_ = self.gds_validate_string(IndustryCodeQualifier_, node, 'IndustryCodeQualifier')
            self.IndustryCodeQualifier = IndustryCodeQualifier_
        elif nodeName_ == 'IndustryCode':
            IndustryCode_ = child_.text
            IndustryCode_ = self.gds_validate_string(IndustryCode_, node, 'IndustryCode')
            self.IndustryCode = IndustryCode_
# end class MeasurementsType


class MeasurementQualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementQualifier.subclass:
            return MeasurementQualifier.subclass(*args_, **kwargs_)
        else:
            return MeasurementQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementQualifier', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementQualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementQualifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementQualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MeasurementQualifier


class CompositeUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompositeUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompositeUOM.subclass:
            return CompositeUOM.subclass(*args_, **kwargs_)
        else:
            return CompositeUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CompositeUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompositeUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CompositeUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompositeUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CompositeUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CompositeUOM


class MeasurementSignificanceCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementSignificanceCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementSignificanceCode.subclass:
            return MeasurementSignificanceCode.subclass(*args_, **kwargs_)
        else:
            return MeasurementSignificanceCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementSignificanceCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementSignificanceCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementSignificanceCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementSignificanceCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementSignificanceCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MeasurementSignificanceCode


class PriceInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType.subclass:
            return PriceInformationType.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffectiveDate>%s</%sEffectiveDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EffectiveDate), input_name='EffectiveDate')), namespace_, eol_))
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPrice>%s</%sUnitPrice>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPrice), input_name='UnitPrice')), namespace_, eol_))
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespace_, eol_))
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplier>%s</%sPriceMultiplier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplier), input_name='PriceMultiplier')), namespace_, eol_))
        if self.RebateAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRebateAmount>%s</%sRebateAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RebateAmount), input_name='RebateAmount')), namespace_, eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespace_, eol_))
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMultiplePriceQuantity>%s</%sMultiplePriceQuantity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MultiplePriceQuantity), input_name='MultiplePriceQuantity')), namespace_, eol_))
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConditionValue>%s</%sConditionValue>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ConditionValue), input_name='ConditionValue')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
        elif nodeName_ == 'EffectiveDate':
            EffectiveDate_ = child_.text
            EffectiveDate_ = self.gds_validate_string(EffectiveDate_, node, 'EffectiveDate')
            self.EffectiveDate = EffectiveDate_
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
        elif nodeName_ == 'UnitPrice':
            UnitPrice_ = child_.text
            UnitPrice_ = self.gds_validate_string(UnitPrice_, node, 'UnitPrice')
            self.UnitPrice = UnitPrice_
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
        elif nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
        elif nodeName_ == 'PriceMultiplier':
            PriceMultiplier_ = child_.text
            PriceMultiplier_ = self.gds_validate_string(PriceMultiplier_, node, 'PriceMultiplier')
            self.PriceMultiplier = PriceMultiplier_
        elif nodeName_ == 'RebateAmount':
            RebateAmount_ = child_.text
            RebateAmount_ = self.gds_validate_string(RebateAmount_, node, 'RebateAmount')
            self.RebateAmount = RebateAmount_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
        elif nodeName_ == 'MultiplePriceQuantity':
            MultiplePriceQuantity_ = child_.text
            MultiplePriceQuantity_ = self.gds_validate_string(MultiplePriceQuantity_, node, 'MultiplePriceQuantity')
            self.MultiplePriceQuantity = MultiplePriceQuantity_
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
        elif nodeName_ == 'ConditionValue':
            ConditionValue_ = child_.text
            ConditionValue_ = self.gds_validate_string(ConditionValue_, node, 'ConditionValue')
            self.ConditionValue = ConditionValue_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class PriceInformationType


class ChangeReasonCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChangeReasonCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChangeReasonCode.subclass:
            return ChangeReasonCode.subclass(*args_, **kwargs_)
        else:
            return ChangeReasonCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChangeReasonCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChangeReasonCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChangeReasonCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChangeReasonCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChangeReasonCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ChangeReasonCode


class PriceTypeIDCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceTypeIDCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceTypeIDCode.subclass:
            return PriceTypeIDCode.subclass(*args_, **kwargs_)
        else:
            return PriceTypeIDCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceTypeIDCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceTypeIDCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceTypeIDCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceTypeIDCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceTypeIDCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PriceTypeIDCode


class UnitPriceBasis(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitPriceBasis)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitPriceBasis.subclass:
            return UnitPriceBasis.subclass(*args_, **kwargs_)
        else:
            return UnitPriceBasis(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='UnitPriceBasis', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitPriceBasis')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='UnitPriceBasis', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='UnitPriceBasis'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='UnitPriceBasis', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class UnitPriceBasis


class PriceMultiplierQual(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceMultiplierQual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceMultiplierQual.subclass:
            return PriceMultiplierQual.subclass(*args_, **kwargs_)
        else:
            return PriceMultiplierQual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceMultiplierQual', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceMultiplierQual')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceMultiplierQual', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceMultiplierQual'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceMultiplierQual', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PriceMultiplierQual


class QuantityUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityUOM.subclass:
            return QuantityUOM.subclass(*args_, **kwargs_)
        else:
            return QuantityUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class QuantityUOM


class ClassOfTradeCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClassOfTradeCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClassOfTradeCode.subclass:
            return ClassOfTradeCode.subclass(*args_, **kwargs_)
        else:
            return ClassOfTradeCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ClassOfTradeCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClassOfTradeCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ClassOfTradeCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ClassOfTradeCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ClassOfTradeCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ClassOfTradeCode


class ProductOrItemDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType.subclass:
            return ProductOrItemDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCharacteristicCode>%s</%sProductCharacteristicCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductCharacteristicCode), input_name='ProductCharacteristicCode')), namespace_, eol_))
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductDescriptionCode>%s</%sProductDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductDescriptionCode), input_name='ProductDescriptionCode')), namespace_, eol_))
        if self.ProductDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductDescription>%s</%sProductDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductDescription), input_name='ProductDescription')), namespace_, eol_))
        if self.SurfaceLayerPositionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSurfaceLayerPositionCode>%s</%sSurfaceLayerPositionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SurfaceLayerPositionCode), input_name='SurfaceLayerPositionCode')), namespace_, eol_))
        if self.SourceSubqualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceSubqualifier>%s</%sSourceSubqualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SourceSubqualifier), input_name='SourceSubqualifier')), namespace_, eol_))
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
        elif nodeName_ == 'ProductCharacteristicCode':
            ProductCharacteristicCode_ = child_.text
            ProductCharacteristicCode_ = self.gds_validate_string(ProductCharacteristicCode_, node, 'ProductCharacteristicCode')
            self.ProductCharacteristicCode = ProductCharacteristicCode_
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
        elif nodeName_ == 'ProductDescriptionCode':
            ProductDescriptionCode_ = child_.text
            ProductDescriptionCode_ = self.gds_validate_string(ProductDescriptionCode_, node, 'ProductDescriptionCode')
            self.ProductDescriptionCode = ProductDescriptionCode_
        elif nodeName_ == 'ProductDescription':
            ProductDescription_ = child_.text
            ProductDescription_ = self.gds_validate_string(ProductDescription_, node, 'ProductDescription')
            self.ProductDescription = ProductDescription_
        elif nodeName_ == 'SurfaceLayerPositionCode':
            SurfaceLayerPositionCode_ = child_.text
            SurfaceLayerPositionCode_ = self.gds_validate_string(SurfaceLayerPositionCode_, node, 'SurfaceLayerPositionCode')
            self.SurfaceLayerPositionCode = SurfaceLayerPositionCode_
        elif nodeName_ == 'SourceSubqualifier':
            SourceSubqualifier_ = child_.text
            SourceSubqualifier_ = self.gds_validate_string(SourceSubqualifier_, node, 'SourceSubqualifier')
            self.SourceSubqualifier = SourceSubqualifier_
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
        elif nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
# end class ProductOrItemDescriptionType


class ItemDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemDescriptionType.subclass:
            return ItemDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ItemDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemDescriptionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemDescriptionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemDescriptionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ItemDescriptionType


class AgencyQualifierCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AgencyQualifierCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AgencyQualifierCode.subclass:
            return AgencyQualifierCode.subclass(*args_, **kwargs_)
        else:
            return AgencyQualifierCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AgencyQualifierCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AgencyQualifierCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AgencyQualifierCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AgencyQualifierCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AgencyQualifierCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AgencyQualifierCode


class YesOrNoResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, YesOrNoResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if YesOrNoResponse.subclass:
            return YesOrNoResponse.subclass(*args_, **kwargs_)
        else:
            return YesOrNoResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='YesOrNoResponse', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='YesOrNoResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='YesOrNoResponse', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='YesOrNoResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='YesOrNoResponse', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class YesOrNoResponse


class MasterItemAttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        if ItemAttribute is None:
            self.ItemAttribute = []
        else:
            self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType.subclass:
            return MasterItemAttributeType.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def add_ItemAttribute(self, value): self.ItemAttribute.append(value)
    def insert_ItemAttribute_at(self, index, value): self.ItemAttribute.insert(index, value)
    def replace_ItemAttribute_at(self, index, value): self.ItemAttribute[index] = value
    def hasContent_(self):
        if (
            self.ItemAttribute
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemAttribute_ in self.ItemAttribute:
            ItemAttribute_.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType.factory()
            obj_.build(child_)
            self.ItemAttribute.append(obj_)
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType


class ItemAttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        if Measurements is None:
            self.Measurements = []
        else:
            self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType.subclass:
            return ItemAttributeType.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def add_Measurements(self, value): self.Measurements.append(value)
    def insert_Measurements_at(self, index, value): self.Measurements.insert(index, value)
    def replace_Measurements_at(self, index, value): self.Measurements[index] = value
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemAttributeQualifier>%s</%sItemAttributeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemAttributeQualifier), input_name='ItemAttributeQualifier')), namespace_, eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespace_, eol_))
        if self.ValueUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueUOM>%s</%sValueUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ValueUOM), input_name='ValueUOM')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        for Measurements_ in self.Measurements:
            Measurements_.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            ItemAttributeQualifier_ = child_.text
            ItemAttributeQualifier_ = self.gds_validate_string(ItemAttributeQualifier_, node, 'ItemAttributeQualifier')
            self.ItemAttributeQualifier = ItemAttributeQualifier_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'ValueUOM':
            ValueUOM_ = child_.text
            ValueUOM_ = self.gds_validate_string(ValueUOM_, node, 'ValueUOM')
            self.ValueUOM = ValueUOM_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType11.factory()
            obj_.build(child_)
            self.Measurements.append(obj_)
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType


class ItemAttributeQualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeQualifier.subclass:
            return ItemAttributeQualifier.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeQualifier', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeQualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeQualifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeQualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ItemAttributeQualifier


class ValueUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValueUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValueUOM.subclass:
            return ValueUOM.subclass(*args_, **kwargs_)
        else:
            return ValueUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ValueUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ValueUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ValueUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ValueUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ValueUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ValueUOM


class MeasurementsType11(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType11)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType11.subclass:
            return MeasurementsType11.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType11', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType11')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType11', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType11'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementRefIDCode>%s</%sMeasurementRefIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementRefIDCode), input_name='MeasurementRefIDCode')), namespace_, eol_))
        if self.MeasurementQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementQualifier>%s</%sMeasurementQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementQualifier), input_name='MeasurementQualifier')), namespace_, eol_))
        if self.MeasurementValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementValue>%s</%sMeasurementValue>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementValue), input_name='MeasurementValue')), namespace_, eol_))
        if self.CompositeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeUOM>%s</%sCompositeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CompositeUOM), input_name='CompositeUOM')), namespace_, eol_))
        if self.RangeMinimum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRangeMinimum>%s</%sRangeMinimum>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RangeMinimum), input_name='RangeMinimum')), namespace_, eol_))
        if self.RangeMaximum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRangeMaximum>%s</%sRangeMaximum>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RangeMaximum), input_name='RangeMaximum')), namespace_, eol_))
        if self.MeasurementSignificanceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementSignificanceCode>%s</%sMeasurementSignificanceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementSignificanceCode), input_name='MeasurementSignificanceCode')), namespace_, eol_))
        if self.MeasurementAttributeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasurementAttributeCode>%s</%sMeasurementAttributeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MeasurementAttributeCode), input_name='MeasurementAttributeCode')), namespace_, eol_))
        if self.SurfaceLayerPositionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSurfaceLayerPositionCode>%s</%sSurfaceLayerPositionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SurfaceLayerPositionCode), input_name='SurfaceLayerPositionCode')), namespace_, eol_))
        if self.IndustryCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndustryCodeQualifier>%s</%sIndustryCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IndustryCodeQualifier), input_name='IndustryCodeQualifier')), namespace_, eol_))
        if self.IndustryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndustryCode>%s</%sIndustryCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IndustryCode), input_name='IndustryCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            MeasurementRefIDCode_ = child_.text
            MeasurementRefIDCode_ = self.gds_validate_string(MeasurementRefIDCode_, node, 'MeasurementRefIDCode')
            self.MeasurementRefIDCode = MeasurementRefIDCode_
        elif nodeName_ == 'MeasurementQualifier':
            MeasurementQualifier_ = child_.text
            MeasurementQualifier_ = self.gds_validate_string(MeasurementQualifier_, node, 'MeasurementQualifier')
            self.MeasurementQualifier = MeasurementQualifier_
        elif nodeName_ == 'MeasurementValue':
            MeasurementValue_ = child_.text
            MeasurementValue_ = self.gds_validate_string(MeasurementValue_, node, 'MeasurementValue')
            self.MeasurementValue = MeasurementValue_
        elif nodeName_ == 'CompositeUOM':
            CompositeUOM_ = child_.text
            CompositeUOM_ = self.gds_validate_string(CompositeUOM_, node, 'CompositeUOM')
            self.CompositeUOM = CompositeUOM_
        elif nodeName_ == 'RangeMinimum':
            RangeMinimum_ = child_.text
            RangeMinimum_ = self.gds_validate_string(RangeMinimum_, node, 'RangeMinimum')
            self.RangeMinimum = RangeMinimum_
        elif nodeName_ == 'RangeMaximum':
            RangeMaximum_ = child_.text
            RangeMaximum_ = self.gds_validate_string(RangeMaximum_, node, 'RangeMaximum')
            self.RangeMaximum = RangeMaximum_
        elif nodeName_ == 'MeasurementSignificanceCode':
            MeasurementSignificanceCode_ = child_.text
            MeasurementSignificanceCode_ = self.gds_validate_string(MeasurementSignificanceCode_, node, 'MeasurementSignificanceCode')
            self.MeasurementSignificanceCode = MeasurementSignificanceCode_
        elif nodeName_ == 'MeasurementAttributeCode':
            MeasurementAttributeCode_ = child_.text
            MeasurementAttributeCode_ = self.gds_validate_string(MeasurementAttributeCode_, node, 'MeasurementAttributeCode')
            self.MeasurementAttributeCode = MeasurementAttributeCode_
        elif nodeName_ == 'SurfaceLayerPositionCode':
            SurfaceLayerPositionCode_ = child_.text
            SurfaceLayerPositionCode_ = self.gds_validate_string(SurfaceLayerPositionCode_, node, 'SurfaceLayerPositionCode')
            self.SurfaceLayerPositionCode = SurfaceLayerPositionCode_
        elif nodeName_ == 'IndustryCodeQualifier':
            IndustryCodeQualifier_ = child_.text
            IndustryCodeQualifier_ = self.gds_validate_string(IndustryCodeQualifier_, node, 'IndustryCodeQualifier')
            self.IndustryCodeQualifier = IndustryCodeQualifier_
        elif nodeName_ == 'IndustryCode':
            IndustryCode_ = child_.text
            IndustryCode_ = self.gds_validate_string(IndustryCode_, node, 'IndustryCode')
            self.IndustryCode = IndustryCode_
# end class MeasurementsType11


class PhysicalDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType.subclass:
            return PhysicalDetailsType.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackQualifier>%s</%sPackQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackQualifier), input_name='PackQualifier')), namespace_, eol_))
        if self.PackValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackValue>%s</%sPackValue>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackValue), input_name='PackValue')), namespace_, eol_))
        if self.PackSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackSize>%s</%sPackSize>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackSize), input_name='PackSize')), namespace_, eol_))
        if self.PackUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackUOM>%s</%sPackUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackUOM), input_name='PackUOM')), namespace_, eol_))
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PackWeight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeight>%s</%sPackWeight>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeight), input_name='PackWeight')), namespace_, eol_))
        if self.PackWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeightUOM>%s</%sPackWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeightUOM), input_name='PackWeightUOM')), namespace_, eol_))
        if self.PackVolume is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolume>%s</%sPackVolume>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolume), input_name='PackVolume')), namespace_, eol_))
        if self.PackVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolumeUOM>%s</%sPackVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolumeUOM), input_name='PackVolumeUOM')), namespace_, eol_))
        if self.PackLength is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackLength>%s</%sPackLength>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackLength), input_name='PackLength')), namespace_, eol_))
        if self.PackWidth is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWidth>%s</%sPackWidth>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWidth), input_name='PackWidth')), namespace_, eol_))
        if self.PackHeight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackHeight>%s</%sPackHeight>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackHeight), input_name='PackHeight')), namespace_, eol_))
        if self.PackDimensionUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackDimensionUOM>%s</%sPackDimensionUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackDimensionUOM), input_name='PackDimensionUOM')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
        if self.SurfaceLayerPositionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSurfaceLayerPositionCode>%s</%sSurfaceLayerPositionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SurfaceLayerPositionCode), input_name='SurfaceLayerPositionCode')), namespace_, eol_))
        if self.AssignedID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignedID>%s</%sAssignedID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AssignedID), input_name='AssignedID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            PackQualifier_ = child_.text
            PackQualifier_ = self.gds_validate_string(PackQualifier_, node, 'PackQualifier')
            self.PackQualifier = PackQualifier_
        elif nodeName_ == 'PackValue':
            PackValue_ = child_.text
            PackValue_ = self.gds_validate_string(PackValue_, node, 'PackValue')
            self.PackValue = PackValue_
        elif nodeName_ == 'PackSize':
            PackSize_ = child_.text
            PackSize_ = self.gds_validate_string(PackSize_, node, 'PackSize')
            self.PackSize = PackSize_
        elif nodeName_ == 'PackUOM':
            PackUOM_ = child_.text
            PackUOM_ = self.gds_validate_string(PackUOM_, node, 'PackUOM')
            self.PackUOM = PackUOM_
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
        elif nodeName_ == 'PackWeight':
            PackWeight_ = child_.text
            PackWeight_ = self.gds_validate_string(PackWeight_, node, 'PackWeight')
            self.PackWeight = PackWeight_
        elif nodeName_ == 'PackWeightUOM':
            PackWeightUOM_ = child_.text
            PackWeightUOM_ = self.gds_validate_string(PackWeightUOM_, node, 'PackWeightUOM')
            self.PackWeightUOM = PackWeightUOM_
        elif nodeName_ == 'PackVolume':
            PackVolume_ = child_.text
            PackVolume_ = self.gds_validate_string(PackVolume_, node, 'PackVolume')
            self.PackVolume = PackVolume_
        elif nodeName_ == 'PackVolumeUOM':
            PackVolumeUOM_ = child_.text
            PackVolumeUOM_ = self.gds_validate_string(PackVolumeUOM_, node, 'PackVolumeUOM')
            self.PackVolumeUOM = PackVolumeUOM_
        elif nodeName_ == 'PackLength':
            PackLength_ = child_.text
            PackLength_ = self.gds_validate_string(PackLength_, node, 'PackLength')
            self.PackLength = PackLength_
        elif nodeName_ == 'PackWidth':
            PackWidth_ = child_.text
            PackWidth_ = self.gds_validate_string(PackWidth_, node, 'PackWidth')
            self.PackWidth = PackWidth_
        elif nodeName_ == 'PackHeight':
            PackHeight_ = child_.text
            PackHeight_ = self.gds_validate_string(PackHeight_, node, 'PackHeight')
            self.PackHeight = PackHeight_
        elif nodeName_ == 'PackDimensionUOM':
            PackDimensionUOM_ = child_.text
            PackDimensionUOM_ = self.gds_validate_string(PackDimensionUOM_, node, 'PackDimensionUOM')
            self.PackDimensionUOM = PackDimensionUOM_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'SurfaceLayerPositionCode':
            SurfaceLayerPositionCode_ = child_.text
            SurfaceLayerPositionCode_ = self.gds_validate_string(SurfaceLayerPositionCode_, node, 'SurfaceLayerPositionCode')
            self.SurfaceLayerPositionCode = SurfaceLayerPositionCode_
        elif nodeName_ == 'AssignedID':
            AssignedID_ = child_.text
            AssignedID_ = self.gds_validate_string(AssignedID_, node, 'AssignedID')
            self.AssignedID = AssignedID_
# end class PhysicalDetailsType


class PackQualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackQualifier.subclass:
            return PackQualifier.subclass(*args_, **kwargs_)
        else:
            return PackQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackQualifier', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackQualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackQualifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackQualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PackQualifier


class PackUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackUOM.subclass:
            return PackUOM.subclass(*args_, **kwargs_)
        else:
            return PackUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PackUOM


class PackWeightUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackWeightUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackWeightUOM.subclass:
            return PackWeightUOM.subclass(*args_, **kwargs_)
        else:
            return PackWeightUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackWeightUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackWeightUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackWeightUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackWeightUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackWeightUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PackWeightUOM


class PackVolumeUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackVolumeUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackVolumeUOM.subclass:
            return PackVolumeUOM.subclass(*args_, **kwargs_)
        else:
            return PackVolumeUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackVolumeUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackVolumeUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackVolumeUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackVolumeUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackVolumeUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PackVolumeUOM


class PackDimensionUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackDimensionUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackDimensionUOM.subclass:
            return PackDimensionUOM.subclass(*args_, **kwargs_)
        else:
            return PackDimensionUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackDimensionUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackDimensionUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackDimensionUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackDimensionUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackDimensionUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PackDimensionUOM


class ReferenceType12(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType12)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType12.subclass:
            return ReferenceType12.subclass(*args_, **kwargs_)
        else:
            return ReferenceType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType12', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType12', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType12'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType13.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType12


class ReferenceIDsType13(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType13)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType13.subclass:
            return ReferenceIDsType13.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType13', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType13')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType13', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType13'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
# end class ReferenceIDsType13


class NotesType14(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType14)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType14.subclass:
            return NotesType14.subclass(*args_, **kwargs_)
        else:
            return NotesType14(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType14', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType14')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType14', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType14'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType14', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteInformationField>%s</%sNoteInformationField>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteInformationField), input_name='NoteInformationField')), namespace_, eol_))
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespace_, eol_))
        if self.NoteFormatCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteFormatCode>%s</%sNoteFormatCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteFormatCode), input_name='NoteFormatCode')), namespace_, eol_))
        if self.NoteFunctionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteFunctionCode>%s</%sNoteFunctionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteFunctionCode), input_name='NoteFunctionCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
        elif nodeName_ == 'NoteInformationField':
            NoteInformationField_ = child_.text
            NoteInformationField_ = self.gds_validate_string(NoteInformationField_, node, 'NoteInformationField')
            self.NoteInformationField = NoteInformationField_
        elif nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'NoteFormatCode':
            NoteFormatCode_ = child_.text
            NoteFormatCode_ = self.gds_validate_string(NoteFormatCode_, node, 'NoteFormatCode')
            self.NoteFormatCode = NoteFormatCode_
        elif nodeName_ == 'NoteFunctionCode':
            NoteFunctionCode_ = child_.text
            NoteFunctionCode_ = self.gds_validate_string(NoteFunctionCode_, node, 'NoteFunctionCode')
            self.NoteFunctionCode = NoteFunctionCode_
# end class NotesType14


class CommodityType15(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType15)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType15.subclass:
            return CommodityType15.subclass(*args_, **kwargs_)
        else:
            return CommodityType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType15', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType15')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType15', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType15'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCode>%s</%sCommodityCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCode), input_name='CommodityCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
        elif nodeName_ == 'CommodityCode':
            CommodityCode_ = child_.text
            CommodityCode_ = self.gds_validate_string(CommodityCode_, node, 'CommodityCode')
            self.CommodityCode = CommodityCode_
# end class CommodityType15


class AddressType16(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType16)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType16.subclass:
            return AddressType16.subclass(*args_, **kwargs_)
        else:
            return AddressType16(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType16', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType16')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType16', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType16'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType16', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLocationNumber>%s</%sAddressLocationNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressLocationNumber), input_name='AddressLocationNumber')), namespace_, eol_))
        if self.AddressName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressName>%s</%sAddressName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressName), input_name='AddressName')), namespace_, eol_))
        if self.AddressAlternateName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName>%s</%sAddressAlternateName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName), input_name='AddressAlternateName')), namespace_, eol_))
        if self.AddressAlternateName2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName2>%s</%sAddressAlternateName2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName2), input_name='AddressAlternateName2')), namespace_, eol_))
        if self.Address1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress1>%s</%sAddress1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address1), input_name='Address1')), namespace_, eol_))
        if self.Address2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress2>%s</%sAddress2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address2), input_name='Address2')), namespace_, eol_))
        if self.Address3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress3>%s</%sAddress3>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address3), input_name='Address3')), namespace_, eol_))
        if self.Address4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress4>%s</%sAddress4>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address4), input_name='Address4')), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespace_, eol_))
        if self.LocationID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationID>%s</%sLocationID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationID), input_name='LocationID')), namespace_, eol_))
        if self.CountrySubDivision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountrySubDivision>%s</%sCountrySubDivision>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CountrySubDivision), input_name='CountrySubDivision')), namespace_, eol_))
        if self.AddressTaxIdNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxIdNumber>%s</%sAddressTaxIdNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxIdNumber), input_name='AddressTaxIdNumber')), namespace_, eol_))
        if self.AddressTaxExemptNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxExemptNumber>%s</%sAddressTaxExemptNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxExemptNumber), input_name='AddressTaxExemptNumber')), namespace_, eol_))
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
        elif nodeName_ == 'AddressLocationNumber':
            AddressLocationNumber_ = child_.text
            AddressLocationNumber_ = self.gds_validate_string(AddressLocationNumber_, node, 'AddressLocationNumber')
            self.AddressLocationNumber = AddressLocationNumber_
        elif nodeName_ == 'AddressName':
            AddressName_ = child_.text
            AddressName_ = self.gds_validate_string(AddressName_, node, 'AddressName')
            self.AddressName = AddressName_
        elif nodeName_ == 'AddressAlternateName':
            AddressAlternateName_ = child_.text
            AddressAlternateName_ = self.gds_validate_string(AddressAlternateName_, node, 'AddressAlternateName')
            self.AddressAlternateName = AddressAlternateName_
        elif nodeName_ == 'AddressAlternateName2':
            AddressAlternateName2_ = child_.text
            AddressAlternateName2_ = self.gds_validate_string(AddressAlternateName2_, node, 'AddressAlternateName2')
            self.AddressAlternateName2 = AddressAlternateName2_
        elif nodeName_ == 'Address1':
            Address1_ = child_.text
            Address1_ = self.gds_validate_string(Address1_, node, 'Address1')
            self.Address1 = Address1_
        elif nodeName_ == 'Address2':
            Address2_ = child_.text
            Address2_ = self.gds_validate_string(Address2_, node, 'Address2')
            self.Address2 = Address2_
        elif nodeName_ == 'Address3':
            Address3_ = child_.text
            Address3_ = self.gds_validate_string(Address3_, node, 'Address3')
            self.Address3 = Address3_
        elif nodeName_ == 'Address4':
            Address4_ = child_.text
            Address4_ = self.gds_validate_string(Address4_, node, 'Address4')
            self.Address4 = Address4_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'LocationID':
            LocationID_ = child_.text
            LocationID_ = self.gds_validate_string(LocationID_, node, 'LocationID')
            self.LocationID = LocationID_
        elif nodeName_ == 'CountrySubDivision':
            CountrySubDivision_ = child_.text
            CountrySubDivision_ = self.gds_validate_string(CountrySubDivision_, node, 'CountrySubDivision')
            self.CountrySubDivision = CountrySubDivision_
        elif nodeName_ == 'AddressTaxIdNumber':
            AddressTaxIdNumber_ = child_.text
            AddressTaxIdNumber_ = self.gds_validate_string(AddressTaxIdNumber_, node, 'AddressTaxIdNumber')
            self.AddressTaxIdNumber = AddressTaxIdNumber_
        elif nodeName_ == 'AddressTaxExemptNumber':
            AddressTaxExemptNumber_ = child_.text
            AddressTaxExemptNumber_ = self.gds_validate_string(AddressTaxExemptNumber_, node, 'AddressTaxExemptNumber')
            self.AddressTaxExemptNumber = AddressTaxExemptNumber_
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType17.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType19.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType21.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType16


class ReferenceType17(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType17)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType17.subclass:
            return ReferenceType17.subclass(*args_, **kwargs_)
        else:
            return ReferenceType17(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType17', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType17')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType17', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType17'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType17', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType18.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType17


class ReferenceIDsType18(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType18)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType18.subclass:
            return ReferenceIDsType18.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType18(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType18', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType18')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType18', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType18'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType18', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
# end class ReferenceIDsType18


class ContactType19(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType19)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType19.subclass:
            return ContactType19.subclass(*args_, **kwargs_)
        else:
            return ContactType19(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType19', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType19')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType19', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType19'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType19', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactName>%s</%sContactName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), namespace_, eol_))
        if self.PrimaryPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryPhone>%s</%sPrimaryPhone>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryPhone), input_name='PrimaryPhone')), namespace_, eol_))
        if self.PrimaryFax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryFax>%s</%sPrimaryFax>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryFax), input_name='PrimaryFax')), namespace_, eol_))
        if self.PrimaryEmail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryEmail>%s</%sPrimaryEmail>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryEmail), input_name='PrimaryEmail')), namespace_, eol_))
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactReference>%s</%sContactReference>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactReference), input_name='ContactReference')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
        elif nodeName_ == 'ContactName':
            ContactName_ = child_.text
            ContactName_ = self.gds_validate_string(ContactName_, node, 'ContactName')
            self.ContactName = ContactName_
        elif nodeName_ == 'PrimaryPhone':
            PrimaryPhone_ = child_.text
            PrimaryPhone_ = self.gds_validate_string(PrimaryPhone_, node, 'PrimaryPhone')
            self.PrimaryPhone = PrimaryPhone_
        elif nodeName_ == 'PrimaryFax':
            PrimaryFax_ = child_.text
            PrimaryFax_ = self.gds_validate_string(PrimaryFax_, node, 'PrimaryFax')
            self.PrimaryFax = PrimaryFax_
        elif nodeName_ == 'PrimaryEmail':
            PrimaryEmail_ = child_.text
            PrimaryEmail_ = self.gds_validate_string(PrimaryEmail_, node, 'PrimaryEmail')
            self.PrimaryEmail = PrimaryEmail_
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType20.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            ContactReference_ = child_.text
            ContactReference_ = self.gds_validate_string(ContactReference_, node, 'ContactReference')
            self.ContactReference = ContactReference_
# end class ContactType19


class AdditionalContactDetailsType20(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType20)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType20.subclass:
            return AdditionalContactDetailsType20.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType20(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType20', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType20')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType20', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType20'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType20', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactID>%s</%sContactID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactID), input_name='ContactID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
        elif nodeName_ == 'ContactID':
            ContactID_ = child_.text
            ContactID_ = self.gds_validate_string(ContactID_, node, 'ContactID')
            self.ContactID = ContactID_
# end class AdditionalContactDetailsType20


class DateType21(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType21)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType21.subclass:
            return DateType21.subclass(*args_, **kwargs_)
        else:
            return DateType21(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType21', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType21')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType21', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType21'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType21', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        if self.DateTimePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimePeriod>%s</%sDateTimePeriod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimePeriod), input_name='DateTimePeriod')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'DateTimePeriod':
            DateTimePeriod_ = child_.text
            DateTimePeriod_ = self.gds_validate_string(DateTimePeriod_, node, 'DateTimePeriod')
            self.DateTimePeriod = DateTimePeriod_
# end class DateType21


class SublinesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Subline=None):
        self.original_tagname_ = None
        if Subline is None:
            self.Subline = []
        else:
            self.Subline = Subline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublinesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublinesType.subclass:
            return SublinesType.subclass(*args_, **kwargs_)
        else:
            return SublinesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def add_Subline(self, value): self.Subline.append(value)
    def insert_Subline_at(self, index, value): self.Subline.insert(index, value)
    def replace_Subline_at(self, index, value): self.Subline[index] = value
    def hasContent_(self):
        if (
            self.Subline
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublinesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublinesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublinesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublinesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublinesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Subline_ in self.Subline:
            Subline_.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Subline':
            obj_ = SublineType.factory()
            obj_.build(child_)
            self.Subline.append(obj_)
            obj_.original_tagname_ = 'Subline'
# end class SublinesType


class SublineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, Date=None, PriceInformation=None, ProductOrItemDescription=None, PhysicalDetails=None, Reference=None, Notes=None, Tax=None, ChargesAllowances=None, Address=None, Commodity=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        if PriceInformation is None:
            self.PriceInformation = []
        else:
            self.PriceInformation = PriceInformation
        if ProductOrItemDescription is None:
            self.ProductOrItemDescription = []
        else:
            self.ProductOrItemDescription = ProductOrItemDescription
        if PhysicalDetails is None:
            self.PhysicalDetails = []
        else:
            self.PhysicalDetails = PhysicalDetails
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Notes is None:
            self.Notes = []
        else:
            self.Notes = Notes
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        if ChargesAllowances is None:
            self.ChargesAllowances = []
        else:
            self.ChargesAllowances = ChargesAllowances
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType.subclass:
            return SublineType.subclass(*args_, **kwargs_)
        else:
            return SublineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def add_PriceInformation(self, value): self.PriceInformation.append(value)
    def insert_PriceInformation_at(self, index, value): self.PriceInformation.insert(index, value)
    def replace_PriceInformation_at(self, index, value): self.PriceInformation[index] = value
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def add_ProductOrItemDescription(self, value): self.ProductOrItemDescription.append(value)
    def insert_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription.insert(index, value)
    def replace_ProductOrItemDescription_at(self, index, value): self.ProductOrItemDescription[index] = value
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def add_PhysicalDetails(self, value): self.PhysicalDetails.append(value)
    def insert_PhysicalDetails_at(self, index, value): self.PhysicalDetails.insert(index, value)
    def replace_PhysicalDetails_at(self, index, value): self.PhysicalDetails[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def add_Notes(self, value): self.Notes.append(value)
    def insert_Notes_at(self, index, value): self.Notes.insert(index, value)
    def replace_Notes_at(self, index, value): self.Notes[index] = value
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def add_ChargesAllowances(self, value): self.ChargesAllowances.append(value)
    def insert_ChargesAllowances_at(self, index, value): self.ChargesAllowances.insert(index, value)
    def replace_ChargesAllowances_at(self, index, value): self.ChargesAllowances[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.Date or
            self.PriceInformation or
            self.ProductOrItemDescription or
            self.PhysicalDetails or
            self.Reference or
            self.Notes or
            self.Tax or
            self.ChargesAllowances or
            self.Address or
            self.Commodity
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        for PriceInformation_ in self.PriceInformation:
            PriceInformation_.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        for ProductOrItemDescription_ in self.ProductOrItemDescription:
            ProductOrItemDescription_.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        for PhysicalDetails_ in self.PhysicalDetails:
            PhysicalDetails_.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Notes_ in self.Notes:
            Notes_.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        for ChargesAllowances_ in self.ChargesAllowances:
            ChargesAllowances_.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'Date':
            obj_ = DateType24.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType25.factory()
            obj_.build(child_)
            self.PriceInformation.append(obj_)
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType26.factory()
            obj_.build(child_)
            self.ProductOrItemDescription.append(obj_)
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType27.factory()
            obj_.build(child_)
            self.PhysicalDetails.append(obj_)
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType28.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType30.factory()
            obj_.build(child_)
            self.Notes.append(obj_)
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Tax':
            obj_ = TaxType31.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType32.factory()
            obj_.build(child_)
            self.ChargesAllowances.append(obj_)
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'Address':
            obj_ = AddressType34.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType40.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
# end class SublineType


class SublineItemDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, Gender=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        if ProductID is None:
            self.ProductID = []
        else:
            self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.Gender = Gender
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType.subclass:
            return SublineItemDetailType.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def add_ProductID(self, value): self.ProductID.append(value)
    def insert_ProductID_at(self, index, value): self.ProductID.insert(index, value)
    def replace_ProductID_at(self, index, value): self.ProductID[index] = value
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_Gender(self): return self.Gender
    def set_Gender(self, Gender): self.Gender = Gender
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.Gender is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineSequenceNumber>%s</%sLineSequenceNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LineSequenceNumber), input_name='LineSequenceNumber')), namespace_, eol_))
        if self.ApplicationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationId>%s</%sApplicationId>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationId), input_name='ApplicationId')), namespace_, eol_))
        if self.BuyerPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuyerPartNumber>%s</%sBuyerPartNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BuyerPartNumber), input_name='BuyerPartNumber')), namespace_, eol_))
        if self.VendorPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVendorPartNumber>%s</%sVendorPartNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VendorPartNumber), input_name='VendorPartNumber')), namespace_, eol_))
        if self.ConsumerPackageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsumerPackageCode>%s</%sConsumerPackageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ConsumerPackageCode), input_name='ConsumerPackageCode')), namespace_, eol_))
        if self.EAN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEAN>%s</%sEAN>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EAN), input_name='EAN')), namespace_, eol_))
        if self.GTIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTIN>%s</%sGTIN>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.GTIN), input_name='GTIN')), namespace_, eol_))
        if self.UPCCaseCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUPCCaseCode>%s</%sUPCCaseCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UPCCaseCode), input_name='UPCCaseCode')), namespace_, eol_))
        if self.NatlDrugCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNatlDrugCode>%s</%sNatlDrugCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NatlDrugCode), input_name='NatlDrugCode')), namespace_, eol_))
        if self.InternationalStandardBookNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternationalStandardBookNumber>%s</%sInternationalStandardBookNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InternationalStandardBookNumber), input_name='InternationalStandardBookNumber')), namespace_, eol_))
        for ProductID_ in self.ProductID:
            ProductID_.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductSizeCode>%s</%sProductSizeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductSizeCode), input_name='ProductSizeCode')), namespace_, eol_))
        if self.ProductSizeDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductSizeDescription>%s</%sProductSizeDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductSizeDescription), input_name='ProductSizeDescription')), namespace_, eol_))
        if self.ProductColorCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductColorCode>%s</%sProductColorCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductColorCode), input_name='ProductColorCode')), namespace_, eol_))
        if self.ProductColorDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductColorDescription>%s</%sProductColorDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductColorDescription), input_name='ProductColorDescription')), namespace_, eol_))
        if self.ProductMaterialCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductMaterialCode>%s</%sProductMaterialCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductMaterialCode), input_name='ProductMaterialCode')), namespace_, eol_))
        if self.ProductMaterialDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductMaterialDescription>%s</%sProductMaterialDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductMaterialDescription), input_name='ProductMaterialDescription')), namespace_, eol_))
        if self.ProductProcessCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductProcessCode>%s</%sProductProcessCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductProcessCode), input_name='ProductProcessCode')), namespace_, eol_))
        if self.ProductProcessDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductProcessDescription>%s</%sProductProcessDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductProcessDescription), input_name='ProductProcessDescription')), namespace_, eol_))
        if self.QtyPer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQtyPer>%s</%sQtyPer>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QtyPer), input_name='QtyPer')), namespace_, eol_))
        if self.QtyPerUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQtyPerUOM>%s</%sQtyPerUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QtyPerUOM), input_name='QtyPerUOM')), namespace_, eol_))
        if self.PurchasePriceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceType>%s</%sPurchasePriceType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceType), input_name='PurchasePriceType')), namespace_, eol_))
        if self.PurchasePrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePrice>%s</%sPurchasePrice>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePrice), input_name='PurchasePrice')), namespace_, eol_))
        if self.PurchasePriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchasePriceBasis>%s</%sPurchasePriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PurchasePriceBasis), input_name='PurchasePriceBasis')), namespace_, eol_))
        if self.Gender is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGender>%s</%sGender>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Gender), input_name='Gender')), namespace_, eol_))
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            LineSequenceNumber_ = child_.text
            LineSequenceNumber_ = self.gds_validate_string(LineSequenceNumber_, node, 'LineSequenceNumber')
            self.LineSequenceNumber = LineSequenceNumber_
        elif nodeName_ == 'ApplicationId':
            ApplicationId_ = child_.text
            ApplicationId_ = self.gds_validate_string(ApplicationId_, node, 'ApplicationId')
            self.ApplicationId = ApplicationId_
        elif nodeName_ == 'BuyerPartNumber':
            BuyerPartNumber_ = child_.text
            BuyerPartNumber_ = self.gds_validate_string(BuyerPartNumber_, node, 'BuyerPartNumber')
            self.BuyerPartNumber = BuyerPartNumber_
        elif nodeName_ == 'VendorPartNumber':
            VendorPartNumber_ = child_.text
            VendorPartNumber_ = self.gds_validate_string(VendorPartNumber_, node, 'VendorPartNumber')
            self.VendorPartNumber = VendorPartNumber_
        elif nodeName_ == 'ConsumerPackageCode':
            ConsumerPackageCode_ = child_.text
            ConsumerPackageCode_ = self.gds_validate_string(ConsumerPackageCode_, node, 'ConsumerPackageCode')
            self.ConsumerPackageCode = ConsumerPackageCode_
        elif nodeName_ == 'EAN':
            EAN_ = child_.text
            EAN_ = self.gds_validate_string(EAN_, node, 'EAN')
            self.EAN = EAN_
        elif nodeName_ == 'GTIN':
            GTIN_ = child_.text
            GTIN_ = self.gds_validate_string(GTIN_, node, 'GTIN')
            self.GTIN = GTIN_
        elif nodeName_ == 'UPCCaseCode':
            UPCCaseCode_ = child_.text
            UPCCaseCode_ = self.gds_validate_string(UPCCaseCode_, node, 'UPCCaseCode')
            self.UPCCaseCode = UPCCaseCode_
        elif nodeName_ == 'NatlDrugCode':
            NatlDrugCode_ = child_.text
            NatlDrugCode_ = self.gds_validate_string(NatlDrugCode_, node, 'NatlDrugCode')
            self.NatlDrugCode = NatlDrugCode_
        elif nodeName_ == 'InternationalStandardBookNumber':
            InternationalStandardBookNumber_ = child_.text
            InternationalStandardBookNumber_ = self.gds_validate_string(InternationalStandardBookNumber_, node, 'InternationalStandardBookNumber')
            self.InternationalStandardBookNumber = InternationalStandardBookNumber_
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType22.factory()
            obj_.build(child_)
            self.ProductID.append(obj_)
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            ProductSizeCode_ = child_.text
            ProductSizeCode_ = self.gds_validate_string(ProductSizeCode_, node, 'ProductSizeCode')
            self.ProductSizeCode = ProductSizeCode_
        elif nodeName_ == 'ProductSizeDescription':
            ProductSizeDescription_ = child_.text
            ProductSizeDescription_ = self.gds_validate_string(ProductSizeDescription_, node, 'ProductSizeDescription')
            self.ProductSizeDescription = ProductSizeDescription_
        elif nodeName_ == 'ProductColorCode':
            ProductColorCode_ = child_.text
            ProductColorCode_ = self.gds_validate_string(ProductColorCode_, node, 'ProductColorCode')
            self.ProductColorCode = ProductColorCode_
        elif nodeName_ == 'ProductColorDescription':
            ProductColorDescription_ = child_.text
            ProductColorDescription_ = self.gds_validate_string(ProductColorDescription_, node, 'ProductColorDescription')
            self.ProductColorDescription = ProductColorDescription_
        elif nodeName_ == 'ProductMaterialCode':
            ProductMaterialCode_ = child_.text
            ProductMaterialCode_ = self.gds_validate_string(ProductMaterialCode_, node, 'ProductMaterialCode')
            self.ProductMaterialCode = ProductMaterialCode_
        elif nodeName_ == 'ProductMaterialDescription':
            ProductMaterialDescription_ = child_.text
            ProductMaterialDescription_ = self.gds_validate_string(ProductMaterialDescription_, node, 'ProductMaterialDescription')
            self.ProductMaterialDescription = ProductMaterialDescription_
        elif nodeName_ == 'ProductProcessCode':
            ProductProcessCode_ = child_.text
            ProductProcessCode_ = self.gds_validate_string(ProductProcessCode_, node, 'ProductProcessCode')
            self.ProductProcessCode = ProductProcessCode_
        elif nodeName_ == 'ProductProcessDescription':
            ProductProcessDescription_ = child_.text
            ProductProcessDescription_ = self.gds_validate_string(ProductProcessDescription_, node, 'ProductProcessDescription')
            self.ProductProcessDescription = ProductProcessDescription_
        elif nodeName_ == 'QtyPer':
            QtyPer_ = child_.text
            QtyPer_ = self.gds_validate_string(QtyPer_, node, 'QtyPer')
            self.QtyPer = QtyPer_
        elif nodeName_ == 'QtyPerUOM':
            QtyPerUOM_ = child_.text
            QtyPerUOM_ = self.gds_validate_string(QtyPerUOM_, node, 'QtyPerUOM')
            self.QtyPerUOM = QtyPerUOM_
        elif nodeName_ == 'PurchasePriceType':
            PurchasePriceType_ = child_.text
            PurchasePriceType_ = self.gds_validate_string(PurchasePriceType_, node, 'PurchasePriceType')
            self.PurchasePriceType = PurchasePriceType_
        elif nodeName_ == 'PurchasePrice':
            PurchasePrice_ = child_.text
            PurchasePrice_ = self.gds_validate_string(PurchasePrice_, node, 'PurchasePrice')
            self.PurchasePrice = PurchasePrice_
        elif nodeName_ == 'PurchasePriceBasis':
            PurchasePriceBasis_ = child_.text
            PurchasePriceBasis_ = self.gds_validate_string(PurchasePriceBasis_, node, 'PurchasePriceBasis')
            self.PurchasePriceBasis = PurchasePriceBasis_
        elif nodeName_ == 'Gender':
            Gender_ = child_.text
            Gender_ = self.gds_validate_string(Gender_, node, 'Gender')
            self.Gender = Gender_
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType23.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType


class QtyPerUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QtyPerUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QtyPerUOM.subclass:
            return QtyPerUOM.subclass(*args_, **kwargs_)
        else:
            return QtyPerUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QtyPerUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QtyPerUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QtyPerUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QtyPerUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QtyPerUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class QtyPerUOM


class ProductIDType22(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType22)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType22.subclass:
            return ProductIDType22.subclass(*args_, **kwargs_)
        else:
            return ProductIDType22(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType22', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType22')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType22', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType22'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType22', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumberQual>%s</%sPartNumberQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumberQual), input_name='PartNumberQual')), namespace_, eol_))
        if self.PartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            PartNumberQual_ = child_.text
            PartNumberQual_ = self.gds_validate_string(PartNumberQual_, node, 'PartNumberQual')
            self.PartNumberQual = PartNumberQual_
        elif nodeName_ == 'PartNumber':
            PartNumber_ = child_.text
            PartNumber_ = self.gds_validate_string(PartNumber_, node, 'PartNumber')
            self.PartNumber = PartNumber_
# end class ProductIDType22


class NRFStandardColorAndSizeType23(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType23)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType23.subclass:
            return NRFStandardColorAndSizeType23.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType23', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType23')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType23', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType23'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType23', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNRFColorCode>%s</%sNRFColorCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NRFColorCode), input_name='NRFColorCode')), namespace_, eol_))
        if self.ColorCategoryName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sColorCategoryName>%s</%sColorCategoryName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ColorCategoryName), input_name='ColorCategoryName')), namespace_, eol_))
        if self.ColorPrimaryDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sColorPrimaryDescription>%s</%sColorPrimaryDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ColorPrimaryDescription), input_name='ColorPrimaryDescription')), namespace_, eol_))
        if self.NRFSizeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNRFSizeCode>%s</%sNRFSizeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NRFSizeCode), input_name='NRFSizeCode')), namespace_, eol_))
        if self.SizeCategoryName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeCategoryName>%s</%sSizeCategoryName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeCategoryName), input_name='SizeCategoryName')), namespace_, eol_))
        if self.SizePrimaryDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizePrimaryDescription>%s</%sSizePrimaryDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizePrimaryDescription), input_name='SizePrimaryDescription')), namespace_, eol_))
        if self.SizeSecondaryDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeSecondaryDescription>%s</%sSizeSecondaryDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeSecondaryDescription), input_name='SizeSecondaryDescription')), namespace_, eol_))
        if self.SizeTableName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeTableName>%s</%sSizeTableName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeTableName), input_name='SizeTableName')), namespace_, eol_))
        if self.SizeHeading1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeHeading1>%s</%sSizeHeading1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeHeading1), input_name='SizeHeading1')), namespace_, eol_))
        if self.SizeHeading2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeHeading2>%s</%sSizeHeading2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeHeading2), input_name='SizeHeading2')), namespace_, eol_))
        if self.SizeHeading3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeHeading3>%s</%sSizeHeading3>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeHeading3), input_name='SizeHeading3')), namespace_, eol_))
        if self.SizeHeading4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSizeHeading4>%s</%sSizeHeading4>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SizeHeading4), input_name='SizeHeading4')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            NRFColorCode_ = child_.text
            NRFColorCode_ = self.gds_validate_string(NRFColorCode_, node, 'NRFColorCode')
            self.NRFColorCode = NRFColorCode_
        elif nodeName_ == 'ColorCategoryName':
            ColorCategoryName_ = child_.text
            ColorCategoryName_ = self.gds_validate_string(ColorCategoryName_, node, 'ColorCategoryName')
            self.ColorCategoryName = ColorCategoryName_
        elif nodeName_ == 'ColorPrimaryDescription':
            ColorPrimaryDescription_ = child_.text
            ColorPrimaryDescription_ = self.gds_validate_string(ColorPrimaryDescription_, node, 'ColorPrimaryDescription')
            self.ColorPrimaryDescription = ColorPrimaryDescription_
        elif nodeName_ == 'NRFSizeCode':
            NRFSizeCode_ = child_.text
            NRFSizeCode_ = self.gds_validate_string(NRFSizeCode_, node, 'NRFSizeCode')
            self.NRFSizeCode = NRFSizeCode_
        elif nodeName_ == 'SizeCategoryName':
            SizeCategoryName_ = child_.text
            SizeCategoryName_ = self.gds_validate_string(SizeCategoryName_, node, 'SizeCategoryName')
            self.SizeCategoryName = SizeCategoryName_
        elif nodeName_ == 'SizePrimaryDescription':
            SizePrimaryDescription_ = child_.text
            SizePrimaryDescription_ = self.gds_validate_string(SizePrimaryDescription_, node, 'SizePrimaryDescription')
            self.SizePrimaryDescription = SizePrimaryDescription_
        elif nodeName_ == 'SizeSecondaryDescription':
            SizeSecondaryDescription_ = child_.text
            SizeSecondaryDescription_ = self.gds_validate_string(SizeSecondaryDescription_, node, 'SizeSecondaryDescription')
            self.SizeSecondaryDescription = SizeSecondaryDescription_
        elif nodeName_ == 'SizeTableName':
            SizeTableName_ = child_.text
            SizeTableName_ = self.gds_validate_string(SizeTableName_, node, 'SizeTableName')
            self.SizeTableName = SizeTableName_
        elif nodeName_ == 'SizeHeading1':
            SizeHeading1_ = child_.text
            SizeHeading1_ = self.gds_validate_string(SizeHeading1_, node, 'SizeHeading1')
            self.SizeHeading1 = SizeHeading1_
        elif nodeName_ == 'SizeHeading2':
            SizeHeading2_ = child_.text
            SizeHeading2_ = self.gds_validate_string(SizeHeading2_, node, 'SizeHeading2')
            self.SizeHeading2 = SizeHeading2_
        elif nodeName_ == 'SizeHeading3':
            SizeHeading3_ = child_.text
            SizeHeading3_ = self.gds_validate_string(SizeHeading3_, node, 'SizeHeading3')
            self.SizeHeading3 = SizeHeading3_
        elif nodeName_ == 'SizeHeading4':
            SizeHeading4_ = child_.text
            SizeHeading4_ = self.gds_validate_string(SizeHeading4_, node, 'SizeHeading4')
            self.SizeHeading4 = SizeHeading4_
# end class NRFStandardColorAndSizeType23


class DateType24(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType24)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType24.subclass:
            return DateType24.subclass(*args_, **kwargs_)
        else:
            return DateType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType24', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType24')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType24', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType24'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        if self.DateTimePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimePeriod>%s</%sDateTimePeriod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimePeriod), input_name='DateTimePeriod')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'DateTimePeriod':
            DateTimePeriod_ = child_.text
            DateTimePeriod_ = self.gds_validate_string(DateTimePeriod_, node, 'DateTimePeriod')
            self.DateTimePeriod = DateTimePeriod_
# end class DateType24


class PriceInformationType25(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType25)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType25.subclass:
            return PriceInformationType25.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType25(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType25', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType25')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType25', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType25'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType25', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeReasonCode>%s</%sChangeReasonCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ChangeReasonCode), input_name='ChangeReasonCode')), namespace_, eol_))
        if self.EffectiveDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffectiveDate>%s</%sEffectiveDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EffectiveDate), input_name='EffectiveDate')), namespace_, eol_))
        if self.PriceTypeIDCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceTypeIDCode>%s</%sPriceTypeIDCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceTypeIDCode), input_name='PriceTypeIDCode')), namespace_, eol_))
        if self.UnitPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPrice>%s</%sUnitPrice>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPrice), input_name='UnitPrice')), namespace_, eol_))
        if self.UnitPriceBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitPriceBasis>%s</%sUnitPriceBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UnitPriceBasis), input_name='UnitPriceBasis')), namespace_, eol_))
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespace_, eol_))
        if self.PriceMultiplierQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplierQual>%s</%sPriceMultiplierQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplierQual), input_name='PriceMultiplierQual')), namespace_, eol_))
        if self.PriceMultiplier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMultiplier>%s</%sPriceMultiplier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PriceMultiplier), input_name='PriceMultiplier')), namespace_, eol_))
        if self.RebateAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRebateAmount>%s</%sRebateAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RebateAmount), input_name='RebateAmount')), namespace_, eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespace_, eol_))
        if self.QuantityUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUOM>%s</%sQuantityUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUOM), input_name='QuantityUOM')), namespace_, eol_))
        if self.MultiplePriceQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMultiplePriceQuantity>%s</%sMultiplePriceQuantity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MultiplePriceQuantity), input_name='MultiplePriceQuantity')), namespace_, eol_))
        if self.ClassOfTradeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfTradeCode>%s</%sClassOfTradeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfTradeCode), input_name='ClassOfTradeCode')), namespace_, eol_))
        if self.ConditionValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConditionValue>%s</%sConditionValue>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ConditionValue), input_name='ConditionValue')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            ChangeReasonCode_ = child_.text
            ChangeReasonCode_ = self.gds_validate_string(ChangeReasonCode_, node, 'ChangeReasonCode')
            self.ChangeReasonCode = ChangeReasonCode_
        elif nodeName_ == 'EffectiveDate':
            EffectiveDate_ = child_.text
            EffectiveDate_ = self.gds_validate_string(EffectiveDate_, node, 'EffectiveDate')
            self.EffectiveDate = EffectiveDate_
        elif nodeName_ == 'PriceTypeIDCode':
            PriceTypeIDCode_ = child_.text
            PriceTypeIDCode_ = self.gds_validate_string(PriceTypeIDCode_, node, 'PriceTypeIDCode')
            self.PriceTypeIDCode = PriceTypeIDCode_
        elif nodeName_ == 'UnitPrice':
            UnitPrice_ = child_.text
            UnitPrice_ = self.gds_validate_string(UnitPrice_, node, 'UnitPrice')
            self.UnitPrice = UnitPrice_
        elif nodeName_ == 'UnitPriceBasis':
            UnitPriceBasis_ = child_.text
            UnitPriceBasis_ = self.gds_validate_string(UnitPriceBasis_, node, 'UnitPriceBasis')
            self.UnitPriceBasis = UnitPriceBasis_
        elif nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
        elif nodeName_ == 'PriceMultiplierQual':
            PriceMultiplierQual_ = child_.text
            PriceMultiplierQual_ = self.gds_validate_string(PriceMultiplierQual_, node, 'PriceMultiplierQual')
            self.PriceMultiplierQual = PriceMultiplierQual_
        elif nodeName_ == 'PriceMultiplier':
            PriceMultiplier_ = child_.text
            PriceMultiplier_ = self.gds_validate_string(PriceMultiplier_, node, 'PriceMultiplier')
            self.PriceMultiplier = PriceMultiplier_
        elif nodeName_ == 'RebateAmount':
            RebateAmount_ = child_.text
            RebateAmount_ = self.gds_validate_string(RebateAmount_, node, 'RebateAmount')
            self.RebateAmount = RebateAmount_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'QuantityUOM':
            QuantityUOM_ = child_.text
            QuantityUOM_ = self.gds_validate_string(QuantityUOM_, node, 'QuantityUOM')
            self.QuantityUOM = QuantityUOM_
        elif nodeName_ == 'MultiplePriceQuantity':
            MultiplePriceQuantity_ = child_.text
            MultiplePriceQuantity_ = self.gds_validate_string(MultiplePriceQuantity_, node, 'MultiplePriceQuantity')
            self.MultiplePriceQuantity = MultiplePriceQuantity_
        elif nodeName_ == 'ClassOfTradeCode':
            ClassOfTradeCode_ = child_.text
            ClassOfTradeCode_ = self.gds_validate_string(ClassOfTradeCode_, node, 'ClassOfTradeCode')
            self.ClassOfTradeCode = ClassOfTradeCode_
        elif nodeName_ == 'ConditionValue':
            ConditionValue_ = child_.text
            ConditionValue_ = self.gds_validate_string(ConditionValue_, node, 'ConditionValue')
            self.ConditionValue = ConditionValue_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class PriceInformationType25


class ProductOrItemDescriptionType26(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType26)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType26.subclass:
            return ProductOrItemDescriptionType26.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType26(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType26', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType26')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType26', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType26'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType26', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionType>%s</%sItemDescriptionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionType), input_name='ItemDescriptionType')), namespace_, eol_))
        if self.ProductCharacteristicCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCharacteristicCode>%s</%sProductCharacteristicCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductCharacteristicCode), input_name='ProductCharacteristicCode')), namespace_, eol_))
        if self.AgencyQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAgencyQualifierCode>%s</%sAgencyQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AgencyQualifierCode), input_name='AgencyQualifierCode')), namespace_, eol_))
        if self.ProductDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductDescriptionCode>%s</%sProductDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductDescriptionCode), input_name='ProductDescriptionCode')), namespace_, eol_))
        if self.ProductDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductDescription>%s</%sProductDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProductDescription), input_name='ProductDescription')), namespace_, eol_))
        if self.SurfaceLayerPositionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSurfaceLayerPositionCode>%s</%sSurfaceLayerPositionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SurfaceLayerPositionCode), input_name='SurfaceLayerPositionCode')), namespace_, eol_))
        if self.SourceSubqualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceSubqualifier>%s</%sSourceSubqualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SourceSubqualifier), input_name='SourceSubqualifier')), namespace_, eol_))
        if self.YesOrNoResponse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYesOrNoResponse>%s</%sYesOrNoResponse>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.YesOrNoResponse), input_name='YesOrNoResponse')), namespace_, eol_))
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            ItemDescriptionType_ = child_.text
            ItemDescriptionType_ = self.gds_validate_string(ItemDescriptionType_, node, 'ItemDescriptionType')
            self.ItemDescriptionType = ItemDescriptionType_
        elif nodeName_ == 'ProductCharacteristicCode':
            ProductCharacteristicCode_ = child_.text
            ProductCharacteristicCode_ = self.gds_validate_string(ProductCharacteristicCode_, node, 'ProductCharacteristicCode')
            self.ProductCharacteristicCode = ProductCharacteristicCode_
        elif nodeName_ == 'AgencyQualifierCode':
            AgencyQualifierCode_ = child_.text
            AgencyQualifierCode_ = self.gds_validate_string(AgencyQualifierCode_, node, 'AgencyQualifierCode')
            self.AgencyQualifierCode = AgencyQualifierCode_
        elif nodeName_ == 'ProductDescriptionCode':
            ProductDescriptionCode_ = child_.text
            ProductDescriptionCode_ = self.gds_validate_string(ProductDescriptionCode_, node, 'ProductDescriptionCode')
            self.ProductDescriptionCode = ProductDescriptionCode_
        elif nodeName_ == 'ProductDescription':
            ProductDescription_ = child_.text
            ProductDescription_ = self.gds_validate_string(ProductDescription_, node, 'ProductDescription')
            self.ProductDescription = ProductDescription_
        elif nodeName_ == 'SurfaceLayerPositionCode':
            SurfaceLayerPositionCode_ = child_.text
            SurfaceLayerPositionCode_ = self.gds_validate_string(SurfaceLayerPositionCode_, node, 'SurfaceLayerPositionCode')
            self.SurfaceLayerPositionCode = SurfaceLayerPositionCode_
        elif nodeName_ == 'SourceSubqualifier':
            SourceSubqualifier_ = child_.text
            SourceSubqualifier_ = self.gds_validate_string(SourceSubqualifier_, node, 'SourceSubqualifier')
            self.SourceSubqualifier = SourceSubqualifier_
        elif nodeName_ == 'YesOrNoResponse':
            YesOrNoResponse_ = child_.text
            YesOrNoResponse_ = self.gds_validate_string(YesOrNoResponse_, node, 'YesOrNoResponse')
            self.YesOrNoResponse = YesOrNoResponse_
        elif nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
# end class ProductOrItemDescriptionType26


class PhysicalDetailsType27(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType27)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType27.subclass:
            return PhysicalDetailsType27.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType27(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType27', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType27')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType27', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType27'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType27', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackQualifier>%s</%sPackQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackQualifier), input_name='PackQualifier')), namespace_, eol_))
        if self.PackValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackValue>%s</%sPackValue>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackValue), input_name='PackValue')), namespace_, eol_))
        if self.PackSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackSize>%s</%sPackSize>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackSize), input_name='PackSize')), namespace_, eol_))
        if self.PackUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackUOM>%s</%sPackUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackUOM), input_name='PackUOM')), namespace_, eol_))
        if self.PackingMedium is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMedium>%s</%sPackingMedium>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMedium), input_name='PackingMedium')), namespace_, eol_))
        if self.PackingMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingMaterial>%s</%sPackingMaterial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackingMaterial), input_name='PackingMaterial')), namespace_, eol_))
        if self.WeightQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightQualifier>%s</%sWeightQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.WeightQualifier), input_name='WeightQualifier')), namespace_, eol_))
        if self.PackWeight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeight>%s</%sPackWeight>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeight), input_name='PackWeight')), namespace_, eol_))
        if self.PackWeightUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWeightUOM>%s</%sPackWeightUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWeightUOM), input_name='PackWeightUOM')), namespace_, eol_))
        if self.PackVolume is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolume>%s</%sPackVolume>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolume), input_name='PackVolume')), namespace_, eol_))
        if self.PackVolumeUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackVolumeUOM>%s</%sPackVolumeUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackVolumeUOM), input_name='PackVolumeUOM')), namespace_, eol_))
        if self.PackLength is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackLength>%s</%sPackLength>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackLength), input_name='PackLength')), namespace_, eol_))
        if self.PackWidth is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackWidth>%s</%sPackWidth>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackWidth), input_name='PackWidth')), namespace_, eol_))
        if self.PackHeight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackHeight>%s</%sPackHeight>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackHeight), input_name='PackHeight')), namespace_, eol_))
        if self.PackDimensionUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackDimensionUOM>%s</%sPackDimensionUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PackDimensionUOM), input_name='PackDimensionUOM')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
        if self.SurfaceLayerPositionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSurfaceLayerPositionCode>%s</%sSurfaceLayerPositionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SurfaceLayerPositionCode), input_name='SurfaceLayerPositionCode')), namespace_, eol_))
        if self.AssignedID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignedID>%s</%sAssignedID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AssignedID), input_name='AssignedID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            PackQualifier_ = child_.text
            PackQualifier_ = self.gds_validate_string(PackQualifier_, node, 'PackQualifier')
            self.PackQualifier = PackQualifier_
        elif nodeName_ == 'PackValue':
            PackValue_ = child_.text
            PackValue_ = self.gds_validate_string(PackValue_, node, 'PackValue')
            self.PackValue = PackValue_
        elif nodeName_ == 'PackSize':
            PackSize_ = child_.text
            PackSize_ = self.gds_validate_string(PackSize_, node, 'PackSize')
            self.PackSize = PackSize_
        elif nodeName_ == 'PackUOM':
            PackUOM_ = child_.text
            PackUOM_ = self.gds_validate_string(PackUOM_, node, 'PackUOM')
            self.PackUOM = PackUOM_
        elif nodeName_ == 'PackingMedium':
            PackingMedium_ = child_.text
            PackingMedium_ = self.gds_validate_string(PackingMedium_, node, 'PackingMedium')
            self.PackingMedium = PackingMedium_
        elif nodeName_ == 'PackingMaterial':
            PackingMaterial_ = child_.text
            PackingMaterial_ = self.gds_validate_string(PackingMaterial_, node, 'PackingMaterial')
            self.PackingMaterial = PackingMaterial_
        elif nodeName_ == 'WeightQualifier':
            WeightQualifier_ = child_.text
            WeightQualifier_ = self.gds_validate_string(WeightQualifier_, node, 'WeightQualifier')
            self.WeightQualifier = WeightQualifier_
        elif nodeName_ == 'PackWeight':
            PackWeight_ = child_.text
            PackWeight_ = self.gds_validate_string(PackWeight_, node, 'PackWeight')
            self.PackWeight = PackWeight_
        elif nodeName_ == 'PackWeightUOM':
            PackWeightUOM_ = child_.text
            PackWeightUOM_ = self.gds_validate_string(PackWeightUOM_, node, 'PackWeightUOM')
            self.PackWeightUOM = PackWeightUOM_
        elif nodeName_ == 'PackVolume':
            PackVolume_ = child_.text
            PackVolume_ = self.gds_validate_string(PackVolume_, node, 'PackVolume')
            self.PackVolume = PackVolume_
        elif nodeName_ == 'PackVolumeUOM':
            PackVolumeUOM_ = child_.text
            PackVolumeUOM_ = self.gds_validate_string(PackVolumeUOM_, node, 'PackVolumeUOM')
            self.PackVolumeUOM = PackVolumeUOM_
        elif nodeName_ == 'PackLength':
            PackLength_ = child_.text
            PackLength_ = self.gds_validate_string(PackLength_, node, 'PackLength')
            self.PackLength = PackLength_
        elif nodeName_ == 'PackWidth':
            PackWidth_ = child_.text
            PackWidth_ = self.gds_validate_string(PackWidth_, node, 'PackWidth')
            self.PackWidth = PackWidth_
        elif nodeName_ == 'PackHeight':
            PackHeight_ = child_.text
            PackHeight_ = self.gds_validate_string(PackHeight_, node, 'PackHeight')
            self.PackHeight = PackHeight_
        elif nodeName_ == 'PackDimensionUOM':
            PackDimensionUOM_ = child_.text
            PackDimensionUOM_ = self.gds_validate_string(PackDimensionUOM_, node, 'PackDimensionUOM')
            self.PackDimensionUOM = PackDimensionUOM_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'SurfaceLayerPositionCode':
            SurfaceLayerPositionCode_ = child_.text
            SurfaceLayerPositionCode_ = self.gds_validate_string(SurfaceLayerPositionCode_, node, 'SurfaceLayerPositionCode')
            self.SurfaceLayerPositionCode = SurfaceLayerPositionCode_
        elif nodeName_ == 'AssignedID':
            AssignedID_ = child_.text
            AssignedID_ = self.gds_validate_string(AssignedID_, node, 'AssignedID')
            self.AssignedID = AssignedID_
# end class PhysicalDetailsType27


class ReferenceType28(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType28)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType28.subclass:
            return ReferenceType28.subclass(*args_, **kwargs_)
        else:
            return ReferenceType28(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType28', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType28')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType28', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType28'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType28', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType29.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType28


class ReferenceIDsType29(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType29)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType29.subclass:
            return ReferenceIDsType29.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType29(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType29', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType29')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType29', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType29'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType29', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
# end class ReferenceIDsType29


class NotesType30(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType30)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType30.subclass:
            return NotesType30.subclass(*args_, **kwargs_)
        else:
            return NotesType30(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType30', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType30')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType30', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType30'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType30', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteCode>%s</%sNoteCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteCode), input_name='NoteCode')), namespace_, eol_))
        if self.NoteInformationField is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteInformationField>%s</%sNoteInformationField>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteInformationField), input_name='NoteInformationField')), namespace_, eol_))
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespace_, eol_))
        if self.NoteFormatCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteFormatCode>%s</%sNoteFormatCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteFormatCode), input_name='NoteFormatCode')), namespace_, eol_))
        if self.NoteFunctionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteFunctionCode>%s</%sNoteFunctionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoteFunctionCode), input_name='NoteFunctionCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            NoteCode_ = child_.text
            NoteCode_ = self.gds_validate_string(NoteCode_, node, 'NoteCode')
            self.NoteCode = NoteCode_
        elif nodeName_ == 'NoteInformationField':
            NoteInformationField_ = child_.text
            NoteInformationField_ = self.gds_validate_string(NoteInformationField_, node, 'NoteInformationField')
            self.NoteInformationField = NoteInformationField_
        elif nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'NoteFormatCode':
            NoteFormatCode_ = child_.text
            NoteFormatCode_ = self.gds_validate_string(NoteFormatCode_, node, 'NoteFormatCode')
            self.NoteFormatCode = NoteFormatCode_
        elif nodeName_ == 'NoteFunctionCode':
            NoteFunctionCode_ = child_.text
            NoteFunctionCode_ = self.gds_validate_string(NoteFunctionCode_, node, 'NoteFunctionCode')
            self.NoteFunctionCode = NoteFunctionCode_
# end class NotesType30


class TaxType31(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType31)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType31.subclass:
            return TaxType31.subclass(*args_, **kwargs_)
        else:
            return TaxType31(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType31', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType31')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType31', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType31'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType31', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxAmount>%s</%sTaxAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxAmount), input_name='TaxAmount')), namespace_, eol_))
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercent>%s</%sTaxPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercent), input_name='TaxPercent')), namespace_, eol_))
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionCode>%s</%sJurisdictionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionCode), input_name='JurisdictionCode')), namespace_, eol_))
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPctDollarBasis>%s</%sPctDollarBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PctDollarBasis), input_name='PctDollarBasis')), namespace_, eol_))
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxID>%s</%sTaxID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxID), input_name='TaxID')), namespace_, eol_))
        if self.AssignedID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignedID>%s</%sAssignedID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AssignedID), input_name='AssignedID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
        elif nodeName_ == 'TaxAmount':
            TaxAmount_ = child_.text
            TaxAmount_ = self.gds_validate_string(TaxAmount_, node, 'TaxAmount')
            self.TaxAmount = TaxAmount_
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
        elif nodeName_ == 'TaxPercent':
            TaxPercent_ = child_.text
            TaxPercent_ = self.gds_validate_string(TaxPercent_, node, 'TaxPercent')
            self.TaxPercent = TaxPercent_
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
        elif nodeName_ == 'JurisdictionCode':
            JurisdictionCode_ = child_.text
            JurisdictionCode_ = self.gds_validate_string(JurisdictionCode_, node, 'JurisdictionCode')
            self.JurisdictionCode = JurisdictionCode_
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
        elif nodeName_ == 'PctDollarBasis':
            PctDollarBasis_ = child_.text
            PctDollarBasis_ = self.gds_validate_string(PctDollarBasis_, node, 'PctDollarBasis')
            self.PctDollarBasis = PctDollarBasis_
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
        elif nodeName_ == 'TaxID':
            TaxID_ = child_.text
            TaxID_ = self.gds_validate_string(TaxID_, node, 'TaxID')
            self.TaxID = TaxID_
        elif nodeName_ == 'AssignedID':
            AssignedID_ = child_.text
            AssignedID_ = self.gds_validate_string(AssignedID_, node, 'AssignedID')
            self.AssignedID = AssignedID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TaxType31


class ChargesAllowancesType32(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType32)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType32.subclass:
            return ChargesAllowancesType32.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType32(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType32', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType32')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType32', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType32'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType32', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgency>%s</%sAllowChrgAgency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgency), input_name='AllowChrgAgency')), namespace_, eol_))
        if self.AllowChrgAmt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAmt>%s</%sAllowChrgAmt>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAmt), input_name='AllowChrgAmt')), namespace_, eol_))
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercent>%s</%sAllowChrgPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercent), input_name='AllowChrgPercent')), namespace_, eol_))
        if self.PercentDollarBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentDollarBasis>%s</%sPercentDollarBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PercentDollarBasis), input_name='PercentDollarBasis')), namespace_, eol_))
        if self.AllowChrgRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgRate>%s</%sAllowChrgRate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgRate), input_name='AllowChrgRate')), namespace_, eol_))
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQty>%s</%sAllowChrgQty>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQty), input_name='AllowChrgQty')), namespace_, eol_))
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceIdentification>%s</%sReferenceIdentification>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceIdentification), input_name='ReferenceIdentification')), namespace_, eol_))
        if self.AllowChrgHandlingDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingDescription>%s</%sAllowChrgHandlingDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingDescription), input_name='AllowChrgHandlingDescription')), namespace_, eol_))
        if self.OptionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptionNumber>%s</%sOptionNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OptionNumber), input_name='OptionNumber')), namespace_, eol_))
        if self.ExceptionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExceptionNumber>%s</%sExceptionNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ExceptionNumber), input_name='ExceptionNumber')), namespace_, eol_))
        if self.AllowChrgQty2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQty2>%s</%sAllowChrgQty2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQty2), input_name='AllowChrgQty2')), namespace_, eol_))
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespace_, eol_))
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
        elif nodeName_ == 'AllowChrgAgency':
            AllowChrgAgency_ = child_.text
            AllowChrgAgency_ = self.gds_validate_string(AllowChrgAgency_, node, 'AllowChrgAgency')
            self.AllowChrgAgency = AllowChrgAgency_
        elif nodeName_ == 'AllowChrgAmt':
            AllowChrgAmt_ = child_.text
            AllowChrgAmt_ = self.gds_validate_string(AllowChrgAmt_, node, 'AllowChrgAmt')
            self.AllowChrgAmt = AllowChrgAmt_
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
        elif nodeName_ == 'AllowChrgPercent':
            AllowChrgPercent_ = child_.text
            AllowChrgPercent_ = self.gds_validate_string(AllowChrgPercent_, node, 'AllowChrgPercent')
            self.AllowChrgPercent = AllowChrgPercent_
        elif nodeName_ == 'PercentDollarBasis':
            PercentDollarBasis_ = child_.text
            PercentDollarBasis_ = self.gds_validate_string(PercentDollarBasis_, node, 'PercentDollarBasis')
            self.PercentDollarBasis = PercentDollarBasis_
        elif nodeName_ == 'AllowChrgRate':
            AllowChrgRate_ = child_.text
            AllowChrgRate_ = self.gds_validate_string(AllowChrgRate_, node, 'AllowChrgRate')
            self.AllowChrgRate = AllowChrgRate_
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
        elif nodeName_ == 'AllowChrgQty':
            AllowChrgQty_ = child_.text
            AllowChrgQty_ = self.gds_validate_string(AllowChrgQty_, node, 'AllowChrgQty')
            self.AllowChrgQty = AllowChrgQty_
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
        elif nodeName_ == 'ReferenceIdentification':
            ReferenceIdentification_ = child_.text
            ReferenceIdentification_ = self.gds_validate_string(ReferenceIdentification_, node, 'ReferenceIdentification')
            self.ReferenceIdentification = ReferenceIdentification_
        elif nodeName_ == 'AllowChrgHandlingDescription':
            AllowChrgHandlingDescription_ = child_.text
            AllowChrgHandlingDescription_ = self.gds_validate_string(AllowChrgHandlingDescription_, node, 'AllowChrgHandlingDescription')
            self.AllowChrgHandlingDescription = AllowChrgHandlingDescription_
        elif nodeName_ == 'OptionNumber':
            OptionNumber_ = child_.text
            OptionNumber_ = self.gds_validate_string(OptionNumber_, node, 'OptionNumber')
            self.OptionNumber = OptionNumber_
        elif nodeName_ == 'ExceptionNumber':
            ExceptionNumber_ = child_.text
            ExceptionNumber_ = self.gds_validate_string(ExceptionNumber_, node, 'ExceptionNumber')
            self.ExceptionNumber = ExceptionNumber_
        elif nodeName_ == 'AllowChrgQty2':
            AllowChrgQty2_ = child_.text
            AllowChrgQty2_ = self.gds_validate_string(AllowChrgQty2_, node, 'AllowChrgQty2')
            self.AllowChrgQty2 = AllowChrgQty2_
        elif nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'Tax':
            obj_ = TaxType33.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType32


class TaxType33(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType33)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType33.subclass:
            return TaxType33.subclass(*args_, **kwargs_)
        else:
            return TaxType33(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType33', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType33')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType33', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType33'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType33', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxAmount>%s</%sTaxAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxAmount), input_name='TaxAmount')), namespace_, eol_))
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercent>%s</%sTaxPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercent), input_name='TaxPercent')), namespace_, eol_))
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionCode>%s</%sJurisdictionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionCode), input_name='JurisdictionCode')), namespace_, eol_))
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPctDollarBasis>%s</%sPctDollarBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PctDollarBasis), input_name='PctDollarBasis')), namespace_, eol_))
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxID>%s</%sTaxID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxID), input_name='TaxID')), namespace_, eol_))
        if self.AssignedID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignedID>%s</%sAssignedID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AssignedID), input_name='AssignedID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
        elif nodeName_ == 'TaxAmount':
            TaxAmount_ = child_.text
            TaxAmount_ = self.gds_validate_string(TaxAmount_, node, 'TaxAmount')
            self.TaxAmount = TaxAmount_
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
        elif nodeName_ == 'TaxPercent':
            TaxPercent_ = child_.text
            TaxPercent_ = self.gds_validate_string(TaxPercent_, node, 'TaxPercent')
            self.TaxPercent = TaxPercent_
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
        elif nodeName_ == 'JurisdictionCode':
            JurisdictionCode_ = child_.text
            JurisdictionCode_ = self.gds_validate_string(JurisdictionCode_, node, 'JurisdictionCode')
            self.JurisdictionCode = JurisdictionCode_
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
        elif nodeName_ == 'PctDollarBasis':
            PctDollarBasis_ = child_.text
            PctDollarBasis_ = self.gds_validate_string(PctDollarBasis_, node, 'PctDollarBasis')
            self.PctDollarBasis = PctDollarBasis_
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
        elif nodeName_ == 'TaxID':
            TaxID_ = child_.text
            TaxID_ = self.gds_validate_string(TaxID_, node, 'TaxID')
            self.TaxID = TaxID_
        elif nodeName_ == 'AssignedID':
            AssignedID_ = child_.text
            AssignedID_ = self.gds_validate_string(AssignedID_, node, 'AssignedID')
            self.AssignedID = AssignedID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TaxType33


class AddressType34(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType34)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType34.subclass:
            return AddressType34.subclass(*args_, **kwargs_)
        else:
            return AddressType34(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference or
            self.Contact or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType34', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType34')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType34', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType34'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType34', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLocationNumber>%s</%sAddressLocationNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressLocationNumber), input_name='AddressLocationNumber')), namespace_, eol_))
        if self.AddressName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressName>%s</%sAddressName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressName), input_name='AddressName')), namespace_, eol_))
        if self.AddressAlternateName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName>%s</%sAddressAlternateName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName), input_name='AddressAlternateName')), namespace_, eol_))
        if self.AddressAlternateName2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName2>%s</%sAddressAlternateName2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName2), input_name='AddressAlternateName2')), namespace_, eol_))
        if self.Address1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress1>%s</%sAddress1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address1), input_name='Address1')), namespace_, eol_))
        if self.Address2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress2>%s</%sAddress2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address2), input_name='Address2')), namespace_, eol_))
        if self.Address3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress3>%s</%sAddress3>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address3), input_name='Address3')), namespace_, eol_))
        if self.Address4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress4>%s</%sAddress4>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address4), input_name='Address4')), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespace_, eol_))
        if self.LocationID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationID>%s</%sLocationID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationID), input_name='LocationID')), namespace_, eol_))
        if self.CountrySubDivision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountrySubDivision>%s</%sCountrySubDivision>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CountrySubDivision), input_name='CountrySubDivision')), namespace_, eol_))
        if self.AddressTaxIdNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxIdNumber>%s</%sAddressTaxIdNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxIdNumber), input_name='AddressTaxIdNumber')), namespace_, eol_))
        if self.AddressTaxExemptNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxExemptNumber>%s</%sAddressTaxExemptNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxExemptNumber), input_name='AddressTaxExemptNumber')), namespace_, eol_))
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
        elif nodeName_ == 'AddressLocationNumber':
            AddressLocationNumber_ = child_.text
            AddressLocationNumber_ = self.gds_validate_string(AddressLocationNumber_, node, 'AddressLocationNumber')
            self.AddressLocationNumber = AddressLocationNumber_
        elif nodeName_ == 'AddressName':
            AddressName_ = child_.text
            AddressName_ = self.gds_validate_string(AddressName_, node, 'AddressName')
            self.AddressName = AddressName_
        elif nodeName_ == 'AddressAlternateName':
            AddressAlternateName_ = child_.text
            AddressAlternateName_ = self.gds_validate_string(AddressAlternateName_, node, 'AddressAlternateName')
            self.AddressAlternateName = AddressAlternateName_
        elif nodeName_ == 'AddressAlternateName2':
            AddressAlternateName2_ = child_.text
            AddressAlternateName2_ = self.gds_validate_string(AddressAlternateName2_, node, 'AddressAlternateName2')
            self.AddressAlternateName2 = AddressAlternateName2_
        elif nodeName_ == 'Address1':
            Address1_ = child_.text
            Address1_ = self.gds_validate_string(Address1_, node, 'Address1')
            self.Address1 = Address1_
        elif nodeName_ == 'Address2':
            Address2_ = child_.text
            Address2_ = self.gds_validate_string(Address2_, node, 'Address2')
            self.Address2 = Address2_
        elif nodeName_ == 'Address3':
            Address3_ = child_.text
            Address3_ = self.gds_validate_string(Address3_, node, 'Address3')
            self.Address3 = Address3_
        elif nodeName_ == 'Address4':
            Address4_ = child_.text
            Address4_ = self.gds_validate_string(Address4_, node, 'Address4')
            self.Address4 = Address4_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'LocationID':
            LocationID_ = child_.text
            LocationID_ = self.gds_validate_string(LocationID_, node, 'LocationID')
            self.LocationID = LocationID_
        elif nodeName_ == 'CountrySubDivision':
            CountrySubDivision_ = child_.text
            CountrySubDivision_ = self.gds_validate_string(CountrySubDivision_, node, 'CountrySubDivision')
            self.CountrySubDivision = CountrySubDivision_
        elif nodeName_ == 'AddressTaxIdNumber':
            AddressTaxIdNumber_ = child_.text
            AddressTaxIdNumber_ = self.gds_validate_string(AddressTaxIdNumber_, node, 'AddressTaxIdNumber')
            self.AddressTaxIdNumber = AddressTaxIdNumber_
        elif nodeName_ == 'AddressTaxExemptNumber':
            AddressTaxExemptNumber_ = child_.text
            AddressTaxExemptNumber_ = self.gds_validate_string(AddressTaxExemptNumber_, node, 'AddressTaxExemptNumber')
            self.AddressTaxExemptNumber = AddressTaxExemptNumber_
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType35.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType37.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType39.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType34


class ReferenceType35(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        if ReferenceIDs is None:
            self.ReferenceIDs = []
        else:
            self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType35)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType35.subclass:
            return ReferenceType35.subclass(*args_, **kwargs_)
        else:
            return ReferenceType35(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def add_ReferenceIDs(self, value): self.ReferenceIDs.append(value)
    def insert_ReferenceIDs_at(self, index, value): self.ReferenceIDs.insert(index, value)
    def replace_ReferenceIDs_at(self, index, value): self.ReferenceIDs[index] = value
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType35', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType35')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType35', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType35'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType35', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        for ReferenceIDs_ in self.ReferenceIDs:
            ReferenceIDs_.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType36.factory()
            obj_.build(child_)
            self.ReferenceIDs.append(obj_)
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType35


class ReferenceIDsType36(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType36)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType36.subclass:
            return ReferenceIDsType36.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType36(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType36', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType36')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType36', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType36'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType36', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceQual>%s</%sReferenceQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceQual), input_name='ReferenceQual')), namespace_, eol_))
        if self.ReferenceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceID>%s</%sReferenceID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceID), input_name='ReferenceID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            ReferenceQual_ = child_.text
            ReferenceQual_ = self.gds_validate_string(ReferenceQual_, node, 'ReferenceQual')
            self.ReferenceQual = ReferenceQual_
        elif nodeName_ == 'ReferenceID':
            ReferenceID_ = child_.text
            ReferenceID_ = self.gds_validate_string(ReferenceID_, node, 'ReferenceID')
            self.ReferenceID = ReferenceID_
# end class ReferenceIDsType36


class ContactType37(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        if AdditionalContactDetails is None:
            self.AdditionalContactDetails = []
        else:
            self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType37)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType37.subclass:
            return ContactType37.subclass(*args_, **kwargs_)
        else:
            return ContactType37(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def add_AdditionalContactDetails(self, value): self.AdditionalContactDetails.append(value)
    def insert_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails.insert(index, value)
    def replace_AdditionalContactDetails_at(self, index, value): self.AdditionalContactDetails[index] = value
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType37', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType37')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType37', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType37'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType37', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactTypeCode>%s</%sContactTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactTypeCode), input_name='ContactTypeCode')), namespace_, eol_))
        if self.ContactName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactName>%s</%sContactName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), namespace_, eol_))
        if self.PrimaryPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryPhone>%s</%sPrimaryPhone>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryPhone), input_name='PrimaryPhone')), namespace_, eol_))
        if self.PrimaryFax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryFax>%s</%sPrimaryFax>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryFax), input_name='PrimaryFax')), namespace_, eol_))
        if self.PrimaryEmail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryEmail>%s</%sPrimaryEmail>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryEmail), input_name='PrimaryEmail')), namespace_, eol_))
        for AdditionalContactDetails_ in self.AdditionalContactDetails:
            AdditionalContactDetails_.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactReference>%s</%sContactReference>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactReference), input_name='ContactReference')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            ContactTypeCode_ = child_.text
            ContactTypeCode_ = self.gds_validate_string(ContactTypeCode_, node, 'ContactTypeCode')
            self.ContactTypeCode = ContactTypeCode_
        elif nodeName_ == 'ContactName':
            ContactName_ = child_.text
            ContactName_ = self.gds_validate_string(ContactName_, node, 'ContactName')
            self.ContactName = ContactName_
        elif nodeName_ == 'PrimaryPhone':
            PrimaryPhone_ = child_.text
            PrimaryPhone_ = self.gds_validate_string(PrimaryPhone_, node, 'PrimaryPhone')
            self.PrimaryPhone = PrimaryPhone_
        elif nodeName_ == 'PrimaryFax':
            PrimaryFax_ = child_.text
            PrimaryFax_ = self.gds_validate_string(PrimaryFax_, node, 'PrimaryFax')
            self.PrimaryFax = PrimaryFax_
        elif nodeName_ == 'PrimaryEmail':
            PrimaryEmail_ = child_.text
            PrimaryEmail_ = self.gds_validate_string(PrimaryEmail_, node, 'PrimaryEmail')
            self.PrimaryEmail = PrimaryEmail_
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType38.factory()
            obj_.build(child_)
            self.AdditionalContactDetails.append(obj_)
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            ContactReference_ = child_.text
            ContactReference_ = self.gds_validate_string(ContactReference_, node, 'ContactReference')
            self.ContactReference = ContactReference_
# end class ContactType37


class AdditionalContactDetailsType38(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType38)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType38.subclass:
            return AdditionalContactDetailsType38.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType38(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType38', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType38')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType38', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType38'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType38', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactQual>%s</%sContactQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactQual), input_name='ContactQual')), namespace_, eol_))
        if self.ContactID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactID>%s</%sContactID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ContactID), input_name='ContactID')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            ContactQual_ = child_.text
            ContactQual_ = self.gds_validate_string(ContactQual_, node, 'ContactQual')
            self.ContactQual = ContactQual_
        elif nodeName_ == 'ContactID':
            ContactID_ = child_.text
            ContactID_ = self.gds_validate_string(ContactID_, node, 'ContactID')
            self.ContactID = ContactID_
# end class AdditionalContactDetailsType38


class DateType39(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType39)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType39.subclass:
            return DateType39.subclass(*args_, **kwargs_)
        else:
            return DateType39(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType39', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType39')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType39', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType39'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType39', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        if self.DateTimePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimePeriod>%s</%sDateTimePeriod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimePeriod), input_name='DateTimePeriod')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'DateTimePeriod':
            DateTimePeriod_ = child_.text
            DateTimePeriod_ = self.gds_validate_string(DateTimePeriod_, node, 'DateTimePeriod')
            self.DateTimePeriod = DateTimePeriod_
# end class DateType39


class CommodityType40(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType40)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType40.subclass:
            return CommodityType40.subclass(*args_, **kwargs_)
        else:
            return CommodityType40(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType40', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType40')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType40', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType40'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType40', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCodeQualifier>%s</%sCommodityCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCodeQualifier), input_name='CommodityCodeQualifier')), namespace_, eol_))
        if self.CommodityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCode>%s</%sCommodityCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCode), input_name='CommodityCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            CommodityCodeQualifier_ = child_.text
            CommodityCodeQualifier_ = self.gds_validate_string(CommodityCodeQualifier_, node, 'CommodityCodeQualifier')
            self.CommodityCodeQualifier = CommodityCodeQualifier_
        elif nodeName_ == 'CommodityCode':
            CommodityCode_ = child_.text
            CommodityCode_ = self.gds_validate_string(CommodityCode_, node, 'CommodityCode')
            self.CommodityCode = CommodityCode_
# end class CommodityType40


class QuantitiesSchedulesLocationsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, QuantityQualifier=None, TotalQty=None, TotalQtyUOM=None, QuantityDescription=None, LocationCodeQualifier=None, LocationDescription=None, LocationQuantity=None, Date=None, AssignedID=None, LeadTimeCode=None, LeadTimeQuantity=None, LeadTimePeriodInterval=None, LeadTimeDate=None):
        self.original_tagname_ = None
        self.QuantityQualifier = QuantityQualifier
        self.TotalQty = TotalQty
        self.TotalQtyUOM = TotalQtyUOM
        self.QuantityDescription = QuantityDescription
        self.LocationCodeQualifier = LocationCodeQualifier
        self.LocationDescription = LocationDescription
        if LocationQuantity is None:
            self.LocationQuantity = []
        else:
            self.LocationQuantity = LocationQuantity
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
        self.AssignedID = AssignedID
        self.LeadTimeCode = LeadTimeCode
        self.LeadTimeQuantity = LeadTimeQuantity
        self.LeadTimePeriodInterval = LeadTimePeriodInterval
        self.LeadTimeDate = LeadTimeDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantitiesSchedulesLocationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantitiesSchedulesLocationsType.subclass:
            return QuantitiesSchedulesLocationsType.subclass(*args_, **kwargs_)
        else:
            return QuantitiesSchedulesLocationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_QuantityQualifier(self): return self.QuantityQualifier
    def set_QuantityQualifier(self, QuantityQualifier): self.QuantityQualifier = QuantityQualifier
    def get_TotalQty(self): return self.TotalQty
    def set_TotalQty(self, TotalQty): self.TotalQty = TotalQty
    def get_TotalQtyUOM(self): return self.TotalQtyUOM
    def set_TotalQtyUOM(self, TotalQtyUOM): self.TotalQtyUOM = TotalQtyUOM
    def get_QuantityDescription(self): return self.QuantityDescription
    def set_QuantityDescription(self, QuantityDescription): self.QuantityDescription = QuantityDescription
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_LocationDescription(self): return self.LocationDescription
    def set_LocationDescription(self, LocationDescription): self.LocationDescription = LocationDescription
    def get_LocationQuantity(self): return self.LocationQuantity
    def set_LocationQuantity(self, LocationQuantity): self.LocationQuantity = LocationQuantity
    def add_LocationQuantity(self, value): self.LocationQuantity.append(value)
    def insert_LocationQuantity_at(self, index, value): self.LocationQuantity.insert(index, value)
    def replace_LocationQuantity_at(self, index, value): self.LocationQuantity[index] = value
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_LeadTimeCode(self): return self.LeadTimeCode
    def set_LeadTimeCode(self, LeadTimeCode): self.LeadTimeCode = LeadTimeCode
    def get_LeadTimeQuantity(self): return self.LeadTimeQuantity
    def set_LeadTimeQuantity(self, LeadTimeQuantity): self.LeadTimeQuantity = LeadTimeQuantity
    def get_LeadTimePeriodInterval(self): return self.LeadTimePeriodInterval
    def set_LeadTimePeriodInterval(self, LeadTimePeriodInterval): self.LeadTimePeriodInterval = LeadTimePeriodInterval
    def get_LeadTimeDate(self): return self.LeadTimeDate
    def set_LeadTimeDate(self, LeadTimeDate): self.LeadTimeDate = LeadTimeDate
    def hasContent_(self):
        if (
            self.QuantityQualifier is not None or
            self.TotalQty is not None or
            self.TotalQtyUOM is not None or
            self.QuantityDescription is not None or
            self.LocationCodeQualifier is not None or
            self.LocationDescription is not None or
            self.LocationQuantity or
            self.Date or
            self.AssignedID is not None or
            self.LeadTimeCode is not None or
            self.LeadTimeQuantity is not None or
            self.LeadTimePeriodInterval is not None or
            self.LeadTimeDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantitiesSchedulesLocationsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantitiesSchedulesLocationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantitiesSchedulesLocationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantitiesSchedulesLocationsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantitiesSchedulesLocationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QuantityQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityQualifier>%s</%sQuantityQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityQualifier), input_name='QuantityQualifier')), namespace_, eol_))
        if self.TotalQty is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalQty>%s</%sTotalQty>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TotalQty), input_name='TotalQty')), namespace_, eol_))
        if self.TotalQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalQtyUOM>%s</%sTotalQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TotalQtyUOM), input_name='TotalQtyUOM')), namespace_, eol_))
        if self.QuantityDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityDescription>%s</%sQuantityDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.QuantityDescription), input_name='QuantityDescription')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.LocationDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationDescription>%s</%sLocationDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationDescription), input_name='LocationDescription')), namespace_, eol_))
        for LocationQuantity_ in self.LocationQuantity:
            LocationQuantity_.export(outfile, level, namespace_, name_='LocationQuantity', pretty_print=pretty_print)
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.AssignedID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignedID>%s</%sAssignedID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AssignedID), input_name='AssignedID')), namespace_, eol_))
        if self.LeadTimeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLeadTimeCode>%s</%sLeadTimeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LeadTimeCode), input_name='LeadTimeCode')), namespace_, eol_))
        if self.LeadTimeQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLeadTimeQuantity>%s</%sLeadTimeQuantity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LeadTimeQuantity), input_name='LeadTimeQuantity')), namespace_, eol_))
        if self.LeadTimePeriodInterval is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLeadTimePeriodInterval>%s</%sLeadTimePeriodInterval>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LeadTimePeriodInterval), input_name='LeadTimePeriodInterval')), namespace_, eol_))
        if self.LeadTimeDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLeadTimeDate>%s</%sLeadTimeDate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LeadTimeDate), input_name='LeadTimeDate')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'QuantityQualifier':
            QuantityQualifier_ = child_.text
            QuantityQualifier_ = self.gds_validate_string(QuantityQualifier_, node, 'QuantityQualifier')
            self.QuantityQualifier = QuantityQualifier_
        elif nodeName_ == 'TotalQty':
            TotalQty_ = child_.text
            TotalQty_ = self.gds_validate_string(TotalQty_, node, 'TotalQty')
            self.TotalQty = TotalQty_
        elif nodeName_ == 'TotalQtyUOM':
            TotalQtyUOM_ = child_.text
            TotalQtyUOM_ = self.gds_validate_string(TotalQtyUOM_, node, 'TotalQtyUOM')
            self.TotalQtyUOM = TotalQtyUOM_
        elif nodeName_ == 'QuantityDescription':
            QuantityDescription_ = child_.text
            QuantityDescription_ = self.gds_validate_string(QuantityDescription_, node, 'QuantityDescription')
            self.QuantityDescription = QuantityDescription_
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
        elif nodeName_ == 'LocationDescription':
            LocationDescription_ = child_.text
            LocationDescription_ = self.gds_validate_string(LocationDescription_, node, 'LocationDescription')
            self.LocationDescription = LocationDescription_
        elif nodeName_ == 'LocationQuantity':
            obj_ = LocationQuantityType.factory()
            obj_.build(child_)
            self.LocationQuantity.append(obj_)
            obj_.original_tagname_ = 'LocationQuantity'
        elif nodeName_ == 'Date':
            obj_ = DateType41.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'AssignedID':
            AssignedID_ = child_.text
            AssignedID_ = self.gds_validate_string(AssignedID_, node, 'AssignedID')
            self.AssignedID = AssignedID_
        elif nodeName_ == 'LeadTimeCode':
            LeadTimeCode_ = child_.text
            LeadTimeCode_ = self.gds_validate_string(LeadTimeCode_, node, 'LeadTimeCode')
            self.LeadTimeCode = LeadTimeCode_
        elif nodeName_ == 'LeadTimeQuantity':
            LeadTimeQuantity_ = child_.text
            LeadTimeQuantity_ = self.gds_validate_string(LeadTimeQuantity_, node, 'LeadTimeQuantity')
            self.LeadTimeQuantity = LeadTimeQuantity_
        elif nodeName_ == 'LeadTimePeriodInterval':
            LeadTimePeriodInterval_ = child_.text
            LeadTimePeriodInterval_ = self.gds_validate_string(LeadTimePeriodInterval_, node, 'LeadTimePeriodInterval')
            self.LeadTimePeriodInterval = LeadTimePeriodInterval_
        elif nodeName_ == 'LeadTimeDate':
            LeadTimeDate_ = child_.text
            LeadTimeDate_ = self.gds_validate_string(LeadTimeDate_, node, 'LeadTimeDate')
            self.LeadTimeDate = LeadTimeDate_
# end class QuantitiesSchedulesLocationsType


class QuantityQualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityQualifier.subclass:
            return QuantityQualifier.subclass(*args_, **kwargs_)
        else:
            return QuantityQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityQualifier', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityQualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityQualifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityQualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class QuantityQualifier


class TotalQtyUOM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TotalQtyUOM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TotalQtyUOM.subclass:
            return TotalQtyUOM.subclass(*args_, **kwargs_)
        else:
            return TotalQtyUOM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TotalQtyUOM', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TotalQtyUOM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TotalQtyUOM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TotalQtyUOM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TotalQtyUOM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TotalQtyUOM


class LeadTimeCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LeadTimeCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LeadTimeCode.subclass:
            return LeadTimeCode.subclass(*args_, **kwargs_)
        else:
            return LeadTimeCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LeadTimeCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LeadTimeCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LeadTimeCode', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LeadTimeCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LeadTimeCode', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LeadTimeCode


class LeadTimePeriodInterval(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LeadTimePeriodInterval)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LeadTimePeriodInterval.subclass:
            return LeadTimePeriodInterval.subclass(*args_, **kwargs_)
        else:
            return LeadTimePeriodInterval(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LeadTimePeriodInterval', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LeadTimePeriodInterval')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LeadTimePeriodInterval', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LeadTimePeriodInterval'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LeadTimePeriodInterval', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LeadTimePeriodInterval


class LocationQuantityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Location=None, Qty=None):
        self.original_tagname_ = None
        self.Location = Location
        self.Qty = Qty
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationQuantityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationQuantityType.subclass:
            return LocationQuantityType.subclass(*args_, **kwargs_)
        else:
            return LocationQuantityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_Qty(self): return self.Qty
    def set_Qty(self, Qty): self.Qty = Qty
    def hasContent_(self):
        if (
            self.Location is not None or
            self.Qty is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LocationQuantityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationQuantityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LocationQuantityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LocationQuantityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LocationQuantityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocation>%s</%sLocation>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), namespace_, eol_))
        if self.Qty is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQty>%s</%sQty>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Qty), input_name='Qty')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'Qty':
            Qty_ = child_.text
            Qty_ = self.gds_validate_string(Qty_, node, 'Qty')
            self.Qty = Qty_
# end class LocationQuantityType


class DateType41(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType41)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType41.subclass:
            return DateType41.subclass(*args_, **kwargs_)
        else:
            return DateType41(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType41', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType41')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType41', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType41'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType41', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        if self.DateTimePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimePeriod>%s</%sDateTimePeriod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimePeriod), input_name='DateTimePeriod')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'DateTimePeriod':
            DateTimePeriod_ = child_.text
            DateTimePeriod_ = self.gds_validate_string(DateTimePeriod_, node, 'DateTimePeriod')
            self.DateTimePeriod = DateTimePeriod_
# end class DateType41


class TaxType42(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType42)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType42.subclass:
            return TaxType42.subclass(*args_, **kwargs_)
        else:
            return TaxType42(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType42', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType42')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType42', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType42'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType42', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxAmount>%s</%sTaxAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxAmount), input_name='TaxAmount')), namespace_, eol_))
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercent>%s</%sTaxPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercent), input_name='TaxPercent')), namespace_, eol_))
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionCode>%s</%sJurisdictionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionCode), input_name='JurisdictionCode')), namespace_, eol_))
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPctDollarBasis>%s</%sPctDollarBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PctDollarBasis), input_name='PctDollarBasis')), namespace_, eol_))
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxID>%s</%sTaxID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxID), input_name='TaxID')), namespace_, eol_))
        if self.AssignedID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignedID>%s</%sAssignedID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AssignedID), input_name='AssignedID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
        elif nodeName_ == 'TaxAmount':
            TaxAmount_ = child_.text
            TaxAmount_ = self.gds_validate_string(TaxAmount_, node, 'TaxAmount')
            self.TaxAmount = TaxAmount_
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
        elif nodeName_ == 'TaxPercent':
            TaxPercent_ = child_.text
            TaxPercent_ = self.gds_validate_string(TaxPercent_, node, 'TaxPercent')
            self.TaxPercent = TaxPercent_
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
        elif nodeName_ == 'JurisdictionCode':
            JurisdictionCode_ = child_.text
            JurisdictionCode_ = self.gds_validate_string(JurisdictionCode_, node, 'JurisdictionCode')
            self.JurisdictionCode = JurisdictionCode_
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
        elif nodeName_ == 'PctDollarBasis':
            PctDollarBasis_ = child_.text
            PctDollarBasis_ = self.gds_validate_string(PctDollarBasis_, node, 'PctDollarBasis')
            self.PctDollarBasis = PctDollarBasis_
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
        elif nodeName_ == 'TaxID':
            TaxID_ = child_.text
            TaxID_ = self.gds_validate_string(TaxID_, node, 'TaxID')
            self.TaxID = TaxID_
        elif nodeName_ == 'AssignedID':
            AssignedID_ = child_.text
            AssignedID_ = self.gds_validate_string(AssignedID_, node, 'AssignedID')
            self.AssignedID = AssignedID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TaxType42


class ChargesAllowancesType43(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType43)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType43.subclass:
            return ChargesAllowancesType43.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType43(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def add_Tax(self, value): self.Tax.append(value)
    def insert_Tax_at(self, index, value): self.Tax.insert(index, value)
    def replace_Tax_at(self, index, value): self.Tax[index] = value
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType43', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType43')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType43', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType43'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType43', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgIndicator>%s</%sAllowChrgIndicator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgIndicator), input_name='AllowChrgIndicator')), namespace_, eol_))
        if self.AllowChrgCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgCode>%s</%sAllowChrgCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgCode), input_name='AllowChrgCode')), namespace_, eol_))
        if self.AllowChrgAgencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgencyCode>%s</%sAllowChrgAgencyCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgencyCode), input_name='AllowChrgAgencyCode')), namespace_, eol_))
        if self.AllowChrgAgency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAgency>%s</%sAllowChrgAgency>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAgency), input_name='AllowChrgAgency')), namespace_, eol_))
        if self.AllowChrgAmt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgAmt>%s</%sAllowChrgAmt>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgAmt), input_name='AllowChrgAmt')), namespace_, eol_))
        if self.AllowChrgPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercentQual>%s</%sAllowChrgPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercentQual), input_name='AllowChrgPercentQual')), namespace_, eol_))
        if self.AllowChrgPercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgPercent>%s</%sAllowChrgPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgPercent), input_name='AllowChrgPercent')), namespace_, eol_))
        if self.PercentDollarBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentDollarBasis>%s</%sPercentDollarBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PercentDollarBasis), input_name='PercentDollarBasis')), namespace_, eol_))
        if self.AllowChrgRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgRate>%s</%sAllowChrgRate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgRate), input_name='AllowChrgRate')), namespace_, eol_))
        if self.AllowChrgQtyUOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQtyUOM>%s</%sAllowChrgQtyUOM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQtyUOM), input_name='AllowChrgQtyUOM')), namespace_, eol_))
        if self.AllowChrgQty is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQty>%s</%sAllowChrgQty>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQty), input_name='AllowChrgQty')), namespace_, eol_))
        if self.AllowChrgHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingCode>%s</%sAllowChrgHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingCode), input_name='AllowChrgHandlingCode')), namespace_, eol_))
        if self.ReferenceIdentification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceIdentification>%s</%sReferenceIdentification>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceIdentification), input_name='ReferenceIdentification')), namespace_, eol_))
        if self.AllowChrgHandlingDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgHandlingDescription>%s</%sAllowChrgHandlingDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgHandlingDescription), input_name='AllowChrgHandlingDescription')), namespace_, eol_))
        if self.OptionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptionNumber>%s</%sOptionNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OptionNumber), input_name='OptionNumber')), namespace_, eol_))
        if self.ExceptionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExceptionNumber>%s</%sExceptionNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ExceptionNumber), input_name='ExceptionNumber')), namespace_, eol_))
        if self.AllowChrgQty2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowChrgQty2>%s</%sAllowChrgQty2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AllowChrgQty2), input_name='AllowChrgQty2')), namespace_, eol_))
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespace_, eol_))
        for Tax_ in self.Tax:
            Tax_.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            AllowChrgIndicator_ = child_.text
            AllowChrgIndicator_ = self.gds_validate_string(AllowChrgIndicator_, node, 'AllowChrgIndicator')
            self.AllowChrgIndicator = AllowChrgIndicator_
        elif nodeName_ == 'AllowChrgCode':
            AllowChrgCode_ = child_.text
            AllowChrgCode_ = self.gds_validate_string(AllowChrgCode_, node, 'AllowChrgCode')
            self.AllowChrgCode = AllowChrgCode_
        elif nodeName_ == 'AllowChrgAgencyCode':
            AllowChrgAgencyCode_ = child_.text
            AllowChrgAgencyCode_ = self.gds_validate_string(AllowChrgAgencyCode_, node, 'AllowChrgAgencyCode')
            self.AllowChrgAgencyCode = AllowChrgAgencyCode_
        elif nodeName_ == 'AllowChrgAgency':
            AllowChrgAgency_ = child_.text
            AllowChrgAgency_ = self.gds_validate_string(AllowChrgAgency_, node, 'AllowChrgAgency')
            self.AllowChrgAgency = AllowChrgAgency_
        elif nodeName_ == 'AllowChrgAmt':
            AllowChrgAmt_ = child_.text
            AllowChrgAmt_ = self.gds_validate_string(AllowChrgAmt_, node, 'AllowChrgAmt')
            self.AllowChrgAmt = AllowChrgAmt_
        elif nodeName_ == 'AllowChrgPercentQual':
            AllowChrgPercentQual_ = child_.text
            AllowChrgPercentQual_ = self.gds_validate_string(AllowChrgPercentQual_, node, 'AllowChrgPercentQual')
            self.AllowChrgPercentQual = AllowChrgPercentQual_
        elif nodeName_ == 'AllowChrgPercent':
            AllowChrgPercent_ = child_.text
            AllowChrgPercent_ = self.gds_validate_string(AllowChrgPercent_, node, 'AllowChrgPercent')
            self.AllowChrgPercent = AllowChrgPercent_
        elif nodeName_ == 'PercentDollarBasis':
            PercentDollarBasis_ = child_.text
            PercentDollarBasis_ = self.gds_validate_string(PercentDollarBasis_, node, 'PercentDollarBasis')
            self.PercentDollarBasis = PercentDollarBasis_
        elif nodeName_ == 'AllowChrgRate':
            AllowChrgRate_ = child_.text
            AllowChrgRate_ = self.gds_validate_string(AllowChrgRate_, node, 'AllowChrgRate')
            self.AllowChrgRate = AllowChrgRate_
        elif nodeName_ == 'AllowChrgQtyUOM':
            AllowChrgQtyUOM_ = child_.text
            AllowChrgQtyUOM_ = self.gds_validate_string(AllowChrgQtyUOM_, node, 'AllowChrgQtyUOM')
            self.AllowChrgQtyUOM = AllowChrgQtyUOM_
        elif nodeName_ == 'AllowChrgQty':
            AllowChrgQty_ = child_.text
            AllowChrgQty_ = self.gds_validate_string(AllowChrgQty_, node, 'AllowChrgQty')
            self.AllowChrgQty = AllowChrgQty_
        elif nodeName_ == 'AllowChrgHandlingCode':
            AllowChrgHandlingCode_ = child_.text
            AllowChrgHandlingCode_ = self.gds_validate_string(AllowChrgHandlingCode_, node, 'AllowChrgHandlingCode')
            self.AllowChrgHandlingCode = AllowChrgHandlingCode_
        elif nodeName_ == 'ReferenceIdentification':
            ReferenceIdentification_ = child_.text
            ReferenceIdentification_ = self.gds_validate_string(ReferenceIdentification_, node, 'ReferenceIdentification')
            self.ReferenceIdentification = ReferenceIdentification_
        elif nodeName_ == 'AllowChrgHandlingDescription':
            AllowChrgHandlingDescription_ = child_.text
            AllowChrgHandlingDescription_ = self.gds_validate_string(AllowChrgHandlingDescription_, node, 'AllowChrgHandlingDescription')
            self.AllowChrgHandlingDescription = AllowChrgHandlingDescription_
        elif nodeName_ == 'OptionNumber':
            OptionNumber_ = child_.text
            OptionNumber_ = self.gds_validate_string(OptionNumber_, node, 'OptionNumber')
            self.OptionNumber = OptionNumber_
        elif nodeName_ == 'ExceptionNumber':
            ExceptionNumber_ = child_.text
            ExceptionNumber_ = self.gds_validate_string(ExceptionNumber_, node, 'ExceptionNumber')
            self.ExceptionNumber = ExceptionNumber_
        elif nodeName_ == 'AllowChrgQty2':
            AllowChrgQty2_ = child_.text
            AllowChrgQty2_ = self.gds_validate_string(AllowChrgQty2_, node, 'AllowChrgQty2')
            self.AllowChrgQty2 = AllowChrgQty2_
        elif nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'Tax':
            obj_ = TaxType44.factory()
            obj_.build(child_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType43


class TaxType44(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType44)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType44.subclass:
            return TaxType44.subclass(*args_, **kwargs_)
        else:
            return TaxType44(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType44', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType44')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType44', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType44'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType44', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxTypeCode>%s</%sTaxTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxTypeCode), input_name='TaxTypeCode')), namespace_, eol_))
        if self.TaxAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxAmount>%s</%sTaxAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxAmount), input_name='TaxAmount')), namespace_, eol_))
        if self.TaxPercentQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercentQual>%s</%sTaxPercentQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercentQual), input_name='TaxPercentQual')), namespace_, eol_))
        if self.TaxPercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxPercent>%s</%sTaxPercent>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxPercent), input_name='TaxPercent')), namespace_, eol_))
        if self.JurisdictionQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionQual>%s</%sJurisdictionQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionQual), input_name='JurisdictionQual')), namespace_, eol_))
        if self.JurisdictionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJurisdictionCode>%s</%sJurisdictionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JurisdictionCode), input_name='JurisdictionCode')), namespace_, eol_))
        if self.TaxExemptCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxExemptCode>%s</%sTaxExemptCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxExemptCode), input_name='TaxExemptCode')), namespace_, eol_))
        if self.RelationshipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipCode>%s</%sRelationshipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipCode), input_name='RelationshipCode')), namespace_, eol_))
        if self.PctDollarBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPctDollarBasis>%s</%sPctDollarBasis>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PctDollarBasis), input_name='PctDollarBasis')), namespace_, eol_))
        if self.TaxHandlingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxHandlingCode>%s</%sTaxHandlingCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxHandlingCode), input_name='TaxHandlingCode')), namespace_, eol_))
        if self.TaxID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxID>%s</%sTaxID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TaxID), input_name='TaxID')), namespace_, eol_))
        if self.AssignedID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignedID>%s</%sAssignedID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AssignedID), input_name='AssignedID')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            TaxTypeCode_ = child_.text
            TaxTypeCode_ = self.gds_validate_string(TaxTypeCode_, node, 'TaxTypeCode')
            self.TaxTypeCode = TaxTypeCode_
        elif nodeName_ == 'TaxAmount':
            TaxAmount_ = child_.text
            TaxAmount_ = self.gds_validate_string(TaxAmount_, node, 'TaxAmount')
            self.TaxAmount = TaxAmount_
        elif nodeName_ == 'TaxPercentQual':
            TaxPercentQual_ = child_.text
            TaxPercentQual_ = self.gds_validate_string(TaxPercentQual_, node, 'TaxPercentQual')
            self.TaxPercentQual = TaxPercentQual_
        elif nodeName_ == 'TaxPercent':
            TaxPercent_ = child_.text
            TaxPercent_ = self.gds_validate_string(TaxPercent_, node, 'TaxPercent')
            self.TaxPercent = TaxPercent_
        elif nodeName_ == 'JurisdictionQual':
            JurisdictionQual_ = child_.text
            JurisdictionQual_ = self.gds_validate_string(JurisdictionQual_, node, 'JurisdictionQual')
            self.JurisdictionQual = JurisdictionQual_
        elif nodeName_ == 'JurisdictionCode':
            JurisdictionCode_ = child_.text
            JurisdictionCode_ = self.gds_validate_string(JurisdictionCode_, node, 'JurisdictionCode')
            self.JurisdictionCode = JurisdictionCode_
        elif nodeName_ == 'TaxExemptCode':
            TaxExemptCode_ = child_.text
            TaxExemptCode_ = self.gds_validate_string(TaxExemptCode_, node, 'TaxExemptCode')
            self.TaxExemptCode = TaxExemptCode_
        elif nodeName_ == 'RelationshipCode':
            RelationshipCode_ = child_.text
            RelationshipCode_ = self.gds_validate_string(RelationshipCode_, node, 'RelationshipCode')
            self.RelationshipCode = RelationshipCode_
        elif nodeName_ == 'PctDollarBasis':
            PctDollarBasis_ = child_.text
            PctDollarBasis_ = self.gds_validate_string(PctDollarBasis_, node, 'PctDollarBasis')
            self.PctDollarBasis = PctDollarBasis_
        elif nodeName_ == 'TaxHandlingCode':
            TaxHandlingCode_ = child_.text
            TaxHandlingCode_ = self.gds_validate_string(TaxHandlingCode_, node, 'TaxHandlingCode')
            self.TaxHandlingCode = TaxHandlingCode_
        elif nodeName_ == 'TaxID':
            TaxID_ = child_.text
            TaxID_ = self.gds_validate_string(TaxID_, node, 'TaxID')
            self.TaxID = TaxID_
        elif nodeName_ == 'AssignedID':
            AssignedID_ = child_.text
            AssignedID_ = self.gds_validate_string(AssignedID_, node, 'AssignedID')
            self.AssignedID = AssignedID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TaxType44


class FOBRelatedInstructionType45(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FOBPayCode=None, FOBLocationQualifier=None, FOBLocationDescription=None, FOBTitlePassageCode=None, FOBTitlePassageLocation=None, TransportationTermsQualifierCode=None, TransportationTermsCode=None, RiskOfLossCode=None, Description=None):
        self.original_tagname_ = None
        self.FOBPayCode = FOBPayCode
        self.FOBLocationQualifier = FOBLocationQualifier
        self.FOBLocationDescription = FOBLocationDescription
        self.FOBTitlePassageCode = FOBTitlePassageCode
        self.FOBTitlePassageLocation = FOBTitlePassageLocation
        self.TransportationTermsQualifierCode = TransportationTermsQualifierCode
        self.TransportationTermsCode = TransportationTermsCode
        self.RiskOfLossCode = RiskOfLossCode
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FOBRelatedInstructionType45)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FOBRelatedInstructionType45.subclass:
            return FOBRelatedInstructionType45.subclass(*args_, **kwargs_)
        else:
            return FOBRelatedInstructionType45(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FOBPayCode(self): return self.FOBPayCode
    def set_FOBPayCode(self, FOBPayCode): self.FOBPayCode = FOBPayCode
    def get_FOBLocationQualifier(self): return self.FOBLocationQualifier
    def set_FOBLocationQualifier(self, FOBLocationQualifier): self.FOBLocationQualifier = FOBLocationQualifier
    def get_FOBLocationDescription(self): return self.FOBLocationDescription
    def set_FOBLocationDescription(self, FOBLocationDescription): self.FOBLocationDescription = FOBLocationDescription
    def get_FOBTitlePassageCode(self): return self.FOBTitlePassageCode
    def set_FOBTitlePassageCode(self, FOBTitlePassageCode): self.FOBTitlePassageCode = FOBTitlePassageCode
    def get_FOBTitlePassageLocation(self): return self.FOBTitlePassageLocation
    def set_FOBTitlePassageLocation(self, FOBTitlePassageLocation): self.FOBTitlePassageLocation = FOBTitlePassageLocation
    def get_TransportationTermsQualifierCode(self): return self.TransportationTermsQualifierCode
    def set_TransportationTermsQualifierCode(self, TransportationTermsQualifierCode): self.TransportationTermsQualifierCode = TransportationTermsQualifierCode
    def get_TransportationTermsCode(self): return self.TransportationTermsCode
    def set_TransportationTermsCode(self, TransportationTermsCode): self.TransportationTermsCode = TransportationTermsCode
    def get_RiskOfLossCode(self): return self.RiskOfLossCode
    def set_RiskOfLossCode(self, RiskOfLossCode): self.RiskOfLossCode = RiskOfLossCode
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.FOBPayCode is not None or
            self.FOBLocationQualifier is not None or
            self.FOBLocationDescription is not None or
            self.FOBTitlePassageCode is not None or
            self.FOBTitlePassageLocation is not None or
            self.TransportationTermsQualifierCode is not None or
            self.TransportationTermsCode is not None or
            self.RiskOfLossCode is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType45', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FOBRelatedInstructionType45')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FOBRelatedInstructionType45', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FOBRelatedInstructionType45'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType45', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FOBPayCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBPayCode>%s</%sFOBPayCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBPayCode), input_name='FOBPayCode')), namespace_, eol_))
        if self.FOBLocationQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBLocationQualifier>%s</%sFOBLocationQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBLocationQualifier), input_name='FOBLocationQualifier')), namespace_, eol_))
        if self.FOBLocationDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBLocationDescription>%s</%sFOBLocationDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBLocationDescription), input_name='FOBLocationDescription')), namespace_, eol_))
        if self.FOBTitlePassageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBTitlePassageCode>%s</%sFOBTitlePassageCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBTitlePassageCode), input_name='FOBTitlePassageCode')), namespace_, eol_))
        if self.FOBTitlePassageLocation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOBTitlePassageLocation>%s</%sFOBTitlePassageLocation>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FOBTitlePassageLocation), input_name='FOBTitlePassageLocation')), namespace_, eol_))
        if self.TransportationTermsQualifierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportationTermsQualifierCode>%s</%sTransportationTermsQualifierCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransportationTermsQualifierCode), input_name='TransportationTermsQualifierCode')), namespace_, eol_))
        if self.TransportationTermsCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportationTermsCode>%s</%sTransportationTermsCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransportationTermsCode), input_name='TransportationTermsCode')), namespace_, eol_))
        if self.RiskOfLossCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiskOfLossCode>%s</%sRiskOfLossCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RiskOfLossCode), input_name='RiskOfLossCode')), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FOBPayCode':
            FOBPayCode_ = child_.text
            FOBPayCode_ = self.gds_validate_string(FOBPayCode_, node, 'FOBPayCode')
            self.FOBPayCode = FOBPayCode_
        elif nodeName_ == 'FOBLocationQualifier':
            FOBLocationQualifier_ = child_.text
            FOBLocationQualifier_ = self.gds_validate_string(FOBLocationQualifier_, node, 'FOBLocationQualifier')
            self.FOBLocationQualifier = FOBLocationQualifier_
        elif nodeName_ == 'FOBLocationDescription':
            FOBLocationDescription_ = child_.text
            FOBLocationDescription_ = self.gds_validate_string(FOBLocationDescription_, node, 'FOBLocationDescription')
            self.FOBLocationDescription = FOBLocationDescription_
        elif nodeName_ == 'FOBTitlePassageCode':
            FOBTitlePassageCode_ = child_.text
            FOBTitlePassageCode_ = self.gds_validate_string(FOBTitlePassageCode_, node, 'FOBTitlePassageCode')
            self.FOBTitlePassageCode = FOBTitlePassageCode_
        elif nodeName_ == 'FOBTitlePassageLocation':
            FOBTitlePassageLocation_ = child_.text
            FOBTitlePassageLocation_ = self.gds_validate_string(FOBTitlePassageLocation_, node, 'FOBTitlePassageLocation')
            self.FOBTitlePassageLocation = FOBTitlePassageLocation_
        elif nodeName_ == 'TransportationTermsQualifierCode':
            TransportationTermsQualifierCode_ = child_.text
            TransportationTermsQualifierCode_ = self.gds_validate_string(TransportationTermsQualifierCode_, node, 'TransportationTermsQualifierCode')
            self.TransportationTermsQualifierCode = TransportationTermsQualifierCode_
        elif nodeName_ == 'TransportationTermsCode':
            TransportationTermsCode_ = child_.text
            TransportationTermsCode_ = self.gds_validate_string(TransportationTermsCode_, node, 'TransportationTermsCode')
            self.TransportationTermsCode = TransportationTermsCode_
        elif nodeName_ == 'RiskOfLossCode':
            RiskOfLossCode_ = child_.text
            RiskOfLossCode_ = self.gds_validate_string(RiskOfLossCode_, node, 'RiskOfLossCode')
            self.RiskOfLossCode = RiskOfLossCode_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class FOBRelatedInstructionType45


class CarrierInformationType46(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        if ServiceLevelCodes is None:
            self.ServiceLevelCodes = []
        else:
            self.ServiceLevelCodes = ServiceLevelCodes
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType46)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType46.subclass:
            return CarrierInformationType46.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType46(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def add_ServiceLevelCodes(self, value): self.ServiceLevelCodes.append(value)
    def insert_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes.insert(index, value)
    def replace_ServiceLevelCodes_at(self, index, value): self.ServiceLevelCodes[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType46', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType46')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType46', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType46'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType46', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespace_, eol_))
        if self.CarrierTransMethodCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierTransMethodCode>%s</%sCarrierTransMethodCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierTransMethodCode), input_name='CarrierTransMethodCode')), namespace_, eol_))
        if self.CarrierAlphaCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierAlphaCode>%s</%sCarrierAlphaCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierAlphaCode), input_name='CarrierAlphaCode')), namespace_, eol_))
        if self.CarrierRouting is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierRouting>%s</%sCarrierRouting>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierRouting), input_name='CarrierRouting')), namespace_, eol_))
        if self.EquipmentDescriptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentDescriptionCode>%s</%sEquipmentDescriptionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentDescriptionCode), input_name='EquipmentDescriptionCode')), namespace_, eol_))
        if self.CarrierEquipmentInitial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierEquipmentInitial>%s</%sCarrierEquipmentInitial>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierEquipmentInitial), input_name='CarrierEquipmentInitial')), namespace_, eol_))
        if self.CarrierEquipmentNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierEquipmentNumber>%s</%sCarrierEquipmentNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CarrierEquipmentNumber), input_name='CarrierEquipmentNumber')), namespace_, eol_))
        if self.EquipmentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEquipmentType>%s</%sEquipmentType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EquipmentType), input_name='EquipmentType')), namespace_, eol_))
        if self.SealStatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealStatusCode>%s</%sSealStatusCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealStatusCode), input_name='SealStatusCode')), namespace_, eol_))
        if self.SealNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealNumber>%s</%sSealNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SealNumber), input_name='SealNumber')), namespace_, eol_))
        if self.OwnershipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnershipCode>%s</%sOwnershipCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OwnershipCode), input_name='OwnershipCode')), namespace_, eol_))
        if self.RoutingSequenceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutingSequenceCode>%s</%sRoutingSequenceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RoutingSequenceCode), input_name='RoutingSequenceCode')), namespace_, eol_))
        if self.TransitDirectionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespace_, eol_))
        if self.TransitTimeQual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTimeQual>%s</%sTransitTimeQual>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTimeQual), input_name='TransitTimeQual')), namespace_, eol_))
        if self.TransitTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTime>%s</%sTransitTime>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TransitTime), input_name='TransitTime')), namespace_, eol_))
        for ServiceLevelCodes_ in self.ServiceLevelCodes:
            ServiceLevelCodes_.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
        elif nodeName_ == 'CarrierTransMethodCode':
            CarrierTransMethodCode_ = child_.text
            CarrierTransMethodCode_ = self.gds_validate_string(CarrierTransMethodCode_, node, 'CarrierTransMethodCode')
            self.CarrierTransMethodCode = CarrierTransMethodCode_
        elif nodeName_ == 'CarrierAlphaCode':
            CarrierAlphaCode_ = child_.text
            CarrierAlphaCode_ = self.gds_validate_string(CarrierAlphaCode_, node, 'CarrierAlphaCode')
            self.CarrierAlphaCode = CarrierAlphaCode_
        elif nodeName_ == 'CarrierRouting':
            CarrierRouting_ = child_.text
            CarrierRouting_ = self.gds_validate_string(CarrierRouting_, node, 'CarrierRouting')
            self.CarrierRouting = CarrierRouting_
        elif nodeName_ == 'EquipmentDescriptionCode':
            EquipmentDescriptionCode_ = child_.text
            EquipmentDescriptionCode_ = self.gds_validate_string(EquipmentDescriptionCode_, node, 'EquipmentDescriptionCode')
            self.EquipmentDescriptionCode = EquipmentDescriptionCode_
        elif nodeName_ == 'CarrierEquipmentInitial':
            CarrierEquipmentInitial_ = child_.text
            CarrierEquipmentInitial_ = self.gds_validate_string(CarrierEquipmentInitial_, node, 'CarrierEquipmentInitial')
            self.CarrierEquipmentInitial = CarrierEquipmentInitial_
        elif nodeName_ == 'CarrierEquipmentNumber':
            CarrierEquipmentNumber_ = child_.text
            CarrierEquipmentNumber_ = self.gds_validate_string(CarrierEquipmentNumber_, node, 'CarrierEquipmentNumber')
            self.CarrierEquipmentNumber = CarrierEquipmentNumber_
        elif nodeName_ == 'EquipmentType':
            EquipmentType_ = child_.text
            EquipmentType_ = self.gds_validate_string(EquipmentType_, node, 'EquipmentType')
            self.EquipmentType = EquipmentType_
        elif nodeName_ == 'SealStatusCode':
            SealStatusCode_ = child_.text
            SealStatusCode_ = self.gds_validate_string(SealStatusCode_, node, 'SealStatusCode')
            self.SealStatusCode = SealStatusCode_
        elif nodeName_ == 'SealNumber':
            SealNumber_ = child_.text
            SealNumber_ = self.gds_validate_string(SealNumber_, node, 'SealNumber')
            self.SealNumber = SealNumber_
        elif nodeName_ == 'OwnershipCode':
            OwnershipCode_ = child_.text
            OwnershipCode_ = self.gds_validate_string(OwnershipCode_, node, 'OwnershipCode')
            self.OwnershipCode = OwnershipCode_
        elif nodeName_ == 'RoutingSequenceCode':
            RoutingSequenceCode_ = child_.text
            RoutingSequenceCode_ = self.gds_validate_string(RoutingSequenceCode_, node, 'RoutingSequenceCode')
            self.RoutingSequenceCode = RoutingSequenceCode_
        elif nodeName_ == 'TransitDirectionCode':
            TransitDirectionCode_ = child_.text
            TransitDirectionCode_ = self.gds_validate_string(TransitDirectionCode_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = TransitDirectionCode_
        elif nodeName_ == 'TransitTimeQual':
            TransitTimeQual_ = child_.text
            TransitTimeQual_ = self.gds_validate_string(TransitTimeQual_, node, 'TransitTimeQual')
            self.TransitTimeQual = TransitTimeQual_
        elif nodeName_ == 'TransitTime':
            TransitTime_ = child_.text
            TransitTime_ = self.gds_validate_string(TransitTime_, node, 'TransitTime')
            self.TransitTime = TransitTime_
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType47.factory()
            obj_.build(child_)
            self.ServiceLevelCodes.append(obj_)
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType48.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType46


class ServiceLevelCodesType47(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType47)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType47.subclass:
            return ServiceLevelCodesType47.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType47(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType47', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType47')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType47', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType47'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType47', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevelCode>%s</%sServiceLevelCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevelCode), input_name='ServiceLevelCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            ServiceLevelCode_ = child_.text
            ServiceLevelCode_ = self.gds_validate_string(ServiceLevelCode_, node, 'ServiceLevelCode')
            self.ServiceLevelCode = ServiceLevelCode_
# end class ServiceLevelCodesType47


class AddressType48(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        if Date is None:
            self.Date = []
        else:
            self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType48)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType48.subclass:
            return AddressType48.subclass(*args_, **kwargs_)
        else:
            return AddressType48(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def add_Date(self, value): self.Date.append(value)
    def insert_Date_at(self, index, value): self.Date.insert(index, value)
    def replace_Date_at(self, index, value): self.Date[index] = value
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType48', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType48')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType48', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType48'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType48', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTypeCode>%s</%sAddressTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTypeCode), input_name='AddressTypeCode')), namespace_, eol_))
        if self.LocationCodeQualifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationCodeQualifier>%s</%sLocationCodeQualifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationCodeQualifier), input_name='LocationCodeQualifier')), namespace_, eol_))
        if self.AddressLocationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLocationNumber>%s</%sAddressLocationNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressLocationNumber), input_name='AddressLocationNumber')), namespace_, eol_))
        if self.AddressName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressName>%s</%sAddressName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressName), input_name='AddressName')), namespace_, eol_))
        if self.AddressAlternateName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName>%s</%sAddressAlternateName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName), input_name='AddressAlternateName')), namespace_, eol_))
        if self.AddressAlternateName2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressAlternateName2>%s</%sAddressAlternateName2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressAlternateName2), input_name='AddressAlternateName2')), namespace_, eol_))
        if self.Address1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress1>%s</%sAddress1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address1), input_name='Address1')), namespace_, eol_))
        if self.Address2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress2>%s</%sAddress2>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address2), input_name='Address2')), namespace_, eol_))
        if self.Address3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress3>%s</%sAddress3>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address3), input_name='Address3')), namespace_, eol_))
        if self.Address4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress4>%s</%sAddress4>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Address4), input_name='Address4')), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespace_, eol_))
        if self.LocationID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationID>%s</%sLocationID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LocationID), input_name='LocationID')), namespace_, eol_))
        if self.CountrySubDivision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountrySubDivision>%s</%sCountrySubDivision>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CountrySubDivision), input_name='CountrySubDivision')), namespace_, eol_))
        if self.AddressTaxIdNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxIdNumber>%s</%sAddressTaxIdNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxIdNumber), input_name='AddressTaxIdNumber')), namespace_, eol_))
        if self.AddressTaxExemptNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressTaxExemptNumber>%s</%sAddressTaxExemptNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AddressTaxExemptNumber), input_name='AddressTaxExemptNumber')), namespace_, eol_))
        for Date_ in self.Date:
            Date_.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            AddressTypeCode_ = child_.text
            AddressTypeCode_ = self.gds_validate_string(AddressTypeCode_, node, 'AddressTypeCode')
            self.AddressTypeCode = AddressTypeCode_
        elif nodeName_ == 'LocationCodeQualifier':
            LocationCodeQualifier_ = child_.text
            LocationCodeQualifier_ = self.gds_validate_string(LocationCodeQualifier_, node, 'LocationCodeQualifier')
            self.LocationCodeQualifier = LocationCodeQualifier_
        elif nodeName_ == 'AddressLocationNumber':
            AddressLocationNumber_ = child_.text
            AddressLocationNumber_ = self.gds_validate_string(AddressLocationNumber_, node, 'AddressLocationNumber')
            self.AddressLocationNumber = AddressLocationNumber_
        elif nodeName_ == 'AddressName':
            AddressName_ = child_.text
            AddressName_ = self.gds_validate_string(AddressName_, node, 'AddressName')
            self.AddressName = AddressName_
        elif nodeName_ == 'AddressAlternateName':
            AddressAlternateName_ = child_.text
            AddressAlternateName_ = self.gds_validate_string(AddressAlternateName_, node, 'AddressAlternateName')
            self.AddressAlternateName = AddressAlternateName_
        elif nodeName_ == 'AddressAlternateName2':
            AddressAlternateName2_ = child_.text
            AddressAlternateName2_ = self.gds_validate_string(AddressAlternateName2_, node, 'AddressAlternateName2')
            self.AddressAlternateName2 = AddressAlternateName2_
        elif nodeName_ == 'Address1':
            Address1_ = child_.text
            Address1_ = self.gds_validate_string(Address1_, node, 'Address1')
            self.Address1 = Address1_
        elif nodeName_ == 'Address2':
            Address2_ = child_.text
            Address2_ = self.gds_validate_string(Address2_, node, 'Address2')
            self.Address2 = Address2_
        elif nodeName_ == 'Address3':
            Address3_ = child_.text
            Address3_ = self.gds_validate_string(Address3_, node, 'Address3')
            self.Address3 = Address3_
        elif nodeName_ == 'Address4':
            Address4_ = child_.text
            Address4_ = self.gds_validate_string(Address4_, node, 'Address4')
            self.Address4 = Address4_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'LocationID':
            LocationID_ = child_.text
            LocationID_ = self.gds_validate_string(LocationID_, node, 'LocationID')
            self.LocationID = LocationID_
        elif nodeName_ == 'CountrySubDivision':
            CountrySubDivision_ = child_.text
            CountrySubDivision_ = self.gds_validate_string(CountrySubDivision_, node, 'CountrySubDivision')
            self.CountrySubDivision = CountrySubDivision_
        elif nodeName_ == 'AddressTaxIdNumber':
            AddressTaxIdNumber_ = child_.text
            AddressTaxIdNumber_ = self.gds_validate_string(AddressTaxIdNumber_, node, 'AddressTaxIdNumber')
            self.AddressTaxIdNumber = AddressTaxIdNumber_
        elif nodeName_ == 'AddressTaxExemptNumber':
            AddressTaxExemptNumber_ = child_.text
            AddressTaxExemptNumber_ = self.gds_validate_string(AddressTaxExemptNumber_, node, 'AddressTaxExemptNumber')
            self.AddressTaxExemptNumber = AddressTaxExemptNumber_
        elif nodeName_ == 'Date':
            obj_ = DateType49.factory()
            obj_.build(child_)
            self.Date.append(obj_)
            obj_.original_tagname_ = 'Date'
# end class AddressType48


class DateType49(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType49)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType49.subclass:
            return DateType49.subclass(*args_, **kwargs_)
        else:
            return DateType49(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType49', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType49')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType49', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType49'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType49', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimeQualifier1>%s</%sDateTimeQualifier1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimeQualifier1), input_name='DateTimeQualifier1')), namespace_, eol_))
        if self.Date1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate1>%s</%sDate1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Date1), input_name='Date1')), namespace_, eol_))
        if self.Time1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime1>%s</%sTime1>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Time1), input_name='Time1')), namespace_, eol_))
        if self.DateTimePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateTimePeriod>%s</%sDateTimePeriod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DateTimePeriod), input_name='DateTimePeriod')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            DateTimeQualifier1_ = child_.text
            DateTimeQualifier1_ = self.gds_validate_string(DateTimeQualifier1_, node, 'DateTimeQualifier1')
            self.DateTimeQualifier1 = DateTimeQualifier1_
        elif nodeName_ == 'Date1':
            Date1_ = child_.text
            Date1_ = self.gds_validate_string(Date1_, node, 'Date1')
            self.Date1 = Date1_
        elif nodeName_ == 'Time1':
            Time1_ = child_.text
            Time1_ = self.gds_validate_string(Time1_, node, 'Time1')
            self.Time1 = Time1_
        elif nodeName_ == 'DateTimePeriod':
            DateTimePeriod_ = child_.text
            DateTimePeriod_ = self.gds_validate_string(DateTimePeriod_, node, 'DateTimePeriod')
            self.DateTimePeriod = DateTimePeriod_
# end class DateType49


class SummaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TotalAmount=None, TotalLineItemNumber=None, TotalQuantity=None):
        self.original_tagname_ = None
        self.TotalAmount = TotalAmount
        self.TotalLineItemNumber = TotalLineItemNumber
        self.TotalQuantity = TotalQuantity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SummaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SummaryType.subclass:
            return SummaryType.subclass(*args_, **kwargs_)
        else:
            return SummaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TotalAmount(self): return self.TotalAmount
    def set_TotalAmount(self, TotalAmount): self.TotalAmount = TotalAmount
    def get_TotalLineItemNumber(self): return self.TotalLineItemNumber
    def set_TotalLineItemNumber(self, TotalLineItemNumber): self.TotalLineItemNumber = TotalLineItemNumber
    def get_TotalQuantity(self): return self.TotalQuantity
    def set_TotalQuantity(self, TotalQuantity): self.TotalQuantity = TotalQuantity
    def hasContent_(self):
        if (
            self.TotalAmount is not None or
            self.TotalLineItemNumber is not None or
            self.TotalQuantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SummaryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SummaryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SummaryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SummaryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SummaryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TotalAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalAmount>%s</%sTotalAmount>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TotalAmount), input_name='TotalAmount')), namespace_, eol_))
        if self.TotalLineItemNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalLineItemNumber>%s</%sTotalLineItemNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TotalLineItemNumber), input_name='TotalLineItemNumber')), namespace_, eol_))
        if self.TotalQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalQuantity>%s</%sTotalQuantity>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TotalQuantity), input_name='TotalQuantity')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TotalAmount':
            TotalAmount_ = child_.text
            TotalAmount_ = self.gds_validate_string(TotalAmount_, node, 'TotalAmount')
            self.TotalAmount = TotalAmount_
        elif nodeName_ == 'TotalLineItemNumber':
            TotalLineItemNumber_ = child_.text
            TotalLineItemNumber_ = self.gds_validate_string(TotalLineItemNumber_, node, 'TotalLineItemNumber')
            self.TotalLineItemNumber = TotalLineItemNumber_
        elif nodeName_ == 'TotalQuantity':
            TotalQuantity_ = child_.text
            TotalQuantity_ = self.gds_validate_string(TotalQuantity_, node, 'TotalQuantity')
            self.TotalQuantity = TotalQuantity_
# end class SummaryType


GDSClassesMapping = {
    'AdditionalContactDetails': AdditionalContactDetailsType38,
    'Address': AddressType48,
    'CarrierInformation': CarrierInformationType46,
    'ChargesAllowances': ChargesAllowancesType32,
    'Commodity': CommodityType40,
    'Contact': ContactType37,
    'Date': DateType49,
    'FOBRelatedInstruction': FOBRelatedInstructionType45,
    'Header': HeaderType,
    'ItemAttribute': ItemAttributeType,
    'LineItem': LineItemType,
    'LineItemAcknowledgement': LineItemAcknowledgementType,
    'LineItems': LineItemsType,
    'LocationQuantity': LocationQuantityType,
    'MasterItemAttribute': MasterItemAttributeType,
    'Measurements': MeasurementsType11,
    'Meta': MetaType,
    'MonetaryAmounts': MonetaryAmountsType,
    'NRFStandardColorAndSize': NRFStandardColorAndSizeType23,
    'Notes': NotesType30,
    'OrderAck': OrderAckType,
    'OrderHeader': OrderHeaderType,
    'OrderLine': OrderLineType,
    'PaymentTerms': PaymentTermsType,
    'PhysicalDetails': PhysicalDetailsType27,
    'PriceInformation': PriceInformationType25,
    'ProductID': ProductIDType22,
    'ProductOrItemDescription': ProductOrItemDescriptionType26,
    'QuantitiesSchedulesLocations': QuantitiesSchedulesLocationsType,
    'QuantityAndWeight': QuantityAndWeightType,
    'Reference': ReferenceType35,
    'ReferenceIDs': ReferenceIDsType36,
    'ServiceLevelCodes': ServiceLevelCodesType47,
    'Subline': SublineType,
    'SublineItemDetail': SublineItemDetailType,
    'Sublines': SublinesType,
    'Summary': SummaryType,
    'Tax': TaxType44,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'OrderAcks'
        rootClass = OrderAcks
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'OrderAcks'
        rootClass = OrderAcks
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'OrderAcks'
        rootClass = OrderAcks
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'OrderAcks'
        rootClass = OrderAcks
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from schemasLayout import *\n\n')
        sys.stdout.write('import schemasLayout as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AcknowledgementType",
    "AdditionalContactDetailsType",
    "AdditionalContactDetailsType2",
    "AdditionalContactDetailsType20",
    "AdditionalContactDetailsType38",
    "AddressType",
    "AddressType16",
    "AddressType34",
    "AddressType4",
    "AddressType48",
    "AddressTypeCode",
    "AgencyQualifierCode",
    "AllowChrgAgencyCode",
    "AllowChrgCode",
    "AllowChrgHandlingCode",
    "AllowChrgIndicator",
    "AllowChrgPercentQual",
    "AllowChrgQtyUOM",
    "CarrierInformationType",
    "CarrierInformationType46",
    "CarrierTransMethodCode",
    "ChangeReasonCode",
    "ChargesAllowancesType",
    "ChargesAllowancesType32",
    "ChargesAllowancesType43",
    "ClassOfTradeCode",
    "CommodityCodeQualifier",
    "CommodityType",
    "CommodityType15",
    "CommodityType40",
    "CompositeUOM",
    "ContactQual",
    "ContactType",
    "ContactType1",
    "ContactType19",
    "ContactType37",
    "ContactTypeCode",
    "CreditDebitFlag",
    "DateTimeQualifier1",
    "DateType",
    "DateType10",
    "DateType21",
    "DateType24",
    "DateType3",
    "DateType39",
    "DateType41",
    "DateType49",
    "DateType5",
    "EquipmentDescriptionCode",
    "FOBLocationQualifier",
    "FOBPayCode",
    "FOBRelatedInstructionType",
    "FOBRelatedInstructionType45",
    "FOBTitlePassageCode",
    "HeaderType",
    "ItemAttributeQualifier",
    "ItemAttributeType",
    "ItemDescriptionType",
    "ItemScheduleQualifier",
    "ItemScheduleUOM",
    "ItemStatusCode",
    "JurisdictionQual",
    "LeadTimeCode",
    "LeadTimePeriodInterval",
    "LineItemAcknowledgementType",
    "LineItemType",
    "LineItemsType",
    "LocationCodeQualifier",
    "LocationQuantityType",
    "MasterItemAttributeType",
    "MeasurementQualifier",
    "MeasurementSignificanceCode",
    "MeasurementsType",
    "MeasurementsType11",
    "MetaType",
    "MonetaryAmountCode",
    "MonetaryAmountsType",
    "NRFStandardColorAndSizeType",
    "NRFStandardColorAndSizeType23",
    "NoteCode",
    "NotesType",
    "NotesType14",
    "NotesType30",
    "OrderAckType",
    "OrderAcks",
    "OrderHeaderType",
    "OrderLineType",
    "OrderManagement",
    "OrderQtyUOM",
    "OwnershipCode",
    "PackDimensionUOM",
    "PackQualifier",
    "PackUOM",
    "PackVolumeUOM",
    "PackWeightUOM",
    "PackingMaterial",
    "PackingMedium",
    "PalletExchangeCode",
    "PartNumberQual",
    "PaymentMethodCode",
    "PaymentTermsType",
    "PhysicalDetailsType",
    "PhysicalDetailsType27",
    "PriceInformationType",
    "PriceInformationType25",
    "PriceMultiplierQual",
    "PriceTypeIDCode",
    "ProductIDType",
    "ProductIDType22",
    "ProductIDType9",
    "ProductOrItemDescriptionType",
    "ProductOrItemDescriptionType26",
    "PurchaseOrderTypeCode",
    "PurchasePriceBasis",
    "PurchasePriceType",
    "QtyPerUOM",
    "QuantitiesSchedulesLocationsType",
    "QuantityAndWeightType",
    "QuantityQualifier",
    "QuantityUOM",
    "ReferenceIDsType",
    "ReferenceIDsType13",
    "ReferenceIDsType18",
    "ReferenceIDsType29",
    "ReferenceIDsType36",
    "ReferenceIDsType7",
    "ReferenceQual",
    "ReferenceType",
    "ReferenceType12",
    "ReferenceType17",
    "ReferenceType28",
    "ReferenceType35",
    "ReferenceType6",
    "RelationshipCode",
    "RiskOfLossCode",
    "RoutingSequenceCode",
    "SealStatusCode",
    "ServiceLevelCode",
    "ServiceLevelCodesType",
    "ServiceLevelCodesType47",
    "ShipCompleteCode",
    "StatusCode",
    "SublineItemDetailType",
    "SublineType",
    "SublinesType",
    "SummaryType",
    "TaxExemptCode",
    "TaxHandlingCode",
    "TaxPercentQual",
    "TaxType",
    "TaxType31",
    "TaxType33",
    "TaxType42",
    "TaxType44",
    "TaxType8",
    "TaxTypeCode",
    "TermsBasisDateCode",
    "TermsDueDateQual",
    "TermsType",
    "TotalQtyUOM",
    "TradingPartnerId",
    "TransitDirectionCode",
    "TransitTimeQual",
    "TransportationTermsQualifierCode",
    "TsetPurposeCode",
    "UnitPriceBasis",
    "ValueUOM",
    "VolumeUOM",
    "WeightQualifier",
    "WeightUOM",
    "YesOrNoResponse",
    "attributes_boolean",
    "attributes_date",
    "attributes_decimal",
    "attributes_integer",
    "attributes_string",
    "attributes_time"
]
